<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>企业中的前端开发</title>
      <link href="/2022/11/14/qi-ye-zhong-de-qian-duan-kai-fa/"/>
      <url>/2022/11/14/qi-ye-zhong-de-qian-duan-kai-fa/</url>
      
        <content type="html"><![CDATA[<p>如今从事前端开发将近四年，经手大概 6-7 个项目了，发现目前仍然存在的一些前端问题。</p><ul><li>数据（模型）问题</li><li>代码约束问题</li></ul><h2 id="数据（模型）问题">数据（模型）问题</h2><p>前端开发过程中，不可避免的两个问题点<em>视图&amp;数据</em>，视图负责展示，数据负责填充视图。</p><p>数据测分为两种类型</p><ul><li>自有数据</li><li>三方数据</li></ul><p>在我开发的项目中，前后端联调主要凭借，文档约束，口头约束，信任约束。</p><p>而这三种约束基本没一个是靠谱的，就像 rust 编程一样，我们应该将这种外来依赖编辑为<code>unsafe</code>类型以来。</p><p>从而做一些防御性编程，比如数据使用<code>?</code>进行调用。</p><p>而自有数据，则是稳定的，所以我们应该通过强大的 ts 完成完整的类型编写。</p><p>由于三方接口的不稳定，我们应该假定他的数据都是可 null 的</p><h2 id="代码约束问题">代码约束问题</h2><p>在企业开发中，高速迭代和稳定，可维护至关重要。</p><p>现今的手脚架，解决了同类项目模版问题，但是没有解决长期约束。</p><p>也就是代码质量约束，那么如果想要做到代码质量,应该分一下几点进行。</p><p>穷举场景</p><ul><li>h5 类型，C 端类，表单类</li><li>pc 类型，B 端类，C 端类</li></ul><p>这些类型的场景，都围绕几个点</p><p>路由、组件。</p><pre><code class="hljs">路由<span class="hljs-code">    页面组件        区域组件            基础组件</span></code></pre><p>层层递归的组层结构，当下 eslint，prettier 将在一定层度只是解决了代码风格的问题，对于企业开发，要的不是灵活而是更多的约束。</p><p>为什么需要更多的约束？</p><ul><li>代码更加模版化</li><li>代码风格一致</li><li>将业务开发与最佳实践调研分离，提高开发效率</li></ul><p>这部分的解决方案是通过更加项目化的 eslint 进行规则约束。</p><p>在最近一段时间内，我写了 golang rust java javascript, 我觉得公司内部的 java 对于这方面做的是最好的。</p><p>javascript 虽然也有这一定层度的分层，但是每个项目都不一样，我进入项目的第一件事就是搞懂，代码是怎么划分的，十分浪费时间。</p><p>而上面说的约束是可以通过 eslint 的插件进行开发的。</p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx管理平台</title>
      <link href="/2022/09/02/nginx-guan-li-ping-tai/"/>
      <url>/2022/09/02/nginx-guan-li-ping-tai/</url>
      
        <content type="html"><![CDATA[<p>想做一个 nginx 管理平台，以高可拓展性作为战略方向。</p><p>由此需要设计一个非常非常灵活的可拓展界面，以及插件系统。</p><p>为什么要搞这件事？</p><ul><li>nginx 配置麻烦</li><li>中小型公司一般就几台或者一台 nginx 处理前后端资源，不易于管理</li><li>对外可生产环境使用，对内可测试开发使用，通过njs进行拓展(一个小型网关？)</li></ul><h3 id="目录结构">目录结构</h3><ul><li>插件市场</li><li>编写插件模块</li><li>管理插件模块</li><li>登录（用户）低优先级</li></ul><h3 id="表设计">表设计</h3><pre><code class="hljs">每个表都有这几个字段|<span class="hljs-string">created_time</span>|<span class="hljs-string">bigint</span>||<span class="hljs-string">updated_time</span>|<span class="hljs-string">bigint</span>||<span class="hljs-string">deleted_time</span>|<span class="hljs-string">bigint</span>|</code></pre><p>plugin:</p><table><thead><tr><th>field</th><th>type</th></tr></thead><tbody><tr><td>plugin_name</td><td>varchar(128)</td></tr><tr><td>id</td><td>bigint</td></tr><tr><td>author</td><td>varchar(128)</td></tr></tbody></table><p>plugin schema config:</p><table><thead><tr><th>field</th><th>type</th></tr></thead><tbody><tr><td>config</td><td>text</td></tr><tr><td>id</td><td>bigint</td></tr><tr><td>config data</td><td>text</td></tr></tbody></table><p>后端使用 golang (可以打出来一个可执行包这个诱惑力太大了)<br>前端使用 react + react jsonschema + mui<br>数据库暂时使用 sqlite</p><p>核心插件：<br><s>nginx config 插件，用来配置 nginx</s><a href="https://github.com/nginx/njs/issues/10">看来不行，不能执行reload</a></p><p>架构变化一下</p><p>golang client 去做这件事</p><pre class="mermaid">flowchart TDA[前端页面]-->B[golang server]-->C[golang client]-->D[nginx]</pre><h3 id="流程">流程</h3><p><strong>请求流程</strong></p><pre class="mermaid">flowchart TDA[开始] --> B{是否使用插件?}B --> |是| C[使用插件控制]B --> |否| D[默认配置]</pre><p><strong>配置插件流程</strong></p><pre class="mermaid">flowchart TBA[开启插件/更新插件] --> B[golang server send a request] --> C[golang client update nginx config]</pre><h3 id="问题">问题</h3><ol><li><p>由于njs不能执行sh，所以njs是存在局限性的，可以通过因为golang client解决这个问题，但是存在一个新的问题，如何拓展nginx配置呢？</p><p>对于一些正则过滤实际上不需要njs的，所以需要将已经存在的配置格式化，已经存在的便捷配置不需要进行njs处理，比如请求头标识。<br>对于不存在的配置需要njs处理，比如添加水印，注入js</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/31/v2022-08-31-15-15/"/>
      <url>/2022/08/31/v2022-08-31-15-15/</url>
      
        <content type="html"><![CDATA[<p>看来没什么好的发展方向，不如从别的方面提升自己，比如减少bug数量，提高代码质量。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>发展方向</title>
      <link href="/2022/08/31/qian-duan-fa-zhan-fang-xiang-qian-xi/"/>
      <url>/2022/08/31/qian-duan-fa-zhan-fang-xiang-qian-xi/</url>
      
        <content type="html"><![CDATA[<p>长期更新</p><p>更新时间：20220831</p><p>从目前看前端大致分为，传统意义的前端，辅助传统意义的前端的工具层，纯后端。</p><pre class="mermaid">flowchart BT纯后端-->node工具层-->前端</pre><h2 id="前端">前端</h2><p>前端就是传统意义的界面，这部分包含</p><pre class="mermaid">flowchart TB前端-->监控埋点 & 组件库 & 开发框架 & 样式框架 & 工具库</pre><ul><li>监控埋点<ul><li>来说b端可有可无，但是仍需要请求层监控，如果发现问题可以和后端对账</li></ul></li><li>组件库<ul><li>一般都会选个市面开源的，市面上有很多开源组件库比如antd 系列</li></ul></li><li>开发框架<ul><li>vue react svelet</li><li>响应式，函数式，编译型响应式这几类</li><li>如果是涵盖小程序开发，可使用vue的uni app 或者react 的taro</li></ul></li><li>样式框架<ul><li>less sass <code>css in js</code></li><li>目前看国内less比较多 <code>css in js</code>还是蛮少的</li></ul></li><li>工具库<ul><li>i18n lodash rxjs bignumber moment/dayjs</li></ul></li></ul><h2 id="node-工具层">node 工具层</h2><p>辅助前端开发的工具</p><pre class="mermaid">flowchart TB辅助工具-->lint/格式化工具 & 打包工具 & 编译工具</pre><ul><li>lint/格式化工具<ul><li>eslint prettify</li></ul></li><li>打包工具<ul><li>webpack vite</li><li>这些工具大部分开箱即用</li></ul></li><li>编译工具<ul><li>esbuild swc babel</li></ul></li></ul><h2 id="纯后端">纯后端</h2><pre class="mermaid">flowchart TB后端-->服务端渲染 & 服务端开发</pre><ul><li>服务端渲染<ul><li>next nuxt remix</li></ul></li><li>服务端开发<ul><li>服务层 nestjs express koa</li><li>orm 层 typeorm prisma</li></ul></li></ul><h2 id="比较细分前端的类目">比较细分前端的类目</h2><ul><li>游戏开发</li><li>音视频开发</li><li>wasm开发</li><li>在线文档开发</li><li>多端开发</li></ul><h2 id="总结">总结</h2><p>总的来讲基本很难在发明颠覆性的东西，但是仍然可以基于已有的思维去增量创新。</p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lua-geneator</title>
      <link href="/2022/06/18/lua-geneator/"/>
      <url>/2022/06/18/lua-geneator/</url>
      
        <content type="html"><![CDATA[<p>代码生成</p><h3 id="定义关键字及符号映射">定义关键字及符号映射</h3><div id="preview-6" class="preview"><div class="preview-box">    <div id="draw-6">    src=lua-lexer.js<script src="/js/lua-lexer.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-6" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-6" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_6 = document.getElementById('expand-6');    const bindCode_6 = document.getElementById('code-6');    let flag_6 = true;    expandCode_6.onclick = function (){        if(flag_6){            bindCode_6.classList.add('preview-code-active')        }else{            bindCode_6.classList.remove('preview-code-active')         }        flag_6 = !flag_6    }</script></div><div id="preview-7" class="preview"><div class="preview-box">    <div id="draw-7">    src=lua-token.js<script src="/js/lua-token.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-7" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-7" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_7 = document.getElementById('expand-7');    const bindCode_7 = document.getElementById('code-7');    let flag_7 = true;    expandCode_7.onclick = function (){        if(flag_7){            bindCode_7.classList.add('preview-code-active')        }else{            bindCode_7.classList.remove('preview-code-active')         }        flag_7 = !flag_7    }</script></div><div id="preview-8" class="preview"><div class="preview-box">    <div id="draw-8">    src=lua-parser.js<script src="/js/lua-parser.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-8" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-8" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_8 = document.getElementById('expand-8');    const bindCode_8 = document.getElementById('code-8');    let flag_8 = true;    expandCode_8.onclick = function (){        if(flag_8){            bindCode_8.classList.add('preview-code-active')        }else{            bindCode_8.classList.remove('preview-code-active')         }        flag_8 = !flag_8    }</script></div><div id="preview-9" class="preview"><div class="preview-box">    <div id="draw-9">    src=lua-gen-js.js<script src="/js/lua-gen-js.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-9" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-9" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_9 = document.getElementById('expand-9');    const bindCode_9 = document.getElementById('code-9');    let flag_9 = true;    expandCode_9.onclick = function (){        if(flag_9){            bindCode_9.classList.add('preview-code-active')        }else{            bindCode_9.classList.remove('preview-code-active')         }        flag_9 = !flag_9    }</script></div><div id="preview-10" class="preview"><div class="preview-box">    <div id="draw-10">    drawCode<script type="module">                    (function(){                        function drawCode(code, dom, idx) {  let str = `<textarea id="code-${idx}" class="code" rows=6 style="width:100%" readonly>${code}</textarea>`;  dom.innerHTML = str;}window.drawCode = drawCode;                    })(10)                </script>    </div>    <div class="preview-box-util">        <span id="expand-10" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-10" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawCode</span>(<span class="hljs-params">code, dom, idx</span>) &#123;  <span class="hljs-keyword">let</span> str = <span class="hljs-string">`&lt;textarea id=&quot;code-<span class="hljs-subst">$&#123;idx&#125;</span>&quot; class=&quot;code&quot; rows=6 style=&quot;width:100%&quot; readonly&gt;<span class="hljs-subst">$&#123;code&#125;</span>&lt;/textarea&gt;`</span>;  dom.<span class="hljs-property">innerHTML</span> = str;&#125;<span class="hljs-variable language_">window</span>.<span class="hljs-property">drawCode</span> = drawCode;</code></pre></div><script>    const expandCode_10 = document.getElementById('expand-10');    const bindCode_10 = document.getElementById('code-10');    let flag_10 = true;    expandCode_10.onclick = function (){        if(flag_10){            bindCode_10.classList.add('preview-code-active')        }else{            bindCode_10.classList.remove('preview-code-active')         }        flag_10 = !flag_10    }</script></div><div id="preview-11" class="preview"><div class="preview-box">    <div id="draw-11">    draw<script type="module">                    (function(){                        function draw(code, ast, idx) {  let e = document.getElementById(`draw-${idx}`);  e.classList.add("box");  let c = document.createElement("div");  c.classList.add("code");  e.appendChild(c);  drawCode(code, c, idx);}window.draw = draw;                    })(11)                </script>    </div>    <div class="preview-box-util">        <span id="expand-11" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-11" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">code, ast, idx</span>) &#123;  <span class="hljs-keyword">let</span> e = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`draw-<span class="hljs-subst">$&#123;idx&#125;</span>`</span>);  e.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;box&quot;</span>);  <span class="hljs-keyword">let</span> c = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);  c.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;code&quot;</span>);  e.<span class="hljs-title function_">appendChild</span>(c);  <span class="hljs-title function_">drawCode</span>(code, c, idx);&#125;<span class="hljs-variable language_">window</span>.<span class="hljs-property">draw</span> = draw;</code></pre></div><script>    const expandCode_11 = document.getElementById('expand-11');    const bindCode_11 = document.getElementById('code-11');    let flag_11 = true;    expandCode_11.onclick = function (){        if(flag_11){            bindCode_11.classList.add('preview-code-active')        }else{            bindCode_11.classList.remove('preview-code-active')         }        flag_11 = !flag_11    }</script></div><pre >// 生成的js代码<div style="    white-space: pre-wrap;" id="js-code"></div><div>//eval 执行结果</div><div id="js-eval" ></div></pre><div>source code 👇👇👇</div><div id="preview-14" class="preview"><div class="preview-box">    <div id="draw-14">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `local name,age = "jack",18;local jsCode = document.getElementById("js-eval");jsCode.textContent = "hello world!!!, name is".." "..name.." age is "..age;`;let lexer = new Lexer(code);let parser = new Parser(lexer);let ast = parser.parse();draw(code, ast, idx);console.log(ast);let jsCode = gen(ast);document.getElementById("js-code").textContent = jsCode.split(";").join(";\n");console.log(jsCode);eval(jsCode);                    })(14)                </script>    </div>    <div class="preview-box-util">        <span id="expand-14" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-14" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`local name,age = &quot;jack&quot;,18;local jsCode = document.getElementById(&quot;js-eval&quot;);jsCode.textContent = &quot;hello world!!!, name is&quot;..&quot; &quot;..name..&quot; age is &quot;..age;`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-keyword">let</span> ast = parser.<span class="hljs-title function_">parse</span>();<span class="hljs-title function_">draw</span>(code, ast, idx);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast);<span class="hljs-keyword">let</span> jsCode = <span class="hljs-title function_">gen</span>(ast);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;js-code&quot;</span>).<span class="hljs-property">textContent</span> = jsCode.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;;\n&quot;</span>);<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(jsCode);<span class="hljs-built_in">eval</span>(jsCode);</code></pre></div><script>    const expandCode_14 = document.getElementById('expand-14');    const bindCode_14 = document.getElementById('code-14');    let flag_14 = true;    expandCode_14.onclick = function (){        if(flag_14){            bindCode_14.classList.add('preview-code-active')        }else{            bindCode_14.classList.remove('preview-code-active')         }        flag_14 = !flag_14    }</script></div><pre><code class="hljs"></code></pre>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/10/v2022-06-10-15-24/"/>
      <url>/2022/06/10/v2022-06-10-15-24/</url>
      
        <content type="html"><![CDATA[<p>随机想到要写些什么，但是手摸到键盘又不知道写些什么。近来一位同事离职了，本身与我交集甚少，但其记录的一些事情，对我感触颇深，内容大多为工作中的见解，文字淳朴自然，能够感觉到他从每件事中获得的收获，最近听书说：古人对于智商的判断分3阶段，一阶段是12岁前，记忆力是判断标准；二阶段是12-33或者36（记不太清楚了），理解力是判断标准，随后是判断力，决策力。惊讶于同事对每件事情都有自己的见解，每件事都能够收获一些东西，记录下来像是传习录一般，后面的人看了感觉也是收获颇多，想到自己也经常有奇思妙想，但篇幅不足以成文，多以片段为主，不如和他一般随想随记，不为什么，只不过是留个印记罢了。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/06/06/v2022-06-06-11-17/"/>
      <url>/2022/06/06/v2022-06-06-11-17/</url>
      
        <content type="html"><![CDATA[<p>今天看到白鹭公司老总的一封信，相信一个运营10多年来的公司，想必一定也曾风光过，没想到就此陨落，不知道能否东山再起，就像罗永浩那样起起伏伏，只能说人生无常，事事并非如愿。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lua-parse</title>
      <link href="/2022/06/05/lua.parser/"/>
      <url>/2022/06/05/lua.parser/</url>
      
        <content type="html"><![CDATA[<p>动手写个词法解析器，词法解析非常简单其关键处理问题在于</p><ul><li>字符串</li><li>数字</li><li>关键字与符号</li></ul><h3 id="定义关键字及符号映射">定义关键字及符号映射</h3><div id="preview-23" class="preview"><div class="preview-box">    <div id="draw-23">    src=lua-lexer.js<script src="/js/lua-lexer.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-23" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-23" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_23 = document.getElementById('expand-23');    const bindCode_23 = document.getElementById('code-23');    let flag_23 = true;    expandCode_23.onclick = function (){        if(flag_23){            bindCode_23.classList.add('preview-code-active')        }else{            bindCode_23.classList.remove('preview-code-active')         }        flag_23 = !flag_23    }</script></div><div id="preview-24" class="preview"><div class="preview-box">    <div id="draw-24">    src=lua-token.js<script src="/js/lua-token.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-24" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-24" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_24 = document.getElementById('expand-24');    const bindCode_24 = document.getElementById('code-24');    let flag_24 = true;    expandCode_24.onclick = function (){        if(flag_24){            bindCode_24.classList.add('preview-code-active')        }else{            bindCode_24.classList.remove('preview-code-active')         }        flag_24 = !flag_24    }</script></div><div id="preview-25" class="preview"><div class="preview-box">    <div id="draw-25">    src=lua-parser.js<script src="/js/lua-parser.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-25" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-25" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_25 = document.getElementById('expand-25');    const bindCode_25 = document.getElementById('code-25');    let flag_25 = true;    expandCode_25.onclick = function (){        if(flag_25){            bindCode_25.classList.add('preview-code-active')        }else{            bindCode_25.classList.remove('preview-code-active')         }        flag_25 = !flag_25    }</script></div><style>.node{cursor:pointer;}li {list-style-type: none;    position:relative;}.node::before {content: "\25B6";color: var(--color01);display: inline-block;margin-right: 6px;font-size: small;    position: absolute;    left: -16px;}.node[data-active='true']::before {transform: rotate(90deg);}[data-active='true']{display:block;}[data-active='true'] .mini{display:none;}[data-active='false'] ul{display:none;}[data-active='false'] .mini{display:inline;}  .box{    display:flex;    flex-wrap:wrap;    max-height: 400px;    overflow:auto;  }   </style><div id="preview-27" class="preview"><div class="preview-box">    <div id="draw-27">    drawJson<script type="module">                    (function(){                        function drawAttrs(attrs) {  let attrStr = "<ul class='attrs'>";  for (let { key, val } of attrs) {    attrStr += `<li class='attr'>${key}:${val}</li>`;  }  return attrStr + "</ul>";}function drawNode(node,idx) {  let name = "";  if (node?.constructor?.name) {    name = node.constructor.name;  }  let startTag = "";  let endName = "";  if (name === "Object") {    startTag = "{";    endName = "}";  }  if (name === "Array") {    startTag = "[";    endName = "]";  }  let mini = "";  if (endName !== "") {    mini = `<span class="mini"> ${Object.keys(node)} </span>`;    endName = `<span>${endName}</span>`;  }  if (node._n) {    name = `${node._n}:${name}`;  }  let keys = Object.keys(node);  let attrs = [];  let childrenToken = [];  for (let key of keys) {    if (typeof node[key] !== "object" || node[key] == null) {      attrs.push({ key, val: node[key] });    } else {      Object.defineProperty(node[key], "_n", {        enumerable: false,        value: key,      });      childrenToken.push(node[key]);    }  }  let attrStr = "";  if (attrs.length) {    attrStr = drawAttrs(attrs);  }  let childrenStr = "";  if (childrenToken.length) {    childrenStr = drawTree(childrenToken,idx);  }  const printLocation = (node) => {    if (node instanceof Node) {      return `onclick="selectCode(event,${idx})" data-start=${node.location?.start?.offset} data-end=${node.location?.end?.offset}`;    }  };  return `<li class='node' data-active="false"   ${printLocation(    node  )}>${name}${startTag}${attrStr}${childrenStr}${mini}${endName}</li>`;}function drawTree(nodes,idx) {  let children = [];  for (let node of nodes) {    children.push(drawNode(node,idx));  }  return `<ul class="tree"  >${children.join("\n")}</ul>`;}function toggle(e) {  if (e.dataset["active"] === "true") {    e.dataset["active"] = false;  } else {    e.dataset["active"] = true;  }}function drawJson(obj, dom, idx) {  let str = drawTree([obj], idx);  dom.addEventListener(    "click",    (e) => {      if (e.target.tagName === "LI") {        toggle(e.target);      }    },    false  );  dom.innerHTML = `<div>  <button onclick="expandAll(${idx})">展开所有</button>  <button onclick="foldAll(${idx})">折叠所有</button></div>  ${str}`;}window.drawJson = drawJson;                    })(27)                </script>    </div>    <div class="preview-box-util">        <span id="expand-27" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-27" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawAttrs</span>(<span class="hljs-params">attrs</span>) &#123;  <span class="hljs-keyword">let</span> attrStr = <span class="hljs-string">&quot;&lt;ul class=&#x27;attrs&#x27;&gt;&quot;</span>;  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> &#123; key, val &#125; <span class="hljs-keyword">of</span> attrs) &#123;    attrStr += <span class="hljs-string">`&lt;li class=&#x27;attr&#x27;&gt;<span class="hljs-subst">$&#123;key&#125;</span>:<span class="hljs-subst">$&#123;val&#125;</span>&lt;/li&gt;`</span>;  &#125;  <span class="hljs-keyword">return</span> attrStr + <span class="hljs-string">&quot;&lt;/ul&gt;&quot;</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">drawNode</span>(<span class="hljs-params">node,idx</span>) &#123;  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">if</span> (node?.<span class="hljs-property">constructor</span>?.<span class="hljs-property">name</span>) &#123;    name = node.<span class="hljs-property">constructor</span>.<span class="hljs-property">name</span>;  &#125;  <span class="hljs-keyword">let</span> startTag = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">let</span> endName = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;Object&quot;</span>) &#123;    startTag = <span class="hljs-string">&quot;&#123;&quot;</span>;    endName = <span class="hljs-string">&quot;&#125;&quot;</span>;  &#125;  <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&quot;Array&quot;</span>) &#123;    startTag = <span class="hljs-string">&quot;[&quot;</span>;    endName = <span class="hljs-string">&quot;]&quot;</span>;  &#125;  <span class="hljs-keyword">let</span> mini = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">if</span> (endName !== <span class="hljs-string">&quot;&quot;</span>) &#123;    mini = <span class="hljs-string">`&lt;span class=&quot;mini&quot;&gt; <span class="hljs-subst">$&#123;<span class="hljs-built_in">Object</span>.keys(node)&#125;</span> &lt;/span&gt;`</span>;    endName = <span class="hljs-string">`&lt;span&gt;<span class="hljs-subst">$&#123;endName&#125;</span>&lt;/span&gt;`</span>;  &#125;  <span class="hljs-keyword">if</span> (node.<span class="hljs-property">_n</span>) &#123;    name = <span class="hljs-string">`<span class="hljs-subst">$&#123;node._n&#125;</span>:<span class="hljs-subst">$&#123;name&#125;</span>`</span>;  &#125;  <span class="hljs-keyword">let</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(node);  <span class="hljs-keyword">let</span> attrs = [];  <span class="hljs-keyword">let</span> childrenToken = [];  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> keys) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> node[key] !== <span class="hljs-string">&quot;object&quot;</span> || node[key] == <span class="hljs-literal">null</span>) &#123;      attrs.<span class="hljs-title function_">push</span>(&#123; key, <span class="hljs-attr">val</span>: node[key] &#125;);    &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(node[key], <span class="hljs-string">&quot;_n&quot;</span>, &#123;        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">value</span>: key,      &#125;);      childrenToken.<span class="hljs-title function_">push</span>(node[key]);    &#125;  &#125;  <span class="hljs-keyword">let</span> attrStr = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">if</span> (attrs.<span class="hljs-property">length</span>) &#123;    attrStr = <span class="hljs-title function_">drawAttrs</span>(attrs);  &#125;  <span class="hljs-keyword">let</span> childrenStr = <span class="hljs-string">&quot;&quot;</span>;  <span class="hljs-keyword">if</span> (childrenToken.<span class="hljs-property">length</span>) &#123;    childrenStr = <span class="hljs-title function_">drawTree</span>(childrenToken,idx);  &#125;  <span class="hljs-keyword">const</span> <span class="hljs-title function_">printLocation</span> = (<span class="hljs-params">node</span>) =&gt; &#123;    <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Node</span>) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-string">`onclick=&quot;selectCode(event,<span class="hljs-subst">$&#123;idx&#125;</span>)&quot; data-start=<span class="hljs-subst">$&#123;node.location?.start?.offset&#125;</span> data-end=<span class="hljs-subst">$&#123;node.location?.end?.offset&#125;</span>`</span>;    &#125;  &#125;;  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;li class=&#x27;node&#x27; data-active=&quot;false&quot;   <span class="hljs-subst">$&#123;printLocation(    node  )&#125;</span>&gt;<span class="hljs-subst">$&#123;name&#125;</span><span class="hljs-subst">$&#123;startTag&#125;</span><span class="hljs-subst">$&#123;attrStr&#125;</span><span class="hljs-subst">$&#123;childrenStr&#125;</span><span class="hljs-subst">$&#123;mini&#125;</span><span class="hljs-subst">$&#123;endName&#125;</span>&lt;/li&gt;`</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">drawTree</span>(<span class="hljs-params">nodes,idx</span>) &#123;  <span class="hljs-keyword">let</span> children = [];  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> node <span class="hljs-keyword">of</span> nodes) &#123;    children.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">drawNode</span>(node,idx));  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;ul class=&quot;tree&quot;  &gt;<span class="hljs-subst">$&#123;children.join(<span class="hljs-string">&quot;\n&quot;</span>)&#125;</span>&lt;/ul&gt;`</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">toggle</span>(<span class="hljs-params">e</span>) &#123;  <span class="hljs-keyword">if</span> (e.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;active&quot;</span>] === <span class="hljs-string">&quot;true&quot;</span>) &#123;    e.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;active&quot;</span>] = <span class="hljs-literal">false</span>;  &#125; <span class="hljs-keyword">else</span> &#123;    e.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;active&quot;</span>] = <span class="hljs-literal">true</span>;  &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">drawJson</span>(<span class="hljs-params">obj, dom, idx</span>) &#123;  <span class="hljs-keyword">let</span> str = <span class="hljs-title function_">drawTree</span>([obj], idx);  dom.<span class="hljs-title function_">addEventListener</span>(    <span class="hljs-string">&quot;click&quot;</span>,    <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;      <span class="hljs-keyword">if</span> (e.<span class="hljs-property">target</span>.<span class="hljs-property">tagName</span> === <span class="hljs-string">&quot;LI&quot;</span>) &#123;        <span class="hljs-title function_">toggle</span>(e.<span class="hljs-property">target</span>);      &#125;    &#125;,    <span class="hljs-literal">false</span>  );  dom.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;div&gt;  &lt;button onclick=&quot;expandAll(<span class="hljs-subst">$&#123;idx&#125;</span>)&quot;&gt;展开所有&lt;/button&gt;  &lt;button onclick=&quot;foldAll(<span class="hljs-subst">$&#123;idx&#125;</span>)&quot;&gt;折叠所有&lt;/button&gt;&lt;/div&gt;  <span class="hljs-subst">$&#123;str&#125;</span>`</span>;&#125;<span class="hljs-variable language_">window</span>.<span class="hljs-property">drawJson</span> = drawJson;</code></pre></div><script>    const expandCode_27 = document.getElementById('expand-27');    const bindCode_27 = document.getElementById('code-27');    let flag_27 = true;    expandCode_27.onclick = function (){        if(flag_27){            bindCode_27.classList.add('preview-code-active')        }else{            bindCode_27.classList.remove('preview-code-active')         }        flag_27 = !flag_27    }</script></div><div id="preview-28" class="preview"><div class="preview-box">    <div id="draw-28">    <script type="module">                    (function(){                        function drawCode(code, dom, idx) {  let str = `<textarea id="code-${idx}" class="code" rows=6 cols=60 readonly>${code}</textarea>`;  dom.innerHTML = str;}function expandAll(idx) {  let nodes = document    .getElementById(`draw-${idx}`)    .querySelectorAll('[data-active="false"]');  Array.from(nodes).forEach((node) => {    node.dataset["active"] = true;  });}function selectCode(event,idx) {  let start = event.target.dataset["start"];  let end = event.target.dataset["end"];  let input = document.getElementById(`code-${idx}`);  input.focus();  input.setSelectionRange(start, end);}function foldAll(idx) {  let nodes = document    .getElementById(`draw-${idx}`)    .querySelectorAll('[data-active="true"]');  Array.from(nodes).forEach((node) => {    node.dataset["active"] = false;  });}window.drawCode = drawCode;window.expandAll = expandAll;window.foldAll = foldAll;window.selectCode = selectCode;                    })(28)                </script>    </div>    <div class="preview-box-util">        <span id="expand-28" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-28" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawCode</span>(<span class="hljs-params">code, dom, idx</span>) &#123;  <span class="hljs-keyword">let</span> str = <span class="hljs-string">`&lt;textarea id=&quot;code-<span class="hljs-subst">$&#123;idx&#125;</span>&quot; class=&quot;code&quot; rows=6 cols=60 readonly&gt;<span class="hljs-subst">$&#123;code&#125;</span>&lt;/textarea&gt;`</span>;  dom.<span class="hljs-property">innerHTML</span> = str;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">expandAll</span>(<span class="hljs-params">idx</span>) &#123;  <span class="hljs-keyword">let</span> nodes = <span class="hljs-variable language_">document</span>    .<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`draw-<span class="hljs-subst">$&#123;idx&#125;</span>`</span>)    .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;[data-active=&quot;false&quot;]&#x27;</span>);  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(nodes).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;    node.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;active&quot;</span>] = <span class="hljs-literal">true</span>;  &#125;);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">selectCode</span>(<span class="hljs-params">event,idx</span>) &#123;  <span class="hljs-keyword">let</span> start = event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;start&quot;</span>];  <span class="hljs-keyword">let</span> end = event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;end&quot;</span>];  <span class="hljs-keyword">let</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`code-<span class="hljs-subst">$&#123;idx&#125;</span>`</span>);  input.<span class="hljs-title function_">focus</span>();  input.<span class="hljs-title function_">setSelectionRange</span>(start, end);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">foldAll</span>(<span class="hljs-params">idx</span>) &#123;  <span class="hljs-keyword">let</span> nodes = <span class="hljs-variable language_">document</span>    .<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`draw-<span class="hljs-subst">$&#123;idx&#125;</span>`</span>)    .<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;[data-active=&quot;true&quot;]&#x27;</span>);  <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(nodes).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">node</span>) =&gt;</span> &#123;    node.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;active&quot;</span>] = <span class="hljs-literal">false</span>;  &#125;);&#125;<span class="hljs-variable language_">window</span>.<span class="hljs-property">drawCode</span> = drawCode;<span class="hljs-variable language_">window</span>.<span class="hljs-property">expandAll</span> = expandAll;<span class="hljs-variable language_">window</span>.<span class="hljs-property">foldAll</span> = foldAll;<span class="hljs-variable language_">window</span>.<span class="hljs-property">selectCode</span> = selectCode;</code></pre></div><script>    const expandCode_28 = document.getElementById('expand-28');    const bindCode_28 = document.getElementById('code-28');    let flag_28 = true;    expandCode_28.onclick = function (){        if(flag_28){            bindCode_28.classList.add('preview-code-active')        }else{            bindCode_28.classList.remove('preview-code-active')         }        flag_28 = !flag_28    }</script></div><div id="preview-29" class="preview"><div class="preview-box">    <div id="draw-29">    <script type="module">                    (function(){                        function draw(code, ast, idx) {  let e = document.getElementById(`draw-${idx}`);  e.classList.add("box");  let c = document.createElement("div");  let j = document.createElement("div");  c.classList.add("code");  j.classList.add("json");  e.appendChild(c);  e.appendChild(j);  drawJson(ast, j, idx);  drawCode(code, c, idx);}window.draw = draw;                    })(29)                </script>    </div>    <div class="preview-box-util">        <span id="expand-29" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-29" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">code, ast, idx</span>) &#123;  <span class="hljs-keyword">let</span> e = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">`draw-<span class="hljs-subst">$&#123;idx&#125;</span>`</span>);  e.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;box&quot;</span>);  <span class="hljs-keyword">let</span> c = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);  <span class="hljs-keyword">let</span> j = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);  c.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;code&quot;</span>);  j.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;json&quot;</span>);  e.<span class="hljs-title function_">appendChild</span>(c);  e.<span class="hljs-title function_">appendChild</span>(j);  <span class="hljs-title function_">drawJson</span>(ast, j, idx);  <span class="hljs-title function_">drawCode</span>(code, c, idx);&#125;<span class="hljs-variable language_">window</span>.<span class="hljs-property">draw</span> = draw;</code></pre></div><script>    const expandCode_29 = document.getElementById('expand-29');    const bindCode_29 = document.getElementById('code-29');    let flag_29 = true;    expandCode_29.onclick = function (){        if(flag_29){            bindCode_29.classList.add('preview-code-active')        }else{            bindCode_29.classList.remove('preview-code-active')         }        flag_29 = !flag_29    }</script></div><div id="preview-30" class="preview"><div class="preview-box">    <div id="draw-30">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `...niltruefalse1231.123`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [    parser.parseExp0(),    parser.parseExp0(),    parser.parseExp0(),    parser.parseExp0(),    parser.parseExp0(),    parser.parseExp0(),  ],  idx);                    })(30)                </script>    </div>    <div class="preview-box-util">        <span id="expand-30" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-30" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`...niltruefalse1231.123`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),  ],  idx);</code></pre></div><script>    const expandCode_30 = document.getElementById('expand-30');    const bindCode_30 = document.getElementById('code-30');    let flag_30 = true;    expandCode_30.onclick = function (){        if(flag_30){            bindCode_30.classList.add('preview-code-active')        }else{            bindCode_30.classList.remove('preview-code-active')         }        flag_30 = !flag_30    }</script></div><div id="preview-31" class="preview"><div class="preview-box">    <div id="draw-31">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `function ()  endfunction (...) endfunction (a,b,c) endfunction (d,e,...) end`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [    parser.parseExp0(),    parser.parseExp0(),    parser.parseExp0(),    parser.parseExp0(),  ],  idx);                    })(31)                </script>    </div>    <div class="preview-box-util">        <span id="expand-31" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-31" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`function ()  endfunction (...) endfunction (a,b,c) endfunction (d,e,...) end`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),    parser.<span class="hljs-title function_">parseExp0</span>(),  ],  idx);</code></pre></div><script>    const expandCode_31 = document.getElementById('expand-31');    const bindCode_31 = document.getElementById('code-31');    let flag_31 = true;    expandCode_31.onclick = function (){        if(flag_31){            bindCode_31.classList.add('preview-code-active')        }else{            bindCode_31.classList.remove('preview-code-active')         }        flag_31 = !flag_31    }</script></div><div id="preview-32" class="preview"><div class="preview-box">    <div id="draw-32">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `{}{["a"]=123}{["a"]=123,["b"]=456,c=123}`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(code, [parser.parseExp0(), parser.parseExp0(), parser.parseExp0()], idx);                    })(32)                </script>    </div>    <div class="preview-box-util">        <span id="expand-32" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-32" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`&#123;&#125;&#123;[&quot;a&quot;]=123&#125;&#123;[&quot;a&quot;]=123,[&quot;b&quot;]=456,c=123&#125;`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(code, [parser.<span class="hljs-title function_">parseExp0</span>(), parser.<span class="hljs-title function_">parseExp0</span>(), parser.<span class="hljs-title function_">parseExp0</span>()], idx);</code></pre></div><script>    const expandCode_32 = document.getElementById('expand-32');    const bindCode_32 = document.getElementById('code-32');    let flag_32 = true;    expandCode_32.onclick = function (){        if(flag_32){            bindCode_32.classList.add('preview-code-active')        }else{            bindCode_32.classList.remove('preview-code-active')         }        flag_32 = !flag_32    }</script></div><div id="preview-33" class="preview"><div class="preview-box">    <div id="draw-33">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `a.b`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(code, [parser.parseExp0()], idx);                    })(33)                </script>    </div>    <div class="preview-box-util">        <span id="expand-33" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-33" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`a.b`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(code, [parser.<span class="hljs-title function_">parseExp0</span>()], idx);</code></pre></div><script>    const expandCode_33 = document.getElementById('expand-33');    const bindCode_33 = document.getElementById('code-33');    let flag_33 = true;    expandCode_33.onclick = function (){        if(flag_33){            bindCode_33.classList.add('preview-code-active')        }else{            bindCode_33.classList.remove('preview-code-active')         }        flag_33 = !flag_33    }</script></div><div id="preview-34" class="preview"><div class="preview-box">    <div id="draw-34">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `1 or 2 or 31 ^ 2 ^ 3`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(code, [parser.parseExp(), parser.parseExp()], idx);                    })(34)                </script>    </div>    <div class="preview-box-util">        <span id="expand-34" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-34" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`1 or 2 or 31 ^ 2 ^ 3`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(code, [parser.<span class="hljs-title function_">parseExp</span>(), parser.<span class="hljs-title function_">parseExp</span>()], idx);</code></pre></div><script>    const expandCode_34 = document.getElementById('expand-34');    const bindCode_34 = document.getElementById('code-34');    let flag_34 = true;    expandCode_34.onclick = function (){        if(flag_34){            bindCode_34.classList.add('preview-code-active')        }else{            bindCode_34.classList.remove('preview-code-active')         }        flag_34 = !flag_34    }</script></div><div id="preview-35" class="preview"><div class="preview-box">    <div id="draw-35">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `-- 注释;break::label::goto preLabelwhile 1 do endrepeat until 1`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [    parser.parseState(),    parser.parseState(),    parser.parseState(),    parser.parseState(),    parser.parseState(),    parser.parseState(),  ],  idx);                    })(35)                </script>    </div>    <div class="preview-box-util">        <span id="expand-35" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-35" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`-- 注释;break::label::goto preLabelwhile 1 do endrepeat until 1`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),  ],  idx);</code></pre></div><script>    const expandCode_35 = document.getElementById('expand-35');    const bindCode_35 = document.getElementById('code-35');    let flag_35 = true;    expandCode_35.onclick = function (){        if(flag_35){            bindCode_35.classList.add('preview-code-active')        }else{            bindCode_35.classList.remove('preview-code-active')         }        flag_35 = !flag_35    }</script></div><div id="preview-36" class="preview"><div class="preview-box">    <div id="draw-36">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `if true then endif true then  elseif true then endif true then  elseif true then  else  end`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [parser.parseState(), parser.parseState(), parser.parseState()],  idx);                    })(36)                </script>    </div>    <div class="preview-box-util">        <span id="expand-36" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-36" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`if true then endif true then  elseif true then endif true then  elseif true then  else  end`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [parser.<span class="hljs-title function_">parseState</span>(), parser.<span class="hljs-title function_">parseState</span>(), parser.<span class="hljs-title function_">parseState</span>()],  idx);</code></pre></div><script>    const expandCode_36 = document.getElementById('expand-36');    const bindCode_36 = document.getElementById('code-36');    let flag_36 = true;    expandCode_36.onclick = function (){        if(flag_36){            bindCode_36.classList.add('preview-code-active')        }else{            bindCode_36.classList.remove('preview-code-active')         }        flag_36 = !flag_36    }</script></div><div id="preview-37" class="preview"><div class="preview-box">    <div id="draw-37">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `for i=10,1 do endfor i=10,1,2 do endfor i,v in "a" do end`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [parser.parseState(), parser.parseState(), parser.parseState()],  idx);                    })(37)                </script>    </div>    <div class="preview-box-util">        <span id="expand-37" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-37" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`for i=10,1 do endfor i=10,1,2 do endfor i,v in &quot;a&quot; do end`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [parser.<span class="hljs-title function_">parseState</span>(), parser.<span class="hljs-title function_">parseState</span>(), parser.<span class="hljs-title function_">parseState</span>()],  idx);</code></pre></div><script>    const expandCode_37 = document.getElementById('expand-37');    const bindCode_37 = document.getElementById('code-37');    let flag_37 = true;    expandCode_37.onclick = function (){        if(flag_37){            bindCode_37.classList.add('preview-code-active')        }else{            bindCode_37.classList.remove('preview-code-active')         }        flag_37 = !flag_37    }</script></div><div id="preview-38" class="preview"><div class="preview-box">    <div id="draw-38">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `local a = 123local a,b=1,2local alocal function f() end`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [    parser.parseState(),    parser.parseState(),    parser.parseState(),    parser.parseState(),  ],  idx);                    })(38)                </script>    </div>    <div class="preview-box-util">        <span id="expand-38" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-38" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`local a = 123local a,b=1,2local alocal function f() end`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),    parser.<span class="hljs-title function_">parseState</span>(),  ],  idx);</code></pre></div><script>    const expandCode_38 = document.getElementById('expand-38');    const bindCode_38 = document.getElementById('code-38');    let flag_38 = true;    expandCode_38.onclick = function (){        if(flag_38){            bindCode_38.classList.add('preview-code-active')        }else{            bindCode_38.classList.remove('preview-code-active')         }        flag_38 = !flag_38    }</script></div><div id="preview-39" class="preview"><div class="preview-box">    <div id="draw-39">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `name[1]name.name1name:name1(1)(2)(3)("name")[1]("name").name1("name"):name(1)`;let lexer = new Lexer(code);let parser = new Parser(lexer);draw(  code,  [    parser.parseExp(),    parser.parseExp(),    parser.parseExp(),    parser.parseExp(),    parser.parseExp(),    parser.parseExp(),  ],  idx);                    })(39)                </script>    </div>    <div class="preview-box-util">        <span id="expand-39" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-39" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`name[1]name.name1name:name1(1)(2)(3)(&quot;name&quot;)[1](&quot;name&quot;).name1(&quot;name&quot;):name(1)`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-title function_">draw</span>(  code,  [    parser.<span class="hljs-title function_">parseExp</span>(),    parser.<span class="hljs-title function_">parseExp</span>(),    parser.<span class="hljs-title function_">parseExp</span>(),    parser.<span class="hljs-title function_">parseExp</span>(),    parser.<span class="hljs-title function_">parseExp</span>(),    parser.<span class="hljs-title function_">parseExp</span>(),  ],  idx);</code></pre></div><script>    const expandCode_39 = document.getElementById('expand-39');    const bindCode_39 = document.getElementById('code-39');    let flag_39 = true;    expandCode_39.onclick = function (){        if(flag_39){            bindCode_39.classList.add('preview-code-active')        }else{            bindCode_39.classList.remove('preview-code-active')         }        flag_39 = !flag_39    }</script></div><div id="preview-40" class="preview"><div class="preview-box">    <div id="draw-40">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `;break::label::goto labeldo print('hello') endwhile true do print('hello') endrepeat print('hello') until false`;let lexer = new Lexer(code);let parser = new Parser(lexer);let ast =  parser.parse();console.log(ast)draw(code,ast, idx);                    })(40)                </script>    </div>    <div class="preview-box-util">        <span id="expand-40" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-40" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`;break::label::goto labeldo print(&#x27;hello&#x27;) endwhile true do print(&#x27;hello&#x27;) endrepeat print(&#x27;hello&#x27;) until false`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-keyword">let</span> ast =  parser.<span class="hljs-title function_">parse</span>();<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast)<span class="hljs-title function_">draw</span>(code,ast, idx);</code></pre></div><script>    const expandCode_40 = document.getElementById('expand-40');    const bindCode_40 = document.getElementById('code-40');    let flag_40 = true;    expandCode_40.onclick = function (){        if(flag_40){            bindCode_40.classList.add('preview-code-active')        }else{            bindCode_40.classList.remove('preview-code-active')         }        flag_40 = !flag_40    }</script></div><div id="preview-41" class="preview"><div class="preview-box">    <div id="draw-41">    <script type="module">                    (function(){                        let idx = arguments[0];let code = `local function f() end`;let lexer = new Lexer(code);let parser = new Parser(lexer);let ast =  parser.parse();console.log(ast)draw(code,ast, idx);                    })(41)                </script>    </div>    <div class="preview-box-util">        <span id="expand-41" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-41" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> idx = <span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>];<span class="hljs-keyword">let</span> code = <span class="hljs-string">`local function f() end`</span>;<span class="hljs-keyword">let</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(code);<span class="hljs-keyword">let</span> parser = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Parser</span>(lexer);<span class="hljs-keyword">let</span> ast =  parser.<span class="hljs-title function_">parse</span>();<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ast)<span class="hljs-title function_">draw</span>(code,ast, idx);</code></pre></div><script>    const expandCode_41 = document.getElementById('expand-41');    const bindCode_41 = document.getElementById('code-41');    let flag_41 = true;    expandCode_41.onclick = function (){        if(flag_41){            bindCode_41.classList.add('preview-code-active')        }else{            bindCode_41.classList.remove('preview-code-active')         }        flag_41 = !flag_41    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lua-token</title>
      <link href="/2022/06/02/lua-token/"/>
      <url>/2022/06/02/lua-token/</url>
      
        <content type="html"><![CDATA[<p>一个变成语言基本分为 4 部分，入口，块，语句，表达式</p><p>其中入口便是程序开始部分</p><p>约定 :: 代表定义， {} 代表 0 次或者多次, [] 代表 0 - 1 次</p><p>人类自己制造的编程语言，不同于自然语言，相对简单的多，基本就是一个有穷状态机。</p><pre><code class="hljs"><span class="hljs-attribute">gammer</span> <span class="hljs-body"><span class="hljs-operator">::=</span> block</span><span class="hljs-attribute">block</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-built_in">&#123;</span>stat<span class="hljs-built_in">&#125;</span> <span class="hljs-built_in">[</span>retStat<span class="hljs-built_in">]</span></span><span class="hljs-comment">// 返回</span><span class="hljs-attribute">retStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> return <span class="hljs-built_in">[</span>expList<span class="hljs-built_in">]</span> <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;;&#x27;</span><span class="hljs-built_in">]</span></span><span class="hljs-comment">// 语句，一共有 15 种，语句只能执行，不能求值，比如 if</span><span class="hljs-attribute">stat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;;&#x27;</span></span><span class="hljs-body"><span class="hljs-built_in">|</span> varList <span class="hljs-string">&#x27;=&#x27;</span> expList</span><span class="hljs-body"><span class="hljs-built_in">|</span> functionCall</span><span class="hljs-body"><span class="hljs-built_in">|</span> label</span><span class="hljs-body"><span class="hljs-built_in">|</span> break</span><span class="hljs-body"><span class="hljs-built_in">|</span> goto Name</span><span class="hljs-body"><span class="hljs-built_in">|</span> do block end</span><span class="hljs-body"><span class="hljs-built_in">|</span> while exp do block end</span><span class="hljs-body"><span class="hljs-built_in">|</span> repeat block until exp</span><span class="hljs-body"><span class="hljs-built_in">|</span> if exp then block <span class="hljs-built_in">&#123;</span>elseif exp then block<span class="hljs-built_in">&#125;</span> <span class="hljs-built_in">[</span>else block<span class="hljs-built_in">]</span> end</span><span class="hljs-body"><span class="hljs-built_in">|</span> for Name <span class="hljs-string">&#x27;=&#x27;</span> exp <span class="hljs-string">&#x27;,&#x27;</span> exp <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;,&#x27;</span>,exp<span class="hljs-built_in">]</span> do block end</span><span class="hljs-body"><span class="hljs-built_in">|</span> function funcName funcBody</span><span class="hljs-body"><span class="hljs-built_in">|</span> local function Name funcBody</span><span class="hljs-body"><span class="hljs-built_in">|</span> local nameList <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;=&#x27;</span> expList<span class="hljs-built_in">]</span></span><span class="hljs-comment">// 表达式只能求值不能执行，比如 123  1 + 2</span><span class="hljs-attribute">expList</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;,&#x27;</span> exp<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> nil <span class="hljs-built_in">|</span> false <span class="hljs-built_in">|</span> true <span class="hljs-built_in">|</span> Numeral <span class="hljs-built_in">|</span> LiteralString <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-built_in">|</span> functionDef ｜ prefixExp</span><span class="hljs-body"><span class="hljs-built_in">|</span> tableConstructor <span class="hljs-built_in">|</span> exp binOp exp <span class="hljs-built_in">|</span> unOp exp</span><span class="hljs-comment">// ps: 函数调用既可以是表达式也是语句</span><span class="hljs-comment">// hello() obg[key()] 这种都是合法的,前者属于语句，后者属于表达式</span></code></pre><p>针对语句进行拆分<br>语句部分 ast 结构</p><pre><code class="hljs"><span class="hljs-comment">// 拆分一下</span><span class="hljs-attribute">emptyStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;;&#x27;</span></span><span class="hljs-attribute">breakStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> break</span><span class="hljs-attribute">labelStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;::&#x27;</span> Name <span class="hljs-string">&#x27;::&#x27;</span></span><span class="hljs-attribute">gotoStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> goto Name</span><span class="hljs-attribute">doStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> do block end</span><span class="hljs-attribute">funcCallStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> FuncCallExp</span><span class="hljs-attribute">whileStat</span>  <span class="hljs-body"><span class="hljs-operator">::=</span> while exp do block end</span><span class="hljs-attribute">repeatStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> repeat block until exp</span><span class="hljs-comment">// ifStat 可以将else 简化</span><span class="hljs-attribute">ifStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> if exp then block <span class="hljs-built_in">&#123;</span>elseif exp then block<span class="hljs-built_in">&#125;</span> <span class="hljs-built_in">[</span>else block<span class="hljs-built_in">]</span> end</span><span class="hljs-comment">// ifStat ::= if exp then block &#123;elseif exp then block&#125; [elseif true then block] end</span><span class="hljs-comment">// ifStat ::= if exp then block &#123;elseif exp then block&#125; end</span><span class="hljs-attribute">forNumStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> for Name <span class="hljs-string">&#x27;=&#x27;</span> exp <span class="hljs-string">&#x27;,&#x27;</span> exp <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;,&#x27;</span>,exp<span class="hljs-built_in">]</span> do block end</span><span class="hljs-attribute">forInStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> for nameList in expList do block end</span><span class="hljs-attribute">localVarDeclStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> local nameList <span class="hljs-string">&#x27;=&#x27;</span> expList</span><span class="hljs-attribute">assignStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> varList <span class="hljs-string">&#x27;=&#x27;</span> expList</span><span class="hljs-comment">// 是 assignStat 的语法糖，所以返回结构和 也是AssignStat.</span><span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> 没准我可以美化下</span><span class="hljs-attribute">funcDefStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> function funcName funcBody</span><span class="hljs-attribute">localFuncDefStat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> local function Name funcBody</span><span class="hljs-comment">// util</span><span class="hljs-attribute">nameList</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Name <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;,&#x27;</span> Name<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">expList</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;,&#x27;</span> exp<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">varList</span> <span class="hljs-body"><span class="hljs-operator">::=</span> var <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;,&#x27;</span> var<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">var</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Name <span class="hljs-built_in">|</span> prefixExp <span class="hljs-string">&#x27;[&#x27;</span> exp <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-built_in">|</span> prefixExp <span class="hljs-string">&#x27;.&#x27;</span> Name</span><span class="hljs-attribute">funcName</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Name <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;.&#x27;</span> Name<span class="hljs-built_in">&#125;</span> <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;:&#x27;</span> Name<span class="hljs-built_in">]</span></span><span class="hljs-attribute">funcBody</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-built_in">[</span>parList<span class="hljs-built_in">]</span> <span class="hljs-string">&#x27;)&#x27;</span> block end</span><span class="hljs-attribute">parList</span> <span class="hljs-body"><span class="hljs-operator">::=</span> nameList <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-string">&#x27;...&#x27;</span><span class="hljs-built_in">]</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;...&#x27;</span></span><span class="hljs-comment">// 最终</span><span class="hljs-attribute">tat</span> <span class="hljs-body"><span class="hljs-operator">::=</span> emptyStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> assignStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> funcCallStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> labelStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> breakStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> gotoStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> doStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> whileStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> repeatStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> ifStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> forNumStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> forInStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> funcDefStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> localFuncDefStat</span><span class="hljs-body"><span class="hljs-built_in">|</span> localVarDeclStat</span></code></pre><p>表达式部分精简</p><pre><code class="hljs"><span class="hljs-attribute">nilExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> nil</span><span class="hljs-attribute">falseExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> false</span><span class="hljs-attribute">trueExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> true</span><span class="hljs-attribute">varArgExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;...&#x27;</span></span><span class="hljs-attribute">integerExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Numeral</span><span class="hljs-attribute">floatExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Numeral</span><span class="hljs-attribute">stringExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> LiteralString</span><span class="hljs-attribute">nameExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Name</span><span class="hljs-attribute">concatExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp <span class="hljs-string">&#x27;...&#x27;</span> exp</span><span class="hljs-attribute">tableConstructorExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-built_in">[</span>fieldList<span class="hljs-built_in">]</span> <span class="hljs-string">&#x27;&#125;&#x27;</span></span><span class="hljs-attribute">funcDefExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> function funcBody</span><span class="hljs-comment">// 原始版本</span><span class="hljs-attribute">prefixExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> var <span class="hljs-built_in">|</span> functionCall <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;(&#x27;</span> exp <span class="hljs-string">&#x27;)&#x27;</span></span><span class="hljs-comment">// 赋值语句等号左侧、名字表达式、表访问表达式、记录访问表达式</span><span class="hljs-attribute">var</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Name <span class="hljs-built_in">|</span> prefixExp <span class="hljs-string">&#x27;[&#x27;</span> exp <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-built_in">|</span> prefixExp <span class="hljs-string">&#x27;.&#x27;</span> Name</span><span class="hljs-attribute">functionCall</span> <span class="hljs-body"><span class="hljs-operator">::=</span> prefixExp args <span class="hljs-built_in">|</span> prefixExp <span class="hljs-string">&#x27;:&#x27;</span> Name args</span><span class="hljs-comment">// 精简版</span><span class="hljs-attribute">prefixExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> Name <span class="hljs-built_in">|</span> parentExp <span class="hljs-built_in">|</span> tableAccessExp <span class="hljs-built_in">|</span> prefixExp <span class="hljs-string">&#x27;.&#x27;</span> Name <span class="hljs-built_in">|</span> functionCallExp</span><span class="hljs-attribute">parentExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;(&#x27;</span> exp <span class="hljs-string">&#x27;)&#x27;</span></span><span class="hljs-attribute">tableAccessExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> prefixExp <span class="hljs-string">&#x27;[&#x27;</span> exo <span class="hljs-string">&#x27;]&#x27;</span></span><span class="hljs-attribute">functionCallExp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> prefixExp <span class="hljs-built_in">[</span><span class="hljs-string">&#x27;:&#x27;</span> Name<span class="hljs-built_in">]</span> args</span><span class="hljs-comment">// util</span><span class="hljs-attribute">Name</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">/^[_\d\w]+/</span></span><span class="hljs-attribute">LiteralString</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">/(^&#x27;(\\\\|\\&#x27;|\\\n|\\z\s*|[^&#x27;\n])*&#x27;)|(^&quot;(\\\\|\\&quot;|\\\n|\\z\s*|[^&quot;\n])*&quot;)/</span>;</span><span class="hljs-attribute">Numeral</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">/^0[xX][0-9a-fA-F]*(\.[0-9a-fA-F]*)?([pP][+\-]?[0-9]+)?|^[0-9]*(\.[0-9]*)?([eE][+\-]?[0-9]+)?/</span>;</span><span class="hljs-attribute">fieldList</span> <span class="hljs-body"><span class="hljs-operator">::=</span> field <span class="hljs-built_in">&#123;</span>fieldSep field<span class="hljs-built_in">&#125;</span> <span class="hljs-built_in">[</span>fieldSep<span class="hljs-built_in">]</span></span><span class="hljs-attribute">field</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;[&#x27;</span> exp <span class="hljs-string">&#x27;]&#x27;</span> <span class="hljs-string">&#x27;=&#x27;</span> exp <span class="hljs-built_in">|</span> Name <span class="hljs-string">&#x27;=&#x27;</span> exp <span class="hljs-built_in">|</span> exp</span><span class="hljs-attribute">fieldSep</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;,&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;;&#x27;</span></span><span class="hljs-attribute">args</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-string">&#x27;&#123;&#x27;</span> <span class="hljs-built_in">[</span>expList<span class="hljs-built_in">]</span> <span class="hljs-string">&#x27;&#125;&#x27;</span> <span class="hljs-built_in">|</span> tableConstructorExp <span class="hljs-built_in">|</span> LiteralString</span><span class="hljs-comment">// 通过优先级解决歧义问题</span><span class="hljs-attribute">exp</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp12</span><span class="hljs-attribute">exp12</span> <span class="hljs-body"><span class="hljs-operator">::=</span> epx11 <span class="hljs-built_in">&#123;</span>or exp11<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp11</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp10 <span class="hljs-built_in">&#123;</span>and exp10<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp10</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp9 <span class="hljs-built_in">&#123;</span>(<span class="hljs-string">&#x27;&lt;&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;&gt;&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;&lt;=&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;&gt;=&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;~=&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;==&#x27;</span>) exp9<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp9</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp8 <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;|&#x27;</span> exp8<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp8</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp7 <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;~&#x27;</span> exp7<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp7</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp6 <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;&amp;&#x27;</span> exp6<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp6</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp5 <span class="hljs-built_in">&#123;</span>(<span class="hljs-string">&#x27;&lt;&lt;&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>) exp5<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp5</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp4 <span class="hljs-built_in">&#123;</span><span class="hljs-string">&#x27;..&#x27;</span> exp4<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp4</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp3 <span class="hljs-built_in">&#123;</span>(<span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;-&#x27;</span>) exp3<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp3</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp2 <span class="hljs-built_in">&#123;</span>( <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;//&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;&amp;&#x27;</span>) exp2<span class="hljs-built_in">&#125;</span></span><span class="hljs-attribute">exp2</span> <span class="hljs-body"><span class="hljs-operator">::=</span> <span class="hljs-built_in">&#123;</span>(<span class="hljs-string">&#x27;not&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;~&#x27;</span>)<span class="hljs-built_in">&#125;</span> exp1</span><span class="hljs-attribute">exp1</span> <span class="hljs-body"><span class="hljs-operator">::=</span> exp0 (<span class="hljs-string">&#x27;^&#x27;</span> exp2)</span><span class="hljs-attribute">exp0</span> <span class="hljs-body"><span class="hljs-operator">::=</span> nil <span class="hljs-built_in">|</span> false <span class="hljs-built_in">|</span> true <span class="hljs-built_in">|</span> Numeral <span class="hljs-built_in">|</span> LiteralString <span class="hljs-built_in">|</span> <span class="hljs-string">&#x27;...&#x27;</span> <span class="hljs-built_in">|</span> funcDefExp ｜ prefixExp</span><span class="hljs-body"><span class="hljs-built_in">|</span> tableConstructorExp</span></code></pre><p><a href="https://regexper.com/#%2F%28%5E'%28%5C%5C%5C%5C%7C%5C%5C'%7C%5C%5C%5Cn%7C%5C%5Cz%5Cs*%7C%5B%5E'%5Cn%5D%29*'%29%7C%28%5E%22%28%5C%5C%5C%5C%7C%5C%5C%22%7C%5C%5C%5Cn%7C%5C%5Cz%5Cs*%7C%5B%5E%22%5Cn%5D%29*%22%29%2F">LiteralString</a><br>LiteralString ::= /(^‘(\\|\’|\\n|\z\s*|[^'\n])<em>')|(^“(\\|\”|\\n|\z\s</em>|[^“\n])*”)/;</p><p><a href="https://regexper.com/#%2F%5E0%5BxX%5D%5B0-9a-fA-F%5D*%28%5C.%5B0-9a-fA-F%5D*%29%3F%28%5BpP%5D%5B%2B%5C-%5D%3F%5B0-9%5D%2B%29%3F%7C%5E%5B0-9%5D*%28%5C.%5B0-9%5D*%29%3F%28%5BeE%5D%5B%2B%5C-%5D%3F%5B0-9%5D%2B%29%3F%2F">Numeral</a><br>Numeral ::= /^0[xX][0-9a-fa-f]<em>(.[0-9a-fA-F]</em>)?([pP][+-]?[0-9]+)?|^[0-9]<em>(.[0-9]</em>)?([eE][+-]?[0-9]+)?/;)</p><div id="preview-27" class="preview"><div class="preview-box">    <div id="draw-27">    src=lua-token.js<script src="/js/lua-token.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-27" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-27" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_27 = document.getElementById('expand-27');    const bindCode_27 = document.getElementById('code-27');    let flag_27 = true;    expandCode_27.onclick = function (){        if(flag_27){            bindCode_27.classList.add('preview-code-active')        }else{            bindCode_27.classList.remove('preview-code-active')         }        flag_27 = !flag_27    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>lua-lexer</title>
      <link href="/2022/05/28/lua-lexer/"/>
      <url>/2022/05/28/lua-lexer/</url>
      
        <content type="html"><![CDATA[<p>动手写个词法解析器，词法解析非常简单其关键处理问题在于</p><ul><li>字符串</li><li>数字</li><li>关键字与符号</li></ul><h3 id="定义关键字及符号映射">定义关键字及符号映射</h3><div id="preview-23" class="preview"><div class="preview-box">    <div id="draw-23">    src=lua-lexer.js<script src="/js/lua-lexer.js"></script>    </div>    <div class="preview-box-util">        <span id="expand-23" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-23" class="preview-code false"><pre><code class="hljs"></code></pre></div><script>    const expandCode_23 = document.getElementById('expand-23');    const bindCode_23 = document.getElementById('code-23');    let flag_23 = true;    expandCode_23.onclick = function (){        if(flag_23){            bindCode_23.classList.add('preview-code-active')        }else{            bindCode_23.classList.remove('preview-code-active')         }        flag_23 = !flag_23    }</script></div><div id="preview-24" class="preview"><div class="preview-box">    <div id="draw-24">    <style>  .token {    display: inline-block;    padding: 4px;    border: 1px solid var(--base00, transparent);    margin: 2px;    border-radius: 4px;  }</style><div>  <textarea rows="20" style="width:100%" id="input" autofocus>  '\u{1f481}'  '\x61'  '\97'  'a'  [[a]]  1  1.1  1.1e-1  1.1e+1  .1local abc = 123;if(abc="123"){  print(abc)}string='123'-- abc-- [[comment]]--longString = [[too long]]</textarea  >  <button id="generate">generate</button></div><div id="tag" style="width:100%;min-height:200px;font-size:14px;"></div><script>  const input = document.getElementById("input");  const g = document.getElementById("generate");  const t = document.getElementById("tag");  const lexerCom = () => {    console.log("start..");    t.innerHTML = "";    let err = "";    try {      const lexer = new Lexer(input.value, "main.lua");      let d = "";      let token = lexer.nextToken();      while (token[0] !== TOKEN_EOF) {        d += gt(token);        token = lexer.nextToken();      }      d += gt(token);      t.innerHTML = d;    } catch (e) {      console.error(e);      t.innerHTML = `<div style="color:red;font-size:14px;">${e.message}</div>`;    }  };  g.onclick = lexerCom;  lexerCom();  function colorRandom() {    const color = [      "yellow",      "orange",      "red",      "magenta",      "violet",      "blue",      "cyan",      "green",    ];    return color[Math.floor(Math.random() * color.length)];  }  function gt(token) {    let [kind, tok, location] = token;    let printStr = `[${kindToCategory(kind)}] ${tok}`;    return `<div class="token" style="color:var(--${colorRandom()})" data-start=${      location?.start.offset    } data-end=${location?.end.offset}>${printStr}</div>`;  }  // This handler will be executed every time the cursor  // is moved over a different list item  t.addEventListener(    "mouseover",    function (event) {      event.target.style.borderColor = "orange";      let start = event.target.dataset["start"];      let end = event.target.dataset["end"];      setTimeout(() => {        input.setAttribute("readonly", true);        input.focus();        input.setSelectionRange(start, end);      }, 10);      event.preventDefault();    },    false  );  t.addEventListener(    "mouseout",    function (event) {      event.target.style.borderColor = "";      input.removeAttribute("readonly");    },    false  );</script>    </div>    <div class="preview-box-util">        <span id="expand-24" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-24" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">  <span class="hljs-selector-class">.token</span> &#123;    <span class="hljs-attribute">display</span>: inline-block;    <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">var</span>(--base00, transparent);    <span class="hljs-attribute">margin</span>: <span class="hljs-number">2px</span>;    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;  &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span>  &#x27;\u&#123;1f481&#125;&#x27;  &#x27;\x61&#x27;  &#x27;\97&#x27;  &#x27;a&#x27;  [[a]]  1  1.1  1.1e-1  1.1e+1  .1local abc = 123;if(abc=&quot;123&quot;)&#123;  print(abc)&#125;string=&#x27;123&#x27;-- abc-- [[comment]]--longString = [[too long]]&lt;/textarea  &gt;  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;generate&quot;</span>&gt;</span>generate<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tag&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width:100%;min-height:200px;font-size:14px;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">  <span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;input&quot;</span>);  <span class="hljs-keyword">const</span> g = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;generate&quot;</span>);  <span class="hljs-keyword">const</span> t = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;tag&quot;</span>);  <span class="hljs-keyword">const</span> <span class="hljs-title function_">lexerCom</span> = (<span class="hljs-params"></span>) =&gt; &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;start..&quot;</span>);    t.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">let</span> err = <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">const</span> lexer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Lexer</span>(input.<span class="hljs-property">value</span>, <span class="hljs-string">&quot;main.lua&quot;</span>);      <span class="hljs-keyword">let</span> d = <span class="hljs-string">&quot;&quot;</span>;      <span class="hljs-keyword">let</span> token = lexer.<span class="hljs-title function_">nextToken</span>();      <span class="hljs-keyword">while</span> (token[<span class="hljs-number">0</span>] !== <span class="hljs-variable constant_">TOKEN_EOF</span>) &#123;        d += <span class="hljs-title function_">gt</span>(token);        token = lexer.<span class="hljs-title function_">nextToken</span>();      &#125;      d += <span class="hljs-title function_">gt</span>(token);      t.<span class="hljs-property">innerHTML</span> = d;    &#125; <span class="hljs-keyword">catch</span> (e) &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(e);      t.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`&lt;div style=&quot;color:red;font-size:14px;&quot;&gt;<span class="hljs-subst">$&#123;e.message&#125;</span>&lt;/div&gt;`</span>;    &#125;  &#125;;  g.<span class="hljs-property">onclick</span> = lexerCom;  <span class="hljs-title function_">lexerCom</span>();  <span class="hljs-keyword">function</span> <span class="hljs-title function_">colorRandom</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">const</span> color = [      <span class="hljs-string">&quot;yellow&quot;</span>,      <span class="hljs-string">&quot;orange&quot;</span>,      <span class="hljs-string">&quot;red&quot;</span>,      <span class="hljs-string">&quot;magenta&quot;</span>,      <span class="hljs-string">&quot;violet&quot;</span>,      <span class="hljs-string">&quot;blue&quot;</span>,      <span class="hljs-string">&quot;cyan&quot;</span>,      <span class="hljs-string">&quot;green&quot;</span>,    ];    <span class="hljs-keyword">return</span> color[<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * color.<span class="hljs-property">length</span>)];  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">gt</span>(<span class="hljs-params">token</span>) &#123;    <span class="hljs-keyword">let</span> [kind, tok, location] = token;    <span class="hljs-keyword">let</span> printStr = <span class="hljs-string">`[<span class="hljs-subst">$&#123;kindToCategory(kind)&#125;</span>] <span class="hljs-subst">$&#123;tok&#125;</span>`</span>;    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;div class=&quot;token&quot; style=&quot;color:var(--<span class="hljs-subst">$&#123;colorRandom()&#125;</span>)&quot; data-start=<span class="hljs-subst">$&#123;      location?.start.offset    &#125;</span> data-end=<span class="hljs-subst">$&#123;location?.end.offset&#125;</span>&gt;<span class="hljs-subst">$&#123;printStr&#125;</span>&lt;/div&gt;`</span>;  &#125;  <span class="hljs-comment">// This handler will be executed every time the cursor</span>  <span class="hljs-comment">// is moved over a different list item</span>  t.<span class="hljs-title function_">addEventListener</span>(    <span class="hljs-string">&quot;mouseover&quot;</span>,    <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;      event.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;orange&quot;</span>;      <span class="hljs-keyword">let</span> start = event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;start&quot;</span>];      <span class="hljs-keyword">let</span> end = event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>[<span class="hljs-string">&quot;end&quot;</span>];      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;        input.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;readonly&quot;</span>, <span class="hljs-literal">true</span>);        input.<span class="hljs-title function_">focus</span>();        input.<span class="hljs-title function_">setSelectionRange</span>(start, end);      &#125;, <span class="hljs-number">10</span>);      event.<span class="hljs-title function_">preventDefault</span>();    &#125;,    <span class="hljs-literal">false</span>  );  t.<span class="hljs-title function_">addEventListener</span>(    <span class="hljs-string">&quot;mouseout&quot;</span>,    <span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) &#123;      event.<span class="hljs-property">target</span>.<span class="hljs-property">style</span>.<span class="hljs-property">borderColor</span> = <span class="hljs-string">&quot;&quot;</span>;      input.<span class="hljs-title function_">removeAttribute</span>(<span class="hljs-string">&quot;readonly&quot;</span>);    &#125;,    <span class="hljs-literal">false</span>  );</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>    const expandCode_24 = document.getElementById('expand-24');    const bindCode_24 = document.getElementById('code-24');    let flag_24 = true;    expandCode_24.onclick = function (){        if(flag_24){            bindCode_24.classList.add('preview-code-active')        }else{            bindCode_24.classList.remove('preview-code-active')         }        flag_24 = !flag_24    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/18/v2022-03-18-11-57/"/>
      <url>/2022/03/18/v2022-03-18-11-57/</url>
      
        <content type="html"><![CDATA[<p>明明是差异化的东西存在强大竞争力为啥总有人劝我做同质化的东西呢？看不清形势吗</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>scheduler</title>
      <link href="/2022/03/08/scheduler/"/>
      <url>/2022/03/08/scheduler/</url>
      
        <content type="html"><![CDATA[<p>内容</p><div id="preview-3" class="preview"><div class="preview-box">    <div id="draw-3">    getCurrentTime<script type="module">                    (function(){                        const getCurrentTime = () => performance.now();define("getCurrentTime", getCurrentTime);                    })(3)                </script>    </div>    <div class="preview-box-util">        <span id="expand-3" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-3" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-title function_">getCurrentTime</span> = (<span class="hljs-params"></span>) =&gt; performance.<span class="hljs-title function_">now</span>();<span class="hljs-title function_">define</span>(<span class="hljs-string">&quot;getCurrentTime&quot;</span>, getCurrentTime);</code></pre></div><script>    const expandCode_3 = document.getElementById('expand-3');    const bindCode_3 = document.getElementById('code-3');    let flag_3 = true;    expandCode_3.onclick = function (){        if(flag_3){            bindCode_3.classList.add('preview-code-active')        }else{            bindCode_3.classList.remove('preview-code-active')         }        flag_3 = !flag_3    }</script></div><div id="preview-4" class="preview"><div class="preview-box">    <div id="draw-4">    sleep<script type="module">                    (function(){                        const getCurrentTime = require("getCurrentTime");const sleep = (tm) => {  let startTime = getCurrentTime();  while (getCurrentTime() - startTime <= tm) {    // sleep  }};define("sleep", sleep);                    })(4)                </script>    </div>    <div class="preview-box-util">        <span id="expand-4" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-4" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">const</span> getCurrentTime = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;getCurrentTime&quot;</span>);<span class="hljs-keyword">const</span> <span class="hljs-title function_">sleep</span> = (<span class="hljs-params">tm</span>) =&gt; &#123;  <span class="hljs-keyword">let</span> startTime = <span class="hljs-title function_">getCurrentTime</span>();  <span class="hljs-keyword">while</span> (<span class="hljs-title function_">getCurrentTime</span>() - startTime &lt;= tm) &#123;    <span class="hljs-comment">// sleep</span>  &#125;&#125;;<span class="hljs-title function_">define</span>(<span class="hljs-string">&quot;sleep&quot;</span>, sleep);</code></pre></div><script>    const expandCode_4 = document.getElementById('expand-4');    const bindCode_4 = document.getElementById('code-4');    let flag_4 = true;    expandCode_4.onclick = function (){        if(flag_4){            bindCode_4.classList.add('preview-code-active')        }else{            bindCode_4.classList.remove('preview-code-active')         }        flag_4 = !flag_4    }</script></div><div id="preview-5" class="preview"><div class="preview-box">    <div id="draw-5">    TaskQueue<script type="module">                    (function(){                        class TaskQueue {  constructor() {    this.queue = [];  }  push(task) {    this.queue.unshift(task);  }  peek() {    return this.queue[this.queue.length - 1];  }  pop() {    return this.queue.pop();  }}define("TaskQueue", TaskQueue);                    })(5)                </script>    </div>    <div class="preview-box-util">        <span id="expand-5" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-5" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskQueue</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span> = [];  &#125;  <span class="hljs-title function_">push</span>(<span class="hljs-params">task</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">unshift</span>(task);  &#125;  <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>[<span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];  &#125;  <span class="hljs-title function_">pop</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">queue</span>.<span class="hljs-title function_">pop</span>();  &#125;&#125;<span class="hljs-title function_">define</span>(<span class="hljs-string">&quot;TaskQueue&quot;</span>, <span class="hljs-title class_">TaskQueue</span>);</code></pre></div><script>    const expandCode_5 = document.getElementById('expand-5');    const bindCode_5 = document.getElementById('code-5');    let flag_5 = true;    expandCode_5.onclick = function (){        if(flag_5){            bindCode_5.classList.add('preview-code-active')        }else{            bindCode_5.classList.remove('preview-code-active')         }        flag_5 = !flag_5    }</script></div><div id="preview-6" class="preview"><div class="preview-box">    <div id="draw-6">    Scheduler<script type="module">                    (function(){                        const getCurrentTime = require("getCurrentTime");const TaskQueue = require("TaskQueue");const frameInterval = 1000 / 60;class Scheduler {  constructor() {    this.taskQueue = new TaskQueue();    this.taskIdCounter = 0;    //    this.isHostCallbackScheduled = false;    this.isPerformingWork = false;    this.startTime = -1;    this.scheduledHostCallback = null;    this.isMessageLoopRunning = false;    this.cannel = new MessageChannel();    this.cannel.port1.onmessage = this.performWorkUntilDeadline.bind(this);  }  commitTask(callback) {    let currentTime = getCurrentTime();    const startTime = currentTime;    const timeout = 0; // ms    const newTask = {      id: this.taskIdCounter++,      callback,      startTime,    };    this.taskQueue.push(newTask);    if (!this.isHostCallbackScheduled && !this.isPerformingWork) {      this.isHostCallbackScheduled = true;      this.requestHostCallback(this.flushWork);    }  }  requestHostCallback(cb) {    this.scheduledHostCallback = cb;    if (!this.isMessageLoopRunning) {      this.isMessageLoopRunning = true;      this.schedulePerformWorkUntilDeadline();    }  }  // 发起事件开始执行  schedulePerformWorkUntilDeadline() {    this.cannel.port2.postMessage(null);  }  flushWork() {    this.isHostCallbackScheduled = false;    try {      return this.workLoop();    } finally {      this.currentTask = null;      this.isPerformingWork = false;    }  }  workLoop() {    this.currentTask = this.taskQueue.peek();    while (this.currentTask != null) {      const shouldCallTask = this.shouldYieldToHost();      if (shouldCallTask) {        break;      }      const callback = this.currentTask.callback;      if (typeof callback === "function") {        const continuationCallback = callback();        if (typeof continuationCallback === "function") {          this.currentTask.callback = continuationCallback;        } else {          if (this.currentTask === this.taskQueue.peek()) {            this.taskQueue.pop();          }        }      } else {        this.taskQueue.pop();      }      this.currentTask = this.taskQueue.peek();    }    if (this.currentTask != null) {      return true;    }    return false;  }  performWorkUntilDeadline() {    if (this.scheduledHostCallback !== null) {      const currentTime = getCurrentTime();      this.startTime = currentTime;      let hasMoreWork = true;      try {        hasMoreWork = this.scheduledHostCallback();      } finally {        if (hasMoreWork) {          this.schedulePerformWorkUntilDeadline();        } else {          this.isMessageLoopRunning = false;          this.scheduledHostCallback = null;        }      }    }  }  shouldYieldToHost() {    const timeElapsed = getCurrentTime() - this.startTime;    if (timeElapsed < frameInterval) {      return false;    }    return true;  }}define("scheduler", Scheduler);                    })(6)                </script>    </div>    <div class="preview-box-util">        <span id="expand-6" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-6" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">const</span> getCurrentTime = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;getCurrentTime&quot;</span>);<span class="hljs-keyword">const</span> <span class="hljs-title class_">TaskQueue</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;TaskQueue&quot;</span>);<span class="hljs-keyword">const</span> frameInterval = <span class="hljs-number">1000</span> / <span class="hljs-number">60</span>;<span class="hljs-keyword">class</span> <span class="hljs-title class_">Scheduler</span> &#123;  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskQueue</span>();    <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskIdCounter</span> = <span class="hljs-number">0</span>;    <span class="hljs-comment">//</span>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHostCallbackScheduled</span> = <span class="hljs-literal">false</span>;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPerformingWork</span> = <span class="hljs-literal">false</span>;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">startTime</span> = -<span class="hljs-number">1</span>;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scheduledHostCallback</span> = <span class="hljs-literal">null</span>;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isMessageLoopRunning</span> = <span class="hljs-literal">false</span>;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cannel</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageChannel</span>();    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cannel</span>.<span class="hljs-property">port1</span>.<span class="hljs-property">onmessage</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">performWorkUntilDeadline</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);  &#125;  <span class="hljs-title function_">commitTask</span>(<span class="hljs-params">callback</span>) &#123;    <span class="hljs-keyword">let</span> currentTime = <span class="hljs-title function_">getCurrentTime</span>();    <span class="hljs-keyword">const</span> startTime = currentTime;    <span class="hljs-keyword">const</span> timeout = <span class="hljs-number">0</span>; <span class="hljs-comment">// ms</span>    <span class="hljs-keyword">const</span> newTask = &#123;      <span class="hljs-attr">id</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskIdCounter</span>++,      callback,      startTime,    &#125;;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span>.<span class="hljs-title function_">push</span>(newTask);    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isHostCallbackScheduled</span> &amp;&amp; !<span class="hljs-variable language_">this</span>.<span class="hljs-property">isPerformingWork</span>) &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHostCallbackScheduled</span> = <span class="hljs-literal">true</span>;      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">requestHostCallback</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">flushWork</span>);    &#125;  &#125;  <span class="hljs-title function_">requestHostCallback</span>(<span class="hljs-params">cb</span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">scheduledHostCallback</span> = cb;    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">isMessageLoopRunning</span>) &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isMessageLoopRunning</span> = <span class="hljs-literal">true</span>;      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">schedulePerformWorkUntilDeadline</span>();    &#125;  &#125;  <span class="hljs-comment">// 发起事件开始执行</span>  <span class="hljs-title function_">schedulePerformWorkUntilDeadline</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cannel</span>.<span class="hljs-property">port2</span>.<span class="hljs-title function_">postMessage</span>(<span class="hljs-literal">null</span>);  &#125;  <span class="hljs-title function_">flushWork</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHostCallbackScheduled</span> = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">workLoop</span>();    &#125; <span class="hljs-keyword">finally</span> &#123;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span> = <span class="hljs-literal">null</span>;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isPerformingWork</span> = <span class="hljs-literal">false</span>;    &#125;  &#125;  <span class="hljs-title function_">workLoop</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span>.<span class="hljs-title function_">peek</span>();    <span class="hljs-keyword">while</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span> != <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">const</span> shouldCallTask = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">shouldYieldToHost</span>();      <span class="hljs-keyword">if</span> (shouldCallTask) &#123;        <span class="hljs-keyword">break</span>;      &#125;      <span class="hljs-keyword">const</span> callback = <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span>.<span class="hljs-property">callback</span>;      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&quot;function&quot;</span>) &#123;        <span class="hljs-keyword">const</span> continuationCallback = <span class="hljs-title function_">callback</span>();        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> continuationCallback === <span class="hljs-string">&quot;function&quot;</span>) &#123;          <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span>.<span class="hljs-property">callback</span> = continuationCallback;        &#125; <span class="hljs-keyword">else</span> &#123;          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span> === <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span>.<span class="hljs-title function_">peek</span>()) &#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span>.<span class="hljs-title function_">pop</span>();          &#125;        &#125;      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span>.<span class="hljs-title function_">pop</span>();      &#125;      <span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">taskQueue</span>.<span class="hljs-title function_">peek</span>();    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">currentTask</span> != <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  &#125;  <span class="hljs-title function_">performWorkUntilDeadline</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">scheduledHostCallback</span> !== <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">const</span> currentTime = <span class="hljs-title function_">getCurrentTime</span>();      <span class="hljs-variable language_">this</span>.<span class="hljs-property">startTime</span> = currentTime;      <span class="hljs-keyword">let</span> hasMoreWork = <span class="hljs-literal">true</span>;      <span class="hljs-keyword">try</span> &#123;        hasMoreWork = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">scheduledHostCallback</span>();      &#125; <span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">if</span> (hasMoreWork) &#123;          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">schedulePerformWorkUntilDeadline</span>();        &#125; <span class="hljs-keyword">else</span> &#123;          <span class="hljs-variable language_">this</span>.<span class="hljs-property">isMessageLoopRunning</span> = <span class="hljs-literal">false</span>;          <span class="hljs-variable language_">this</span>.<span class="hljs-property">scheduledHostCallback</span> = <span class="hljs-literal">null</span>;        &#125;      &#125;    &#125;  &#125;  <span class="hljs-title function_">shouldYieldToHost</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">const</span> timeElapsed = <span class="hljs-title function_">getCurrentTime</span>() - <span class="hljs-variable language_">this</span>.<span class="hljs-property">startTime</span>;    <span class="hljs-keyword">if</span> (timeElapsed &lt; frameInterval) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  &#125;&#125;<span class="hljs-title function_">define</span>(<span class="hljs-string">&quot;scheduler&quot;</span>, <span class="hljs-title class_">Scheduler</span>);</code></pre></div><script>    const expandCode_6 = document.getElementById('expand-6');    const bindCode_6 = document.getElementById('code-6');    let flag_6 = true;    expandCode_6.onclick = function (){        if(flag_6){            bindCode_6.classList.add('preview-code-active')        }else{            bindCode_6.classList.remove('preview-code-active')         }        flag_6 = !flag_6    }</script></div><div id="preview-7" class="preview"><div class="preview-box">    <div id="draw-7">    <script type="module">  const Scheduler = require("scheduler");  const sleep = require("sleep");  const scheduler = new Scheduler();  const runTaskButton = document.getElementById("runTask");  const draw = document.getElementById("draw");  runTaskButton.onclick = () => {    console.log("提交任务");    scheduler.commitTask(() => {      console.log("hello world1");      sleep(200);      draw.innerHTML = "task1";    });    scheduler.commitTask(() => {      console.log("hello world2");      sleep(200);      draw.innerHTML = "task2";    });    scheduler.commitTask(() => {      console.log("hello world3");      sleep(200);      draw.innerHTML = "task3";    });    scheduler.commitTask(() => {      console.log("hello world4");      sleep(200);      draw.innerHTML = "task4";    });    scheduler.commitTask(() => {      console.log("hello world5");      sleep(200);      draw.innerHTML = "task5";    });  };</script><button id="runTask">运行任务</button><div id="draw"></div>    </div>    <div class="preview-box-util">        <span id="expand-7" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-7" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">  <span class="hljs-keyword">const</span> <span class="hljs-title class_">Scheduler</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;scheduler&quot;</span>);  <span class="hljs-keyword">const</span> sleep = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;sleep&quot;</span>);  <span class="hljs-keyword">const</span> scheduler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scheduler</span>();  <span class="hljs-keyword">const</span> runTaskButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;runTask&quot;</span>);  <span class="hljs-keyword">const</span> draw = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;draw&quot;</span>);  runTaskButton.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;提交任务&quot;</span>);    scheduler.<span class="hljs-title function_">commitTask</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world1&quot;</span>);      <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>);      draw.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;task1&quot;</span>;    &#125;);    scheduler.<span class="hljs-title function_">commitTask</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world2&quot;</span>);      <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>);      draw.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;task2&quot;</span>;    &#125;);    scheduler.<span class="hljs-title function_">commitTask</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world3&quot;</span>);      <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>);      draw.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;task3&quot;</span>;    &#125;);    scheduler.<span class="hljs-title function_">commitTask</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world4&quot;</span>);      <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>);      draw.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;task4&quot;</span>;    &#125;);    scheduler.<span class="hljs-title function_">commitTask</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world5&quot;</span>);      <span class="hljs-title function_">sleep</span>(<span class="hljs-number">200</span>);      draw.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&quot;task5&quot;</span>;    &#125;);  &#125;;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;runTask&quot;</span>&gt;</span>运行任务<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;draw&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><script>    const expandCode_7 = document.getElementById('expand-7');    const bindCode_7 = document.getElementById('code-7');    let flag_7 = true;    expandCode_7.onclick = function (){        if(flag_7){            bindCode_7.classList.add('preview-code-active')        }else{            bindCode_7.classList.remove('preview-code-active')         }        flag_7 = !flag_7    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hook原理</title>
      <link href="/2022/02/27/hook-yuan-li/"/>
      <url>/2022/02/27/hook-yuan-li/</url>
      
        <content type="html"><![CDATA[<div id="preview-0" class="preview"><div class="preview-box">    <div id="draw-0">    hook的使用，实现了useState，useReduce，useEffect<div id="app"></div>    </div>    <div class="preview-box-util">        <span id="expand-0" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-0" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre></div><script>    const expandCode_0 = document.getElementById('expand-0');    const bindCode_0 = document.getElementById('code-0');    let flag_0 = true;    expandCode_0.onclick = function (){        if(flag_0){            bindCode_0.classList.add('preview-code-active')        }else{            bindCode_0.classList.remove('preview-code-active')         }        flag_0 = !flag_0    }</script></div><div id="preview-1" class="preview"><div class="preview-box">    <div id="draw-1">    代码<script type="module">                    (function(){                        let currentComponent;let currentIndex;const components = [];class Component {  __hooks = {    _hookList: [],    _effectHookList: [],    _cleanEffectHookList: [],    _layoutHookList: [],  };  diff() {}  // 更新函数  update() {    this.render();  }  beforeRender() {    currentIndex = 0;    currentComponent = this;  }  afterRender() {    this.__hooks._cleanEffectHookList.forEach((fn) => {      fn();    });    this.__hooks._cleanEffectHookList = [];    this.__hooks._effectHookList.forEach((fn) => {      const clean = fn();      if (typeof clean === "function") {        this.__hooks._cleanEffectHookList.push(clean);      }    });    this.__hooks._effectHookList = [];  }  afterDomRender() {    this.__hooks._layoutHookList.forEach((fn) => {      fn();    });    this.__hooks._layoutHookList = [];  }  render() {    this.beforeRender();    const [state, setState] = useState(0);    useEffect(() => {      console.log("useEffect mount");      return () => {        console.log("useEffect clear");      };    }, [state]);    useLayoutEffect(() => {      console.log("useLayout Render");    }, []);    this.afterRender();    const dom = document.getElementById("app");    let text;    if (!(text = document.getElementById("text"))) {      text = document.createElement("h1");      text.id = "text";      dom.appendChild(text);    }    let button;    if (!(button = document.getElementById("button"))) {      button = document.createElement("button");      button.id = "button";      button.textContent = "add";      dom.appendChild(button);    }    let subButton;    if (!(subButton = document.getElementById("button1"))) {      subButton = document.createElement("button");      subButton.id = "button1";      subButton.textContent = "sub";      dom.appendChild(subButton);    }    subButton.onclick = () => {      setState(state - 1);    };    button.onclick = () => {      setState(state + 1);    };    text.textContent = state;    this.afterDomRender();  }}new Component().render();function getHookState(index) {  const hooks = currentComponent.__hooks;  // 加入的  // []  // [useState,useState,useState]...  if (index >= hooks._hookList.length) {    // 每种类型的hook的属性是不同的    hooks._hookList.push({});  }  return hooks._hookList[index];}function useState(initState) {  return useReducer((initState, action) => action, initState);}function useReducer(reducer, initState) {  const hookState = getHookState(currentIndex++);  // hook 是否初始化  if (!hookState.__value) {    hookState.__value = [      // value      initState,      // dispatch      (action) => {        const nextValue = reducer(hookState.__value[0], action);        hookState.__value[0] = nextValue;        hookState._component.update();      },    ];    if (!hookState._component) {      hookState._component = currentComponent;    }  }  return hookState.__value;}function useEffect(cb, deps) {  const hookState = getHookState(currentIndex++);  if (!hookState._value || isChange(deps, hookState.__value[1])) {    hookState.__value = [];    hookState.__value[0] = cb;    hookState.__value[1] = deps;    currentComponent.__hooks._effectHookList.push(hookState.__value[0]);  }}function useLayoutEffect(cb, deps) {  const hookState = getHookState(currentIndex++);  if (!hookState._value || isChange(deps, hookState.__value[1])) {    hookState.__value = [];    hookState.__value[0] = cb;    hookState.__value[1] = deps;    currentComponent.__hooks._layoutHookList.push(hookState.__value[0]);  }}function isChange(oldArgs, newArgs) {  return (    !oldArgs ||    oldArgs.length !== newArgs.length ||    newArgs.some((arg, index) => arg !== oldArgs[index])  );}                    })(1)                </script>    </div>    <div class="preview-box-util">        <span id="expand-1" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-1" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">let</span> currentComponent;<span class="hljs-keyword">let</span> currentIndex;<span class="hljs-keyword">const</span> components = [];<span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;  __hooks = &#123;    <span class="hljs-attr">_hookList</span>: [],    <span class="hljs-attr">_effectHookList</span>: [],    <span class="hljs-attr">_cleanEffectHookList</span>: [],    <span class="hljs-attr">_layoutHookList</span>: [],  &#125;;  <span class="hljs-title function_">diff</span>(<span class="hljs-params"></span>) &#123;&#125;  <span class="hljs-comment">// 更新函数</span>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>();  &#125;  <span class="hljs-title function_">beforeRender</span>(<span class="hljs-params"></span>) &#123;    currentIndex = <span class="hljs-number">0</span>;    currentComponent = <span class="hljs-variable language_">this</span>;  &#125;  <span class="hljs-title function_">afterRender</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_cleanEffectHookList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> &#123;      <span class="hljs-title function_">fn</span>();    &#125;);    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_cleanEffectHookList</span> = [];    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_effectHookList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> &#123;      <span class="hljs-keyword">const</span> clean = <span class="hljs-title function_">fn</span>();      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> clean === <span class="hljs-string">&quot;function&quot;</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_cleanEffectHookList</span>.<span class="hljs-title function_">push</span>(clean);      &#125;    &#125;);    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_effectHookList</span> = [];  &#125;  <span class="hljs-title function_">afterDomRender</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_layoutHookList</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">fn</span>) =&gt;</span> &#123;      <span class="hljs-title function_">fn</span>();    &#125;);    <span class="hljs-variable language_">this</span>.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_layoutHookList</span> = [];  &#125;  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">beforeRender</span>();    <span class="hljs-keyword">const</span> [state, setState] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useEffect mount&quot;</span>);      <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useEffect clear&quot;</span>);      &#125;;    &#125;, [state]);    <span class="hljs-title function_">useLayoutEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;useLayout Render&quot;</span>);    &#125;, []);    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">afterRender</span>();    <span class="hljs-keyword">const</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;app&quot;</span>);    <span class="hljs-keyword">let</span> text;    <span class="hljs-keyword">if</span> (!(text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;text&quot;</span>))) &#123;      text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;h1&quot;</span>);      text.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;text&quot;</span>;      dom.<span class="hljs-title function_">appendChild</span>(text);    &#125;    <span class="hljs-keyword">let</span> button;    <span class="hljs-keyword">if</span> (!(button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;button&quot;</span>))) &#123;      button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);      button.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;button&quot;</span>;      button.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;add&quot;</span>;      dom.<span class="hljs-title function_">appendChild</span>(button);    &#125;    <span class="hljs-keyword">let</span> subButton;    <span class="hljs-keyword">if</span> (!(subButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;button1&quot;</span>))) &#123;      subButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;button&quot;</span>);      subButton.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;button1&quot;</span>;      subButton.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;sub&quot;</span>;      dom.<span class="hljs-title function_">appendChild</span>(subButton);    &#125;    subButton.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-title function_">setState</span>(state - <span class="hljs-number">1</span>);    &#125;;    button.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-title function_">setState</span>(state + <span class="hljs-number">1</span>);    &#125;;    text.<span class="hljs-property">textContent</span> = state;    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">afterDomRender</span>();  &#125;&#125;<span class="hljs-keyword">new</span> <span class="hljs-title class_">Component</span>().<span class="hljs-title function_">render</span>();<span class="hljs-keyword">function</span> <span class="hljs-title function_">getHookState</span>(<span class="hljs-params">index</span>) &#123;  <span class="hljs-keyword">const</span> hooks = currentComponent.<span class="hljs-property">__hooks</span>;  <span class="hljs-comment">// 加入的</span>  <span class="hljs-comment">// []</span>  <span class="hljs-comment">// [useState,useState,useState]...</span>  <span class="hljs-keyword">if</span> (index &gt;= hooks.<span class="hljs-property">_hookList</span>.<span class="hljs-property">length</span>) &#123;    <span class="hljs-comment">// 每种类型的hook的属性是不同的</span>    hooks.<span class="hljs-property">_hookList</span>.<span class="hljs-title function_">push</span>(&#123;&#125;);  &#125;  <span class="hljs-keyword">return</span> hooks.<span class="hljs-property">_hookList</span>[index];&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">useState</span>(<span class="hljs-params">initState</span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useReducer</span>(<span class="hljs-function">(<span class="hljs-params">initState, action</span>) =&gt;</span> action, initState);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">useReducer</span>(<span class="hljs-params">reducer, initState</span>) &#123;  <span class="hljs-keyword">const</span> hookState = <span class="hljs-title function_">getHookState</span>(currentIndex++);  <span class="hljs-comment">// hook 是否初始化</span>  <span class="hljs-keyword">if</span> (!hookState.<span class="hljs-property">__value</span>) &#123;    hookState.<span class="hljs-property">__value</span> = [      <span class="hljs-comment">// value</span>      initState,      <span class="hljs-comment">// dispatch</span>      <span class="hljs-function">(<span class="hljs-params">action</span>) =&gt;</span> &#123;        <span class="hljs-keyword">const</span> nextValue = <span class="hljs-title function_">reducer</span>(hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">0</span>], action);        hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">0</span>] = nextValue;        hookState.<span class="hljs-property">_component</span>.<span class="hljs-title function_">update</span>();      &#125;,    ];    <span class="hljs-keyword">if</span> (!hookState.<span class="hljs-property">_component</span>) &#123;      hookState.<span class="hljs-property">_component</span> = currentComponent;    &#125;  &#125;  <span class="hljs-keyword">return</span> hookState.<span class="hljs-property">__value</span>;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">useEffect</span>(<span class="hljs-params">cb, deps</span>) &#123;  <span class="hljs-keyword">const</span> hookState = <span class="hljs-title function_">getHookState</span>(currentIndex++);  <span class="hljs-keyword">if</span> (!hookState.<span class="hljs-property">_value</span> || <span class="hljs-title function_">isChange</span>(deps, hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">1</span>])) &#123;    hookState.<span class="hljs-property">__value</span> = [];    hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">0</span>] = cb;    hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">1</span>] = deps;    currentComponent.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_effectHookList</span>.<span class="hljs-title function_">push</span>(hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">0</span>]);  &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">useLayoutEffect</span>(<span class="hljs-params">cb, deps</span>) &#123;  <span class="hljs-keyword">const</span> hookState = <span class="hljs-title function_">getHookState</span>(currentIndex++);  <span class="hljs-keyword">if</span> (!hookState.<span class="hljs-property">_value</span> || <span class="hljs-title function_">isChange</span>(deps, hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">1</span>])) &#123;    hookState.<span class="hljs-property">__value</span> = [];    hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">0</span>] = cb;    hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">1</span>] = deps;    currentComponent.<span class="hljs-property">__hooks</span>.<span class="hljs-property">_layoutHookList</span>.<span class="hljs-title function_">push</span>(hookState.<span class="hljs-property">__value</span>[<span class="hljs-number">0</span>]);  &#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">isChange</span>(<span class="hljs-params">oldArgs, newArgs</span>) &#123;  <span class="hljs-keyword">return</span> (    !oldArgs ||    oldArgs.<span class="hljs-property">length</span> !== newArgs.<span class="hljs-property">length</span> ||    newArgs.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">arg, index</span>) =&gt;</span> arg !== oldArgs[index])  );&#125;</code></pre></div><script>    const expandCode_1 = document.getElementById('expand-1');    const bindCode_1 = document.getElementById('code-1');    let flag_1 = true;    expandCode_1.onclick = function (){        if(flag_1){            bindCode_1.classList.add('preview-code-active')        }else{            bindCode_1.classList.remove('preview-code-active')         }        flag_1 = !flag_1    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态化建站</title>
      <link href="/2022/02/10/dong-tai-hua-jian-zhan/"/>
      <url>/2022/02/10/dong-tai-hua-jian-zhan/</url>
      
        <content type="html"><![CDATA[<p>本文对建站做了一种 demo 实现，并不代表能够应对真正生产环境的复杂场景</p><p>调研大量建站平台，发现大部分建站界面长的几乎一致，数据结构层也基本一致，那么就想到一个问题，能不能把通用的数据层/视图层抽离,作为基础，通过动态加载组件的方式满足不同的页面搭建场景。</p><p>最开始的想法是通过 rollup + systemjs 的方式，编译组件，然后动态加载组件，但是会有一些问题，比如依赖库共享问题，组件间相互引用问题，一时间没什么头绪就没继续搞。</p><p>后来发现 webpack 的模块联邦完美解决了上面的问题，然后开始一顿折腾终于成功完成了demo。</p><p>最终效果</p><p><img src="/imgs/editor.png" alt="效果"></p><p>注意图中红线的部分都是远端的组件。</p><h3 id="实现">实现</h3><h4 id="结构划分">结构划分</h4><p>通过 mobx 将数据层抽离，所以我的建站是一个 monorepo 的项目，项目结构如下</p><pre><code class="hljs">.├── basicComponents <span class="hljs-regexp">//</span> 动态组件├── render <span class="hljs-regexp">//</span> 渲染器├── store <span class="hljs-regexp">//</span> 数据层└── website <span class="hljs-regexp">//</span> 建站站点</code></pre><p>数据层负责组件库，历史记录，编辑器的数据，渲染器的数据，每次数据层的变更都会触发相关数据依赖的组件更新。</p><p>渲染器负责初始化渲染器，hoc 注入，组件生命周期回调，提供不同场景下的初始化不同渲染</p><p>建站站点就是一个 demo 页面了，主要是视图布局</p><p>动态组件是远端组件</p><h4 id="动态加载">动态加载</h4><p>远端组件库代码入口非常简单</p><pre><code class="hljs"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Button</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Button&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Page</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Page&quot;</span>;<span class="hljs-keyword">import</span> <span class="hljs-title class_">Image</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./components/Image&quot;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  <span class="hljs-attr">components</span>: [<span class="hljs-title class_">Button</span>, <span class="hljs-title class_">Page</span>, <span class="hljs-title class_">Image</span>],&#125;;</code></pre><p>只是暴露组件列表即可</p><p>编辑器初始化 render 时，动态导入组件</p><pre><code class="hljs"><span class="hljs-comment">// 这里代码有点不合理 remote/Button 指的是远端的组件库后面没来得及改。</span><span class="hljs-keyword">const</span> <span class="hljs-title class_">AButton</span> = <span class="hljs-keyword">await</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;remote/Button&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> <span class="hljs-title class_">Com</span> <span class="hljs-keyword">of</span> <span class="hljs-title class_">AButton</span>.<span class="hljs-property">default</span>.<span class="hljs-property">components</span>) &#123;  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Com</span>.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;container&quot;</span>) &#123;    <span class="hljs-title class_">Page</span> = <span class="hljs-title class_">Com</span>;  &#125;  editorStore.<span class="hljs-property">componentList</span>?.<span class="hljs-title function_">addEditorComponent</span>(<span class="hljs-title class_">Com</span>);&#125;</code></pre><p>因为篇幅有限就不介绍对于初始化 render 的一些操作了。</p><p>这样我们就把远端的组件库通过动态 import 的方式导入到项目中了。</p><p>达到我们最开始的预期，动态加载远端组件库的目的了。</p><h3 id="拓展">拓展</h3><p>实际上现在我们动态加载还处于需要通过静态配置去请求对应远端组件代码。</p><pre><code class="hljs"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;host&quot;</span>,  <span class="hljs-attr">remotes</span>: &#123;    <span class="hljs-attr">remote</span>: <span class="hljs-string">&quot;remote@http://localhost:3001/remoteEntry.js&quot;</span>,  &#125;,  <span class="hljs-attr">shared</span>: &#123;    <span class="hljs-comment">// ...dependencies,</span>    <span class="hljs-attr">react</span>: &#123;      <span class="hljs-attr">singleton</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">// requiredVersion: dependencies[&#x27;react&#x27;],</span>    &#125;,    <span class="hljs-string">&quot;react-dom&quot;</span>: &#123;      <span class="hljs-attr">singleton</span>: <span class="hljs-literal">true</span>,      <span class="hljs-comment">// requiredVersion: dependencies[&#x27;react-dom&#x27;],</span>    &#125;,  &#125;,&#125;;</code></pre><p>也就是这部分代码，虽然我们把编辑器和组件之间的关系解耦了，但是并不是是真正意义的揭耦。</p><p>我们可以通过动态加载组件的方式进行远端组件的加载。</p><p>具体配置可以看这个</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadComponent</span>(<span class="hljs-params">scope, <span class="hljs-variable language_">module</span></span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">async</span> () =&gt; &#123;    <span class="hljs-comment">// Initializes the shared scope. Fills it with known provided modules from this build and all remotes</span>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">__webpack_init_sharing__</span>(<span class="hljs-string">&#x27;default&#x27;</span>);    <span class="hljs-keyword">const</span> container = <span class="hljs-variable language_">window</span>[scope]; <span class="hljs-comment">// or get the container somewhere else</span>    <span class="hljs-comment">// Initialize the container, it may provide shared modules</span>    <span class="hljs-keyword">await</span> container.<span class="hljs-title function_">init</span>(__webpack_share_scopes__.<span class="hljs-property">default</span>);    <span class="hljs-keyword">const</span> factory = <span class="hljs-keyword">await</span> <span class="hljs-variable language_">window</span>[scope].<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">module</span>);    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Module</span> = <span class="hljs-title function_">factory</span>();    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Module</span>;  &#125;;&#125;<span class="hljs-title function_">loadComponent</span>(<span class="hljs-string">&#x27;abtests&#x27;</span>, <span class="hljs-string">&#x27;test123&#x27;</span>);</code></pre><p><a href="https://webpack.js.org/concepts/module-federation/#dynamic-remote-containers">https://webpack.js.org/concepts/module-federation/#dynamic-remote-containers</a></p><p>那么有了这个功能以后，我们可以想象一下，编辑器和组件之间的关系突然从 1 - 1 变成了 1 - n。</p><p>我可以从 <a href="http://www.abc.com/components.js">www.abc.com/components.js</a> 加载组件列表<br>还可以从 <a href="http://www.cdf.com/components.js">www.cdf.com/components.js</a> 加载组件列表</p><p>这样就可以不用每个建站都搞一套自己的建站代码和组件库代码了，可以一套建站代码多套组件库代码，当然这只是我的假象，现实世界可能远比这个复杂，满足不了这个需求。</p><p>在进一步我甚至可以做个服务器动态吐组件列表给用户，瞬间解决组件白名单问题，还可以做组件的版本管理…</p><h3 id="最后">最后</h3><p>上述的代码仓库在这里<br><a href="https://github.com/suxin2017/pixel-editor">https://github.com/suxin2017/pixel-editor</a></p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈前端并行开发痛点</title>
      <link href="/2022/01/23/qian-tan-qian-duan-bing-xing-kai-fa-tong-dian/"/>
      <url>/2022/01/23/qian-tan-qian-duan-bing-xing-kai-fa-tong-dian/</url>
      
        <content type="html"><![CDATA[<p>首先，我们先来看下 url 获取资源的本质，一般情况下一条 url 会请求到代理服务器（nginx）。</p><p>代理服务器会帮助我们选择目标资源，我将目标资源分为两类。</p><p>一类是静态的（变更频率低），静态的主要包括 html、js、css、图片、视频</p><p>一类是动态的（变更频率高），动态是可变的，最主要特点是两次请求返回结果可能不同，json、jsp、ssr、文件导出</p><p>当我们通过浏览器发出一个请求时候，一定是这两类中的一类，和前端相关的 80%以上都是在请求静态资源。</p><p>如下图</p><p><img src="/imgs/%E6%B5%81%E7%A8%8B.png" alt="markdown-it 中间件"></p><p>这是我们线上业务的一般态，在测试环境下我们面临的挑战比这个要多一些。</p><h3 id="测试环节静态资源与动态资源的关系">测试环节静态资源与动态资源的关系</h3><h4 id="n-0-关系">n - 0 关系</h4><p>纯静态类资源的前端场景</p><p>这类指的是无需请求动态数据的，这类站点通常是文档站，但是也有特殊的比如一些 playground 、正则校验等。</p><p>我们会根据需求切换不同分支，进行开发，这时候的版本是 功能预览版 ，在某种场景下 功能预览版 需要自己的站点。</p><p>面临的问题是，如果快速高效的部署自己的功能预览站点？</p><h4 id="1-n-关系">1 - n 关系</h4><p>这类指的是前端不变后端变化，后端需要一个和线上一致的测试环境去验证自己的修改是否正确。</p><p>面临的问题是，需要保证测试环境一直有一个稳定的线上前端环节。</p><h4 id="n-1-关系">n - 1 关系</h4><p>只是前端变动，后端无需变动，这个和 n - 0 关系面临的问题是一样的。</p><h4 id="n-m-关系">n - m 关系</h4><p>这是测试环境下最常见的，当一个需求开发时候，我们需要部署一份前端和一份后端，提供给测试同学检验。</p><p>这里面临的问题既包括 n - 0 的问题，还存在如何对应把前端与后端关联起来。</p><p>针对上面的关系我们总结出需要解决的两个问题点：</p><ol><li>如何快速部署新功能前端站点</li><li>如何绑定前端与后端</li></ol><h3 id="快熟部署新功能的前端站站点">快熟部署新功能的前端站站点</h3><p>正常情况下，我们部署前端站点，需要申请一台机器（容器节点），然后配置 ng，将请求指向对应静态资源目录。</p><p>这些动作是重复的，所以我们可以引入一个平台去帮我们做这些事情。</p><p>假设当前有一个项目 A，正在并行开发功能 A。</p><p>平台功能主要包括：</p><ol><li>资源隔离<br>对于项目 A 的功能 A，需要存放到资源目录 /项目_A/功能_A，这样只需要根据某些特征值发送这些文件就可以啦。</li><li>资源映射<br>两种资源映射操作，动态域名，特征路由<br>动态域名是指通过子域名进行区分，比如 <a href="http://xn---A---A-ze4jr21vk6ssv7c.ci.com">项目-A--功能-A.ci.com</a><br>通过特种路由的方式，通过 header 进行标识要请求那个功能，比如在 header 添加 special-header：项目_A-功能_A</li></ol><table><thead><tr><th></th><th>动态域名</th><th>特征路由</th></tr></thead><tbody><tr><td>优点</td><td>相比于 header 方式用户更方便使用</td><td>全部场景覆盖</td></tr><tr><td>缺点</td><td>对于某些特定场景动态域名无法支持，比如只针对白名单域名进行权限校验等</br>需要配置接口代理，转发到指定后端</td><td>需要使用浏览器插件的方式手动注入 header</td></tr></tbody></table><ol start="3"><li>接口代理绑定前后端<br>如果使用动态域名的方式我们需要手动指定接口代理，如何搭建一个自己的代理服务？<br>目前可以有三种方案，nginx 拓展、http-proxy-middleware、whistle<br>对于前端最好上手的是 http-proxy-middleware 另外两个也可以实现但是相对成本高些。</li></ol><p>通过平台提供这些常用的能力就可以满足上面所有场景啦。</p><p>好了上面就是如何针对前端并行开发的场景，需要做的一切了，下面是一些个人思考。</p><h4 id="一些思考">一些思考</h4><ol><li>容器化前端场景测试环境是否适用？<br>不可否认容器技术带来的便利，动态扩容，环境隔离等优势，但是针对测试环境的前端这些优势显然无用武之地。<br>测试环境的前端没那么大的压力，基本上无需扩容，需要资源极低，更需要的是快速交付给测试同学校验。<br>然后使用容器，需要启停，打包镜像，显然拉长了这一过程。</li><li>一个产品能否打到100%完美？<br>不可能，没有一个产品能达到100%的完美，无论这个产品用户量多大，都是不可能的，原因在于屁股决定脑袋，每个人的屁股是不一样的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/05/v2022-01-05-10-43/"/>
      <url>/2022/01/05/v2022-01-05-10-43/</url>
      
        <content type="html"><![CDATA[<p>从概率上来说会有从0到100的范围，但是从个体上来说只有0和100两种情况</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>国际化方案</title>
      <link href="/2021/12/31/guo-ji-hua-fang-an/"/>
      <url>/2021/12/31/guo-ji-hua-fang-an/</url>
      
        <content type="html"><![CDATA[<h3 id="前端-i18n-库的选择">前端 i18n 库的选择</h3><p>市面上比较流行的只有两种，两者功能差不太多。</p><p><a href="https://react.i18next.com/">i18n-next</a></p><ul><li>可支持插件拓展</li><li>不支持编译自动生成 key （但是可以直接用文案当作 key）</li></ul><p><a href="https://formatjs.io/docs/react-intl/">react-intl</a></p><ul><li>不支持插件拓展，但支持高阶 hoc 的拓展</li><li>支持编译时自动生成 key</li></ul><h3 id="i18n-的本质">i18n 的本质</h3><p>key - value 映射<br>不管哪种方案都是 key - value 的映射，抓住本质他的概念就很好理解。</p><p>如下</p><pre><code class="hljs"><span class="hljs-comment">// 只是切换时候加载不同对象内容。</span><span class="hljs-keyword">let</span> languages = &#123;  <span class="hljs-attr">en</span>: &#123;    <span class="hljs-string">&quot;common.hello&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>,  &#125;,  <span class="hljs-attr">zh</span>: &#123;    <span class="hljs-string">&quot;common.hello&quot;</span>: <span class="hljs-string">&quot;你好&quot;</span>,  &#125;,&#125;;</code></pre><h3 id="i18n-需要解决的问题">i18n 需要解决的问题</h3><h4 id="key-的选取">key 的选取</h4><p>如上所述 react-intl 支持自动生成 key，也支持手写 key。<br>i18n-next 貌似只支持手写 key。<br>key 的常见规则如下</p><pre><code class="hljs"><span class="hljs-comment">// 规则一：手写，短语拼接</span><span class="hljs-keyword">let</span> languages = &#123;  <span class="hljs-attr">en</span>: &#123;    <span class="hljs-comment">// 短语方式写key</span>    <span class="hljs-string">&quot;common.hello&quot;</span>: <span class="hljs-string">&quot;hello&quot;</span>,  &#125;,&#125;;<span class="hljs-comment">// 规则二： 手写，直接用文案当key</span><span class="hljs-keyword">let</span> languages = &#123;  <span class="hljs-attr">en</span>: &#123;    <span class="hljs-comment">// 这种可能文案生成的json会很大</span>    <span class="hljs-string">&quot;hello ,i am fine and you?&quot;</span>: <span class="hljs-string">&quot;hello ,i am fine and you?&quot;</span>,  &#125;,&#125;;<span class="hljs-comment">// 规则三： 自动生成</span><span class="hljs-comment">//react intl 支持自动生成</span><span class="hljs-comment">// 举例</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> intl = <span class="hljs-title function_">useIntl</span>();  <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">formatMessage</span>(&#123; <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&quot;hello&quot;</span> &#125;);  <span class="hljs-comment">//                                          ^^^^^^^</span>  <span class="hljs-comment">// 在编译时候会给你生成</span>  <span class="hljs-comment">// intl.formatMessage(&#123;id:&#x27;generateKeyRule(&quot;hello&quot;)&#x27;,defaultMessage:&quot;hello&quot;&#125;);</span>  <span class="hljs-comment">// generateKeyRul 可以自己指定，还有一些额外上下文变量可以使用，比如文件路径。</span>  <span class="hljs-comment">// 可以生成这种内容sha1</span>  <span class="hljs-comment">// intl.formatMessage(&#123;id:&#x27;asdjfkasjdfxxx&#x27;,defaultMessage:&quot;hello&quot;&#125;);</span>&#125;</code></pre><p>对比下三种规则优缺点</p><table><thead><tr><th></th><th>手写短语</th><th>文案就是 key</th><th>自动生成</th></tr></thead><tbody><tr><td>优点</td><td>无文案依赖，也就是说它只作为页面的一个占位符，你想换文案就可以换文案</td><td>无文案依赖，相比手写更加易于理解</td><td>无文案 key 维护成本,翻译易于复用</td></tr><tr><td>缺点</td><td>累，维护 key 贼累，翻译可能不易复用</td><td>代码显示文案可能与线上显示文案不符</td><td>依赖文案生成 key，依赖文案的变更需要重新生成 key，重新上线,文案冲突频率变高，需要选择一种基准文案（建议项目母语，变更频率最低）</td></tr><tr><td>适用场景</td><td>文案少，变更频繁，可自定义覆盖，c 端，组件库</td><td>没想好</td><td>文案多，变更不频繁，b 端</td></tr></tbody></table><p>ps: 文案冲突</p><pre><code class="hljs"><span class="hljs-comment">// 自动生成key的文案冲突问题</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> intl = <span class="hljs-title function_">useIntl</span>();  <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">formatMessage</span>(&#123; <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&quot;select&quot;</span> &#125;);  <span class="hljs-comment">//                                          ^^^^^^^</span>  <span class="hljs-comment">// 对应中文可能是 选择图片，选择视频</span>  <span class="hljs-comment">// 解决办法，添加描述性语句辅助生成key</span>  <span class="hljs-comment">// return intl.formatMessage(&#123; defaultMessage: &quot;select&quot;,  description: &#x27;image&#x27;, &#125;);</span>  <span class="hljs-comment">// zh: 选择图像 key-&gt; select#video (react-intl 拼接规则)</span>  <span class="hljs-comment">// return intl.formatMessage(&#123; defaultMessage: &quot;select&quot;,  description: &#x27;video&#x27;, &#125;);</span>  <span class="hljs-comment">// zh: 选择视频 key-&gt; select#video (react-intl 拼接规则)</span>  <span class="hljs-comment">// return intl.formatMessage(&#123; defaultMessage: &quot;select&quot; &#125;);</span>  <span class="hljs-comment">// zh: 选择 key-&gt; select</span>&#125;</code></pre><h3 id="可能遇见的状况（低频）">可能遇见的状况（低频）</h3><p>货币，数字国际化，i18n 是提供这个 api 的，可放心食用。</p><h3 id="基础库解决的问题">基础库解决的问题</h3><ul><li>文案提取的能力。</li></ul><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Demo</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> intl = <span class="hljs-title function_">useIntl</span>();  <span class="hljs-keyword">return</span> intl.<span class="hljs-title function_">formatMessage</span>(&#123; <span class="hljs-attr">defaultMessage</span>: <span class="hljs-string">&quot;hello&quot;</span> &#125;);  <span class="hljs-comment">// return intl.formatMessage(&#123; id:&quot;id&quot;, defaultMessage: &quot;hello&quot; &#125;);</span>&#125;<span class="hljs-comment">// ===&gt; 提取json</span><span class="hljs-comment">// 类似这种</span><span class="hljs-comment">// &#123;</span><span class="hljs-comment">// &quot;id || generateKeyRule(text)&quot; : &quot;hello&quot;</span><span class="hljs-comment">// &#125;</span></code></pre><ul><li>key-value 映射</li></ul><h3 id="基础库未解决的问题">基础库未解决的问题</h3><ul><li>文案管理</li></ul><p>随着业务迭代，文案越来越多，会有废弃文案，新增文案的概念。<br>需要一个平台存储文案，然后前端项目获取文案，可根据从项目中提取的文案与存储文案的地方做对比，然后获取文案。</p><ul><li>文案完整度</li></ul><p>如何确保多国翻译，或者部分国翻译 100%已有翻译，还是需要从项目中获取项目中使用的文案，然后对比语言包。</p><ul><li>翻译流程</li></ul><p>一条文案的产生的源头通常 prd，然后设计复制一份并拓展，然后研发根据设计稿开发，当提测是应提交项目中的文案到，待翻译状态，然后翻译组/产品/机翻，进行翻译，然后前端项目获取这些文案，进行文案完整度上线前检测即可。<br>这个是最难的，要拉起设计、产品、研发的认知才能搞。</p><ul><li><p>翻译文案</p><p>如何保证一条文案在语境下的正确性？</p><ul><li>方案一：<br>文案+设计图<br>实现难度低</li><li>方案二：<br>文案+页面<br>实现难度复杂</li></ul></li><li><p>文案关联页面</p><p>可通过webpack 插件开发处理chunk信息获取</p><p>所以需要一个平台/平台周边生态去做这些事</p></li></ul><h3 id="参考">参考</h3><p>i18n-next 文案平台<br><a href="https://locize.com/">https://locize.com/</a><br>vscode i18n all in one 插件<br><a href="https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally">https://marketplace.visualstudio.com/items?itemName=Lokalise.i18n-ally</a></p><p>阿里的轮子<br><a href="https://github.com/alibaba/react-intl-universal">https://github.com/alibaba/react-intl-universal</a><br><a href="https://github.com/alibaba/kiwi">https://github.com/alibaba/kiwi</a></p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
          <category> i18n </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/12/30/v2021-12-30-14-51/"/>
      <url>/2021/12/30/v2021-12-30-14-51/</url>
      
        <content type="html"><![CDATA[<p>原来产品与设计，和我是平等的以前觉得他们咋说咋搞，看来不见得非得这样</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈前端项目协作</title>
      <link href="/2021/12/03/qian-tan-qian-duan-xiang-mu-xie-zuo/"/>
      <url>/2021/12/03/qian-tan-qian-duan-xiang-mu-xie-zuo/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我思故我在。——笛卡尔</p></blockquote><h3 id="目的">目的</h3><p>为什么要谈前端协作，在企业开发中一个个项目往往都是多人合作的，参与人数从 2-n 人不等。<br>如果你是一个新人，你是否经历过加入新项目时候问东问西，各种骚操作，花式小技巧，只能从前辈那里以嘴的方式获取。<br>如果你是一个老人，是否经历过新来的人完全不按你的套路写代码，代码乱放，各种组件cv制造，最终堆成一座崭新的屎山。<br>如何解决这两个问题呢？<br>作为新人我希望有个文档，快速告诉我那个目录是干啥的，怎么启项目，怎么调试。<br>作为老人我希望有个文档，告诉新人目录约束，现存的可复用的代码。</p><h3 id="代码">代码</h3><p>从代码部分讲，可复用的是纯粹的，没有副作用的，要达到这个目的，一个是保证数据输入不依赖于接口，让组件更加纯粹。<br>通过分析观察一个业务的组件能够分为2类</p><ul><li>业务组件（页面，表单）特征是存在大量接口数据依赖</li><li>纯组件 (不依赖存在副作用的数据) 最适合将这部分组件抽离出来了，作为组件资产沉淀<br>从代码风格上，可以编写代码风格指南也就是新人101，去介绍应该写什么样的代码，这点很重要，因为只有一开始让大家重视这个，才会培养出良好的用户习惯。<br>如果培养了一个熟悉的用户习惯，后面但凡一些细微的改动也会引起用户的抵触心理。</li></ul><h3 id="解决方案">解决方案</h3><p>方案一：<br>将文档与代码绑定到一起，使用storybook等作为项目文档，好处是代码与文档是绑定的，可以可视化展示组件，可以沉淀业务资产，方便代码复用。<br>方案二：<br>将这些能力统一到手脚架中类似umi，通过约定的方式进行开发，这方面感觉java做的很完美，基本上的目录结构都差不多。</p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/28/v2021-11-28-10-48/"/>
      <url>/2021/11/28/v2021-11-28-10-48/</url>
      
        <content type="html"><![CDATA[<p>主题整体字号从14px升级到16px，之前觉得小点页面承载的内容就会多些。<br>后来发现小的文字实际上不利于阅读，太过紧凑容易产生视觉疲劳。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>年终杂谈</title>
      <link href="/2021/11/28/zong-jie-dang-xia-si-kao-wei-lai/"/>
      <url>/2021/11/28/zong-jie-dang-xia-si-kao-wei-lai/</url>
      
        <content type="html"><![CDATA[<p>这个文章是从 11 月建立的没想到 12 月才写完，拖延症拖了一个月…</p><h3 id="思考">思考</h3><p>我总是能有很多新奇的点子，很多都来源于宽广的认知，我觉得这也可能是我最大的竞争力。</p><p>比如我觉得 next 的注入方式不符合 spring 的方式，我就搞了一套新的注解 api，用起来也很爽。</p><p>这件事实际上很简单，模仿 spring 的 api 就行，但是这一切都来源于一个想法，所以说没了想法就算你会最快的算法又能怎样呢，毫无施展其能力的地方。</p><p>一定要不停的思考，当你用什么东西不爽的时候，就应该思考怎么让他变得更爽，自己爽了之后，再去看同样和你相同的人是不是也有这种不爽的感觉。</p><p>拿捏你俩一样的痛点做适当的拓展，进而推广你的工具，随着拓展的不断加强，目标用户群体也就越来越大，一个新的产品就会渐渐浮现出水面.</p><p>而这一切是顺其自然的，当然如果有人和你竞争另算。</p><h3 id="格局">格局</h3><p>不知不觉已经毕业两年半了，整体认知存在这巨变，格局也越来越大。</p><p>一开始只从技术的角度看问题，也就是你给我图我能不能实现，这个功能我怎么去实现，这个思维大概跟随了我两年多，做业务我一直是这种想法。</p><p>而且经常去钻牛角尖，和我聊 3 分钟我就会告诉你这个功能我要怎么实现，后来听一位前辈说的话，深受启发。</p><blockquote><p>有限的精力要用在值得掰扯的事情上，无关紧要的细节就不用太纠结</p></blockquote><p>上面的思维方式我觉得做一名研发工程师事没有问题的，但是作为一个有竞争力的研发工程师是远远不够的。</p><p>做什么事一定要有最开始的目标，才会有进行下去的动力。</p><p>在做一件事前，多问问自己这件事能带来什么，快乐、能力的提升、金钱还是什么？</p><p>有了最初初心后，当面对别人的不解你也能很快释怀，因为人和人之间的认知是很难拉齐的，也就是你想要的不是他想要的。</p><p>可以根据初始目标，去衡量这件事有没有做成功。</p><p>不过永远不变的就是变化，当你发现这件事情没有可能带来你想要的时候，就要果断将它放弃，将精力放到收益大的地方。</p><h3 id="信息爆炸">信息爆炸</h3><p>互联网时代,信息量超级大，短信息与短视频带来的快感让人上瘾。</p><p>希望明年能够逐步的不关注这些简讯信息，这些碎片化信息对个人的提升毫无意义。</p>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/04/v2021-11-04-14-49/"/>
      <url>/2021/11/04/v2021-11-04-14-49/</url>
      
        <content type="html"><![CDATA[<p>技术人员往往经常讨论技术，而忽略了技术其价值是辅佐业务，但是大部分人是想不出或者不去想如何创新的，一方面是安于舒适，另一方面是竞争。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>audio可视化</title>
      <link href="/2021/10/24/audio-ke-shi-hua/"/>
      <url>/2021/10/24/audio-ke-shi-hua/</url>
      
        <content type="html"><![CDATA[<div id="preview-0" class="preview"><div class="preview-box">    <div id="draw-0">    如果没有播放点击play可视化<div><audio id="audio" controls autoplay><source src="/imgs/demo.m4a" type="audio/mp4" /></audio></div><div style="display: flex;    flex-wrap: wrap; gap:20px"><div><div>波形</div><canvas id="canvas" width="200px" height='200px'></canvas></div><div><div>频率</div><canvas id="canvas1" width="200px" height='200px'></canvas></div></div><script type="module">const audio = document.getElementById('audio');const canvas = document.getElementById("canvas");const canvasCtx = canvas.getContext("2d");const canvas1 = document.getElementById("canvas1");const canvas1Ctx = canvas1.getContext("2d");let play = false;audio.addEventListener('play', function () {play = true;const audioCtx = new (window.AudioContext || window.webkitAudioContext)();const source = audioCtx.createMediaElementSource(audio);const analyser = audioCtx.createAnalyser();const gainNode = audioCtx.createGain();gainNode.gain.value = 0.4;// source -> analysersource.connect(analyser);// analyser -> gainNodeanalyser.connect(gainNode);// gainNode -> 扬声器gainNode.connect(audioCtx.destination);const bufferLength = analyser.frequencyBinCount;const domainArray = new Uint8Array(bufferLength);const frequencyArray = new Uint8Array(bufferLength);analyser.getByteTimeDomainData(domainArray);let time = 0;function draw() {window.requestAnimationFrame(draw);if (play) {// analyser.getByteTimeDomainData(domainArray);// console.log('data', domainArray);// console.log('frequency', frequencyArray);// time++analyser.getByteTimeDomainData(domainArray);canvasCtx.fillStyle = "rgb(220, 220, 220)";canvasCtx.fillRect(0, 0, canvas.width, canvas.height);canvasCtx.lineWidth = 2;canvasCtx.strokeStyle = "rgb(0, 0, 0)";canvasCtx.beginPath();let skip = 2 ** 4;var sliceWidth = canvas.width * 1.0 / bufferLength * skip;var x = 0;for (let i = 0; i < bufferLength; i++) {var v = domainArray[i] / 128.0;var y = v * canvas.height / 2;if (i === 0) {canvasCtx.moveTo(x, y);} else {canvasCtx.lineTo(x, y);}x += sliceWidth;}canvasCtx.lineTo(canvas.width, canvas.height / 2);canvasCtx.stroke();// 频率analyser.getByteFrequencyData(frequencyArray);canvas1Ctx.fillStyle = 'rgb(220, 220, 220)';canvas1Ctx.fillRect(0, 0, canvas1.width, canvas1.height);var barWidth = (canvas1.width / bufferLength * skip) * 2.5;var barHeight;var x = 0;for (let i = 0; i < bufferLength; i++) {barHeight = frequencyArray[i];canvas1Ctx.fillStyle = 'rgb(' + (barHeight + 100) + '50,50,50)';canvas1Ctx.fillRect(x, canvas1.height - barHeight / 2, barWidth, barHeight / 2);x += barWidth + 1;}}}draw()})</script>    </div>    <div class="preview-box-util">        <span id="expand-0" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-0" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;audio&quot;</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/imgs/demo.m4a&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mp4&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: flex;    flex-wrap: wrap; gap:20px&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>波形<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;200px&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>频率<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas1&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;200px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;200px&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">const</span> audio = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;audio&#x27;</span>);<span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<span class="hljs-keyword">const</span> canvasCtx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<span class="hljs-keyword">const</span> canvas1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas1&quot;</span>);<span class="hljs-keyword">const</span> canvas1Ctx = canvas1.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<span class="hljs-keyword">let</span> play = <span class="hljs-literal">false</span>;audio.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;play&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;play = <span class="hljs-literal">true</span>;<span class="hljs-keyword">const</span> audioCtx = <span class="hljs-keyword">new</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">AudioContext</span> || <span class="hljs-variable language_">window</span>.<span class="hljs-property">webkitAudioContext</span>)();<span class="hljs-keyword">const</span> source = audioCtx.<span class="hljs-title function_">createMediaElementSource</span>(audio);<span class="hljs-keyword">const</span> analyser = audioCtx.<span class="hljs-title function_">createAnalyser</span>();<span class="hljs-keyword">const</span> gainNode = audioCtx.<span class="hljs-title function_">createGain</span>();gainNode.<span class="hljs-property">gain</span>.<span class="hljs-property">value</span> = <span class="hljs-number">0.4</span>;<span class="hljs-comment">// source -&gt; analyser</span>source.<span class="hljs-title function_">connect</span>(analyser);<span class="hljs-comment">// analyser -&gt; gainNode</span>analyser.<span class="hljs-title function_">connect</span>(gainNode);<span class="hljs-comment">// gainNode -&gt; 扬声器</span>gainNode.<span class="hljs-title function_">connect</span>(audioCtx.<span class="hljs-property">destination</span>);<span class="hljs-keyword">const</span> bufferLength = analyser.<span class="hljs-property">frequencyBinCount</span>;<span class="hljs-keyword">const</span> domainArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(bufferLength);<span class="hljs-keyword">const</span> frequencyArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(bufferLength);analyser.<span class="hljs-title function_">getByteTimeDomainData</span>(domainArray);<span class="hljs-keyword">let</span> time = <span class="hljs-number">0</span>;<span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(draw);<span class="hljs-keyword">if</span> (play) &#123;<span class="hljs-comment">// analyser.getByteTimeDomainData(domainArray);</span><span class="hljs-comment">// console.log(&#x27;data&#x27;, domainArray);</span><span class="hljs-comment">// console.log(&#x27;frequency&#x27;, frequencyArray);</span><span class="hljs-comment">// time++</span>analyser.<span class="hljs-title function_">getByteTimeDomainData</span>(domainArray);canvasCtx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;rgb(220, 220, 220)&quot;</span>;canvasCtx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);canvasCtx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span>;canvasCtx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;rgb(0, 0, 0)&quot;</span>;canvasCtx.<span class="hljs-title function_">beginPath</span>();<span class="hljs-keyword">let</span> skip = <span class="hljs-number">2</span> ** <span class="hljs-number">4</span>;<span class="hljs-keyword">var</span> sliceWidth = canvas.<span class="hljs-property">width</span> * <span class="hljs-number">1.0</span> / bufferLength * skip;<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bufferLength; i++) &#123;<span class="hljs-keyword">var</span> v = domainArray[i] / <span class="hljs-number">128.0</span>;<span class="hljs-keyword">var</span> y = v * canvas.<span class="hljs-property">height</span> / <span class="hljs-number">2</span>;<span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;canvasCtx.<span class="hljs-title function_">moveTo</span>(x, y);&#125; <span class="hljs-keyword">else</span> &#123;canvasCtx.<span class="hljs-title function_">lineTo</span>(x, y);&#125;x += sliceWidth;&#125;canvasCtx.<span class="hljs-title function_">lineTo</span>(canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span> / <span class="hljs-number">2</span>);canvasCtx.<span class="hljs-title function_">stroke</span>();<span class="hljs-comment">// 频率</span>analyser.<span class="hljs-title function_">getByteFrequencyData</span>(frequencyArray);canvas1Ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgb(220, 220, 220)&#x27;</span>;canvas1Ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas1.<span class="hljs-property">width</span>, canvas1.<span class="hljs-property">height</span>);<span class="hljs-keyword">var</span> barWidth = (canvas1.<span class="hljs-property">width</span> / bufferLength * skip) * <span class="hljs-number">2.5</span>;<span class="hljs-keyword">var</span> barHeight;<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; bufferLength; i++) &#123;barHeight = frequencyArray[i];canvas1Ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgb(&#x27;</span> + (barHeight + <span class="hljs-number">100</span>) + <span class="hljs-string">&#x27;50,50,50)&#x27;</span>;canvas1Ctx.<span class="hljs-title function_">fillRect</span>(x, canvas1.<span class="hljs-property">height</span> - barHeight / <span class="hljs-number">2</span>, barWidth, barHeight / <span class="hljs-number">2</span>);x += barWidth + <span class="hljs-number">1</span>;&#125;&#125;&#125;<span class="hljs-title function_">draw</span>()&#125;)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>    const expandCode_0 = document.getElementById('expand-0');    const bindCode_0 = document.getElementById('code-0');    let flag_0 = true;    expandCode_0.onclick = function (){        if(flag_0){            bindCode_0.classList.add('preview-code-active')        }else{            bindCode_0.classList.remove('preview-code-active')         }        flag_0 = !flag_0    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>html解析</title>
      <link href="/2021/10/23/html-jie-xi/"/>
      <url>/2021/10/23/html-jie-xi/</url>
      
        <content type="html"><![CDATA[<div id="preview-0" class="preview"><div class="preview-box">    <div id="draw-0">    <script type="module">                    (function(){                        var string = `<div >fff ddd<span style="123 fff"data-size=12 data-width='20px' >123</span><br style="fff" />ddd</div>`;var offset = 0;// <div> or </div> or <div > function getTagName(str) {    var start = offset;    var reg = /[a-zA-Z]/;    while (reg.test(str[offset]) && offset < str.length) {        offset++;    }    return str.substring(start, offset);}function parse(str) {    var stack = [{            tagName: 'root',            children: []        }];    var root;    while (offset < str.length) {        switch (str[offset]) {            case '<':                offset++;                if (str[offset] === '/') {                    var node = stack.pop();                    if (stack.length === 0) {                        root = node;                    }                    offset++;                    var tagName = getTagName(str);                    if (tagName !== (node === null || node === void 0 ? void 0 : node.tagName)) {                        console.error(tagName + "\u4E0D\u5339\u914D");                    }                    else {                        while (str[offset] !== '>') {                            offset++;                        }                        node.end = offset;                    }                }                else {                    var node = {                        start: offset                    };                    var tagName = getTagName(str);                    node.tagName = tagName;                    if (stack[stack.length - 1]) {                        if (!stack[stack.length - 1].children) {                            stack[stack.length - 1].children = [];                        }                        stack[stack.length - 1].children.push(node);                    }                    while (str[offset] !== '/' && str[offset] !== '>') {                        if (!node.attrSource) {                            node.attrSource = '';                        }                        node.attrSource += str[offset];                        offset++;                    }                    node.attr = parseAttribute(node.attrSource);                    node.end = offset;                    stack.push(node);                }                break;            case '>':                if (str[offset - 1] === '/') {                    var node = stack.pop();                    if (stack.length === 0) {                        root = node;                    }                    node.end = offset;                }                break;            default:                if (stack.length > 0) {                    stack.push({                        tagName: 'text',                        value: ''                    });                    var start = offset;                    while (!/[<>]/.test(str[offset]) && offset < str.length) {                        offset++;                    }                    var textNode = stack.pop();                    textNode.value = str.substring(start, offset);                    if (!stack[stack.length - 1].children) {                        stack[stack.length - 1].children = [];                    }                    stack[stack.length - 1].children.push(textNode);                    offset--;                }        }        offset++;    }    console.log(stack);}// parseAttribute(' style= "123 1ff" data-v = 123')function parseAttribute(str) {    var index = 0;    var open = false;    var qOpen = false;    var stack = [];    while (index < (str === null || str === void 0 ? void 0 : str.length)) {        var currentCode = str[index];        if (!/\s/.test(currentCode)) {            if (!open) {                var start = index;                while (currentCode !== '=' && index < str.length) {                    index++;                    currentCode = str[index];                }                var key = str.substring(start, index);                stack.push({                    key: key,                    value: ''                });                open = true;            }            else {                var start = index;                if (/["']/.test(currentCode)) {                    qOpen = true;                    index++;                    currentCode = str[index];                }                if (qOpen) {                    while (!/["']/.test(currentCode) && index < str.length) {                        index++;                        currentCode = str[index];                    }                    qOpen = false;                }                else {                    // number                    while (!/\s/.test(currentCode) && index < str.length) {                        index++;                        currentCode = str[index];                    }                }                var node = stack[stack.length - 1];                node.value = str.substring(start, index);                open = false;            }        }        index++;    }    // console.log(stack)    return stack;}parse(string);                    })(0)                </script>    </div>    <div class="preview-box-util">        <span id="expand-0" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-0" class="preview-code preview-code-active"><pre><code class="hljs"><span class="hljs-keyword">var</span> string = <span class="hljs-string">`&lt;div &gt;fff ddd&lt;span style=&quot;123 fff&quot;data-size=12 data-width=&#x27;20px&#x27; &gt;123&lt;/span&gt;&lt;br style=&quot;fff&quot; /&gt;ddd&lt;/div&gt;`</span>;<span class="hljs-keyword">var</span> offset = <span class="hljs-number">0</span>;<span class="hljs-comment">// &lt;div&gt; or &lt;/div&gt; or &lt;div &gt; </span><span class="hljs-keyword">function</span> <span class="hljs-title function_">getTagName</span>(<span class="hljs-params">str</span>) &#123;    <span class="hljs-keyword">var</span> start = offset;    <span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/[a-zA-Z]/</span>;    <span class="hljs-keyword">while</span> (reg.<span class="hljs-title function_">test</span>(str[offset]) &amp;&amp; offset &lt; str.<span class="hljs-property">length</span>) &#123;        offset++;    &#125;    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">substring</span>(start, offset);&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">str</span>) &#123;    <span class="hljs-keyword">var</span> stack = [&#123;            <span class="hljs-attr">tagName</span>: <span class="hljs-string">&#x27;root&#x27;</span>,            <span class="hljs-attr">children</span>: []        &#125;];    <span class="hljs-keyword">var</span> root;    <span class="hljs-keyword">while</span> (offset &lt; str.<span class="hljs-property">length</span>) &#123;        <span class="hljs-keyword">switch</span> (str[offset]) &#123;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&lt;&#x27;</span>:                offset++;                <span class="hljs-keyword">if</span> (str[offset] === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;                    <span class="hljs-keyword">var</span> node = stack.<span class="hljs-title function_">pop</span>();                    <span class="hljs-keyword">if</span> (stack.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;                        root = node;                    &#125;                    offset++;                    <span class="hljs-keyword">var</span> tagName = <span class="hljs-title function_">getTagName</span>(str);                    <span class="hljs-keyword">if</span> (tagName !== (node === <span class="hljs-literal">null</span> || node === <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> ? <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> : node.<span class="hljs-property">tagName</span>)) &#123;                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(tagName + <span class="hljs-string">&quot;\u4E0D\u5339\u914D&quot;</span>);                    &#125;                    <span class="hljs-keyword">else</span> &#123;                        <span class="hljs-keyword">while</span> (str[offset] !== <span class="hljs-string">&#x27;&gt;&#x27;</span>) &#123;                            offset++;                        &#125;                        node.<span class="hljs-property">end</span> = offset;                    &#125;                &#125;                <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-keyword">var</span> node = &#123;                        <span class="hljs-attr">start</span>: offset                    &#125;;                    <span class="hljs-keyword">var</span> tagName = <span class="hljs-title function_">getTagName</span>(str);                    node.<span class="hljs-property">tagName</span> = tagName;                    <span class="hljs-keyword">if</span> (stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>]) &#123;                        <span class="hljs-keyword">if</span> (!stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">children</span>) &#123;                            stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">children</span> = [];                        &#125;                        stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(node);                    &#125;                    <span class="hljs-keyword">while</span> (str[offset] !== <span class="hljs-string">&#x27;/&#x27;</span> &amp;&amp; str[offset] !== <span class="hljs-string">&#x27;&gt;&#x27;</span>) &#123;                        <span class="hljs-keyword">if</span> (!node.<span class="hljs-property">attrSource</span>) &#123;                            node.<span class="hljs-property">attrSource</span> = <span class="hljs-string">&#x27;&#x27;</span>;                        &#125;                        node.<span class="hljs-property">attrSource</span> += str[offset];                        offset++;                    &#125;                    node.<span class="hljs-property">attr</span> = <span class="hljs-title function_">parseAttribute</span>(node.<span class="hljs-property">attrSource</span>);                    node.<span class="hljs-property">end</span> = offset;                    stack.<span class="hljs-title function_">push</span>(node);                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;&gt;&#x27;</span>:                <span class="hljs-keyword">if</span> (str[offset - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;/&#x27;</span>) &#123;                    <span class="hljs-keyword">var</span> node = stack.<span class="hljs-title function_">pop</span>();                    <span class="hljs-keyword">if</span> (stack.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;                        root = node;                    &#125;                    node.<span class="hljs-property">end</span> = offset;                &#125;                <span class="hljs-keyword">break</span>;            <span class="hljs-attr">default</span>:                <span class="hljs-keyword">if</span> (stack.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;                    stack.<span class="hljs-title function_">push</span>(&#123;                        <span class="hljs-attr">tagName</span>: <span class="hljs-string">&#x27;text&#x27;</span>,                        <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>                    &#125;);                    <span class="hljs-keyword">var</span> start = offset;                    <span class="hljs-keyword">while</span> (!<span class="hljs-regexp">/[&lt;&gt;]/</span>.<span class="hljs-title function_">test</span>(str[offset]) &amp;&amp; offset &lt; str.<span class="hljs-property">length</span>) &#123;                        offset++;                    &#125;                    <span class="hljs-keyword">var</span> textNode = stack.<span class="hljs-title function_">pop</span>();                    textNode.<span class="hljs-property">value</span> = str.<span class="hljs-title function_">substring</span>(start, offset);                    <span class="hljs-keyword">if</span> (!stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">children</span>) &#123;                        stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">children</span> = [];                    &#125;                    stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-property">children</span>.<span class="hljs-title function_">push</span>(textNode);                    offset--;                &#125;        &#125;        offset++;    &#125;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(stack);&#125;<span class="hljs-comment">// parseAttribute(&#x27; style= &quot;123 1ff&quot; data-v = 123&#x27;)</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">parseAttribute</span>(<span class="hljs-params">str</span>) &#123;    <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;    <span class="hljs-keyword">var</span> open = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">var</span> qOpen = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">var</span> stack = [];    <span class="hljs-keyword">while</span> (index &lt; (str === <span class="hljs-literal">null</span> || str === <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> ? <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> : str.<span class="hljs-property">length</span>)) &#123;        <span class="hljs-keyword">var</span> currentCode = str[index];        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/\s/</span>.<span class="hljs-title function_">test</span>(currentCode)) &#123;            <span class="hljs-keyword">if</span> (!open) &#123;                <span class="hljs-keyword">var</span> start = index;                <span class="hljs-keyword">while</span> (currentCode !== <span class="hljs-string">&#x27;=&#x27;</span> &amp;&amp; index &lt; str.<span class="hljs-property">length</span>) &#123;                    index++;                    currentCode = str[index];                &#125;                <span class="hljs-keyword">var</span> key = str.<span class="hljs-title function_">substring</span>(start, index);                stack.<span class="hljs-title function_">push</span>(&#123;                    <span class="hljs-attr">key</span>: key,                    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;&#x27;</span>                &#125;);                open = <span class="hljs-literal">true</span>;            &#125;            <span class="hljs-keyword">else</span> &#123;                <span class="hljs-keyword">var</span> start = index;                <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/[&quot;&#x27;]/</span>.<span class="hljs-title function_">test</span>(currentCode)) &#123;                    qOpen = <span class="hljs-literal">true</span>;                    index++;                    currentCode = str[index];                &#125;                <span class="hljs-keyword">if</span> (qOpen) &#123;                    <span class="hljs-keyword">while</span> (!<span class="hljs-regexp">/[&quot;&#x27;]/</span>.<span class="hljs-title function_">test</span>(currentCode) &amp;&amp; index &lt; str.<span class="hljs-property">length</span>) &#123;                        index++;                        currentCode = str[index];                    &#125;                    qOpen = <span class="hljs-literal">false</span>;                &#125;                <span class="hljs-keyword">else</span> &#123;                    <span class="hljs-comment">// number</span>                    <span class="hljs-keyword">while</span> (!<span class="hljs-regexp">/\s/</span>.<span class="hljs-title function_">test</span>(currentCode) &amp;&amp; index &lt; str.<span class="hljs-property">length</span>) &#123;                        index++;                        currentCode = str[index];                    &#125;                &#125;                <span class="hljs-keyword">var</span> node = stack[stack.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];                node.<span class="hljs-property">value</span> = str.<span class="hljs-title function_">substring</span>(start, index);                open = <span class="hljs-literal">false</span>;            &#125;        &#125;        index++;    &#125;    <span class="hljs-comment">// console.log(stack)</span>    <span class="hljs-keyword">return</span> stack;&#125;<span class="hljs-title function_">parse</span>(string);</code></pre></div><script>    const expandCode_0 = document.getElementById('expand-0');    const bindCode_0 = document.getElementById('code-0');    let flag_0 = false;    expandCode_0.onclick = function (){        if(flag_0){            bindCode_0.classList.add('preview-code-active')        }else{            bindCode_0.classList.remove('preview-code-active')         }        flag_0 = !flag_0    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/15/v2021-10-15-08-48/"/>
      <url>/2021/10/15/v2021-10-15-08-48/</url>
      
        <content type="html"><![CDATA[<p>新了一轮学习要开始啦</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/13/v2021-10-13-16-02/"/>
      <url>/2021/10/13/v2021-10-13-16-02/</url>
      
        <content type="html"><![CDATA[<p>博客新增微博功能了，其实有时候没那么多长篇大论往往是很精短的几句话就能表达自己的想法，和当时内心动态，所以新增微博功能，后续最好搞个vscode插件这样我就可以不用开项目就能发我的微博了✌️。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>node进程管理集群</title>
      <link href="/2021/06/19/node-jin-cheng-guan-li-ji-qun/"/>
      <url>/2021/06/19/node-jin-cheng-guan-li-ji-qun/</url>
      
        <content type="html"><![CDATA[<style>.dark .post img{filter: contrast(0);}</style><blockquote><p>有人的地方就有江湖，有江湖的地方就有包工头<br>                   --尼古拉斯张三</p></blockquote><h3 id="单机进程管理的缺点">单机进程管理的缺点</h3><p>一个人的力量毕竟是有限的，单机进程管理像下图这样。</p><p><img src="/imgs/%E5%8D%95%E6%9C%BA%E5%AE%9E%E4%BE%8B.png" alt="image" width="150"></p><p>看这个图会发现两个问题：</p><ol><li>任务分发和进程管理两个服务放在一块耦合过于严重，一上线某一个功能就需要重启所有进程</li><li>单机资源是有限的，随着进程增加，就会出现资源不够用的情况</li></ol><h3 id="进程管理集群">进程管理集群</h3><p>为了解决上面两个问题，应该引入集群思维，一个主机管理下面其他进程管理机器，这样主机上线不会影响 node 服务，而且集群资源是丰富的配合 docker 还是可以动态扩容的。</p><p>具体架构应该是这样的</p><p><img src="/imgs/%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84.png" alt="image"></p><ul><li><p>启动</p><ul><li>当集群 B 的工作节点启动时候，会向任务分配节点注册机器信息，并按分钟发送心跳（机器信息）。</li><li>集群 A 会保存这些节点信息，供后面任务分发使用。</li></ul></li><li><p>启动服务</p><ul><li>当一个进程需要启动时候，会检查当前节点信息，分配给相对空闲的机器。</li><li>此时将 node 进程和工作节点进行绑定，以供后续重启暂停操作。</li></ul></li><li><p>上线管理节点</p><ul><li>上线管理节点时候我们无需重启 node 进程节点，各节点均可正常访问</li></ul></li><li><p>上线工作节点</p><ul><li>工作节点会不再发送心跳，管理节点认为工作节点挂掉。</li><li>并向新一轮的注册节点进行新一轮的任务分配，并重启对应 node 进程</li></ul></li></ul><p>这样就解决了单机实例的问题，并且服务高可用，工作职责明确。</p><h4 id="node-进程高可用谁来管理？">node 进程高可用谁来管理？</h4><p>也可整合到节点服务中，那么可能节点分配可能是这样的</p><p><img src="/imgs/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BB%84.png" alt="image"></p><p>可以看到每个工作节点都会存在进程 1，为什么有的进程是单个有的进程是多个节点都存在呢。</p><p>这部分是因为进程功能不相同</p><p>对于业务节点比如 ssr，node 测试服务可能只需要一个进程就够了。</p><p>但是对于想要把 gitlab runner 的能力也搞过来，就需要多个工作节点干一样的活了。</p><h4 id="总结">总结</h4><p>单节点还是很脆弱的，集群与其对比优势展现的十分明显，不过需要维护节点信息，分发任务等细节的处理，实现起来相对复杂些。</p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>simple-proxy</title>
      <link href="/2021/05/22/simple-prosy/"/>
      <url>/2021/05/22/simple-prosy/</url>
      
        <content type="html"><![CDATA[<script>    function $(id) {        return document.getElementById(id)    }  x</script><p>简单的代理对象</p><p>给count 最原始的方式绑定数据</p><div id="preview-7" class="preview"><div class="preview-box">    <div id="draw-7">    <div id="count_0"> </div><button id="add_0">add</button><script type="module">    let countNode;    let addButton;    countNode = $('count_0');    addButton = $('add_0');    let value = { count: 1 };    countNode.textContent = value.count;    addButton.onclick = () => {        value.count++;        countNode.textContent = value.count;    }</script>    </div>    <div class="preview-box-util">        <span id="expand-7" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-7" class="preview-code preview-code-active"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count_0&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add_0&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">    <span class="hljs-keyword">let</span> countNode;    <span class="hljs-keyword">let</span> addButton;    countNode = $(<span class="hljs-string">&#x27;count_0&#x27;</span>);    addButton = $(<span class="hljs-string">&#x27;add_0&#x27;</span>);    <span class="hljs-keyword">let</span> value = &#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;;    countNode.<span class="hljs-property">textContent</span> = value.<span class="hljs-property">count</span>;    addButton.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;        value.<span class="hljs-property">count</span>++;        countNode.<span class="hljs-property">textContent</span> = value.<span class="hljs-property">count</span>;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>    const expandCode_7 = document.getElementById('expand-7');    const bindCode_7 = document.getElementById('code-7');    let flag_7 = false;    expandCode_7.onclick = function (){        if(flag_7){            bindCode_7.classList.add('preview-code-active')        }else{            bindCode_7.classList.remove('preview-code-active')         }        flag_7 = !flag_7    }</script></div><p>通过set绑定数据</p><div id="preview-11" class="preview"><div class="preview-box">    <div id="draw-11">    <div id="count_1"> </div><button id="add_1">add</button><!-- proxy 方式 --><script type="module">    let countNode;    let addButton;    countNode = $('count_1');    addButton = $('add_1');    let value1 = new Proxy({ count: 1 }, {        set(target, prop, value, receiver) {            target[prop] = value;            countNode.textContent = value;        }    });    // mount    countNode.textContent = value1.count;    // update    addButton.onclick = () => {        value1.count++;    }</script>    </div>    <div class="preview-box-util">        <span id="expand-11" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-11" class="preview-code preview-code-active"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count_1&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add_1&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-comment">&lt;!-- proxy 方式 --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">    <span class="hljs-keyword">let</span> countNode;    <span class="hljs-keyword">let</span> addButton;    countNode = $(<span class="hljs-string">&#x27;count_1&#x27;</span>);    addButton = $(<span class="hljs-string">&#x27;add_1&#x27;</span>);    <span class="hljs-keyword">let</span> value1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123; <span class="hljs-attr">count</span>: <span class="hljs-number">1</span> &#125;, &#123;        <span class="hljs-title function_">set</span>(<span class="hljs-params">target, prop, value, receiver</span>) &#123;            target[prop] = value;            countNode.<span class="hljs-property">textContent</span> = value;        &#125;    &#125;);    <span class="hljs-comment">// mount</span>    countNode.<span class="hljs-property">textContent</span> = value1.<span class="hljs-property">count</span>;    <span class="hljs-comment">// update</span>    addButton.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;        value1.<span class="hljs-property">count</span>++;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>    const expandCode_11 = document.getElementById('expand-11');    const bindCode_11 = document.getElementById('code-11');    let flag_11 = false;    expandCode_11.onclick = function (){        if(flag_11){            bindCode_11.classList.add('preview-code-active')        }else{            bindCode_11.classList.remove('preview-code-active')         }        flag_11 = !flag_11    }</script></div><p>循环代理+动态渲染</p><div id="preview-15" class="preview"><div class="preview-box">    <div id="draw-15">    <div id="app">    <div>data.count</div>    <div id="count_2"></div>    <div>data.data.count</div>    <div id="count_3"></div>    <button id="add_2">add</button></div><script type="module">    const app = $("app")    const map = new WeakMap();    function generatorProxy(obj, vm) {        const proxy = map.get(obj) ?? new Proxy(obj, {            get: (target, prop) => {                if (typeof target[prop] === 'object') {                    return generatorProxy(target[prop], vm)                }                return Reflect.get(target, prop);            },            set: (target, prop, value, receiver) => {                if (target[prop] === value) {                    return;                }                const result = Reflect.set(target, prop, value);                vm.render()                return result;            }        })        map.set(proxy, obj)        return proxy;    }    const count_2 = $('count_2');    const count_3 = $('count_3');    const add_2 = $('add_2');    function Component() {        const data = generatorProxy({            count: 0, data: {                count: 0            }        }, this);        this.render = () => {            count_2.textContent = data.count;            count_3.textContent = data.data.count;            add_2.onclick = () => {                console.log('click', data)                ++data.count;                ++data.data.count;            }        }        this.render()    }     // 创建新的组件    new Component();</script>    </div>    <div class="preview-box-util">        <span id="expand-15" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-15" class="preview-code preview-code-active"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>data.count<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count_2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>data.data.count<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;count_3&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;add_2&quot;</span>&gt;</span>add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">    <span class="hljs-keyword">const</span> app = $(<span class="hljs-string">&quot;app&quot;</span>)    <span class="hljs-keyword">const</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();    <span class="hljs-keyword">function</span> <span class="hljs-title function_">generatorProxy</span>(<span class="hljs-params">obj, vm</span>) &#123;        <span class="hljs-keyword">const</span> proxy = map.<span class="hljs-title function_">get</span>(obj) ?? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;            <span class="hljs-attr">get</span>: <span class="hljs-function">(<span class="hljs-params">target, prop</span>) =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target[prop] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">generatorProxy</span>(target[prop], vm)                &#125;                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, prop);            &#125;,            <span class="hljs-attr">set</span>: <span class="hljs-function">(<span class="hljs-params">target, prop, value, receiver</span>) =&gt;</span> &#123;                <span class="hljs-keyword">if</span> (target[prop] === value) &#123;                    <span class="hljs-keyword">return</span>;                &#125;                <span class="hljs-keyword">const</span> result = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, prop, value);                vm.<span class="hljs-title function_">render</span>()                <span class="hljs-keyword">return</span> result;            &#125;        &#125;)        map.<span class="hljs-title function_">set</span>(proxy, obj)        <span class="hljs-keyword">return</span> proxy;    &#125;    <span class="hljs-keyword">const</span> count_2 = $(<span class="hljs-string">&#x27;count_2&#x27;</span>);    <span class="hljs-keyword">const</span> count_3 = $(<span class="hljs-string">&#x27;count_3&#x27;</span>);    <span class="hljs-keyword">const</span> add_2 = $(<span class="hljs-string">&#x27;add_2&#x27;</span>);    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Component</span>(<span class="hljs-params"></span>) &#123;        <span class="hljs-keyword">const</span> data = <span class="hljs-title function_">generatorProxy</span>(&#123;            <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">data</span>: &#123;                <span class="hljs-attr">count</span>: <span class="hljs-number">0</span>            &#125;        &#125;, <span class="hljs-variable language_">this</span>);        <span class="hljs-variable language_">this</span>.<span class="hljs-property">render</span> = <span class="hljs-function">() =&gt;</span> &#123;            count_2.<span class="hljs-property">textContent</span> = data.<span class="hljs-property">count</span>;            count_3.<span class="hljs-property">textContent</span> = data.<span class="hljs-property">data</span>.<span class="hljs-property">count</span>;            add_2.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;click&#x27;</span>, data)                ++data.<span class="hljs-property">count</span>;                ++data.<span class="hljs-property">data</span>.<span class="hljs-property">count</span>;            &#125;        &#125;        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">render</span>()    &#125;     <span class="hljs-comment">// 创建新的组件</span>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Component</span>();</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>    const expandCode_15 = document.getElementById('expand-15');    const bindCode_15 = document.getElementById('code-15');    let flag_15 = false;    expandCode_15.onclick = function (){        if(flag_15){            bindCode_15.classList.add('preview-code-active')        }else{            bindCode_15.classList.remove('preview-code-active')         }        flag_15 = !flag_15    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac-键盘映射</title>
      <link href="/2021/05/12/mac-jian-pan-ying-she/"/>
      <url>/2021/05/12/mac-jian-pan-ying-she/</url>
      
        <content type="html"><![CDATA[<p>使用 karabiner-elemenet 进行mac键盘映射的修改</p><p>修改 大写按键 -&gt; esc<br>修改 control + hjkl -&gt; 方向按键<br>修改 shift -&gt; 切换输入法<br>修改 shift + shift vscode 下 -&gt; command + p</p><script src="https://gist.github.com/suxin2017/5d1285d9f738e71c2228ade05ee6773a.js"></script>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>koa动态中间件</title>
      <link href="/2021/05/09/koa-dong-tai-zhong-jian-jian/"/>
      <url>/2021/05/09/koa-dong-tai-zhong-jian-jian/</url>
      
        <content type="html"><![CDATA[<p>koa 动态加载删除中间件。</p><p>当我们建立一个具有插件机制的应用的时候需要动态管理中间件。</p><p>对于koa可以通过下面代码动态管理中间件。</p><pre><code class="hljs"><span class="hljs-comment">// pluginManages.ts</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">Koa</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;koa&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PluginManags</span> &#123;    <span class="hljs-keyword">static</span> <span class="hljs-attr">app</span>: <span class="hljs-title class_">Koa</span>&lt;<span class="hljs-title class_">Koa</span>.<span class="hljs-property">DefaultContext</span>, <span class="hljs-title class_">Koa</span>.<span class="hljs-property">DefaultState</span>&gt;;    <span class="hljs-attr">middlewareList</span>: &#123; <span class="hljs-attr">name</span>: <span class="hljs-built_in">string</span>, <span class="hljs-attr">middleware</span>: <span class="hljs-title class_">Koa</span>.<span class="hljs-property">Middleware</span> &#125;[];    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewareList</span>=[];    &#125;    <span class="hljs-title function_">registMiddleware</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span>, middleware: Koa.Middleware</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewareList</span>.<span class="hljs-title function_">push</span>(&#123;            name,            middleware,        &#125;)        <span class="hljs-title class_">PluginManags</span>.<span class="hljs-property">app</span>.<span class="hljs-property">middleware</span>.<span class="hljs-title function_">push</span>(middleware);    &#125;    <span class="hljs-title function_">removeMiddleware</span>(<span class="hljs-params">name: <span class="hljs-built_in">string</span></span>) &#123;        <span class="hljs-keyword">const</span> middlewareIndex =  <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewareList</span>.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function"><span class="hljs-params">middleware</span>=&gt;</span>middleware.<span class="hljs-property">name</span> === name);        <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewareList</span>.<span class="hljs-title function_">splice</span>(middlewareIndex,<span class="hljs-number">1</span>);        <span class="hljs-title class_">PluginManags</span>.<span class="hljs-property">app</span>.<span class="hljs-property">middleware</span>.<span class="hljs-title function_">splice</span>(middlewareIndex,<span class="hljs-number">1</span>);    &#125;&#125;<span class="hljs-keyword">let</span> <span class="hljs-attr">pluginInstance</span>:<span class="hljs-title class_">PluginManags</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getPluginManages</span>(<span class="hljs-params">app:Koa&lt;Koa.DefaultContext,Koa.DefaultState&gt;</span>)&#123;    <span class="hljs-keyword">if</span>(!pluginInstance)&#123;        <span class="hljs-title class_">PluginManags</span>.<span class="hljs-property">app</span> = app;        pluginInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PluginManags</span>();    &#125;    <span class="hljs-keyword">return</span> pluginInstance &#125;</code></pre><pre><code class="hljs"><span class="hljs-comment">// index.ts</span><span class="hljs-keyword">import</span> <span class="hljs-title class_">Koa</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;koa&#x27;</span>;<span class="hljs-keyword">import</span> &#123; join &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<span class="hljs-keyword">import</span> &#123; getPluginManages &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./pluginManage&#x27;</span>;<span class="hljs-keyword">const</span> port = <span class="hljs-number">3001</span>;<span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<span class="hljs-keyword">const</span> pluginManages = <span class="hljs-title function_">getPluginManages</span>(app);pluginManages.<span class="hljs-title function_">registMiddleware</span>(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-keyword">async</span> (ctx,next)=&gt;&#123;    ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;Hello World&#x27;</span>;    <span class="hljs-title function_">next</span>()&#125;)pluginManages.<span class="hljs-title function_">registMiddleware</span>(<span class="hljs-string">&#x27;dyna&#x27;</span>,<span class="hljs-keyword">async</span> (ctx,next)=&gt;&#123;    ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;动态加载&#x27;</span>    <span class="hljs-title function_">next</span>()&#125;)<span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;    pluginManages.<span class="hljs-title function_">removeMiddleware</span>(<span class="hljs-string">&#x27;dyna&#x27;</span>)&#125;,<span class="hljs-number">1000</span>)app.<span class="hljs-title function_">listen</span>(port,<span class="hljs-function">()=&gt;</span>&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;http://127.0.0.1:&quot;</span>+port)&#125;);</code></pre>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2021/05/09/flex-bu-ju/"/>
      <url>/2021/05/09/flex-bu-ju/</url>
      
        <content type="html"><![CDATA[<p><strong>flex</strong> 布局有 <code>align-self</code> 进行垂直个体布局，但是<code>justify-self</code>只在 <strong>grid</strong> 布局上面生效</p><p>通过查阅资料发现在<strong>flex</strong> 中可以通过 <strong>margin：auto</strong> 的方式实现单个元素的布局;</p><p>实现单个元素相对剩余位置居中布局</p><div id="preview-9" class="preview"><div class="preview-box">    <div id="draw-9">    <div class="flex-box">    <div class="item "></div>    <div class="item flex-item-center">        相对于后面位置居中    </div></div><style>    .flex-box{        display: flex    }    .item{        width: 80px;        height: 80px;        background-color: aquamarine;    }    .flex-item-center{        margin:0 auto;    }</style>    </div>    <div class="preview-box-util">        <span id="expand-9" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-9" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-box&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item flex-item-center&quot;</span>&gt;</span>        相对于后面位置居中    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">    <span class="hljs-selector-class">.flex-box</span>&#123;        <span class="hljs-attribute">display</span>: flex    &#125;    <span class="hljs-selector-class">.item</span>&#123;        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">background-color</span>: aquamarine;    &#125;    <span class="hljs-selector-class">.flex-item-center</span>&#123;        <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> auto;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><script>    const expandCode_9 = document.getElementById('expand-9');    const bindCode_9 = document.getElementById('code-9');    let flag_9 = true;    expandCode_9.onclick = function (){        if(flag_9){            bindCode_9.classList.add('preview-code-active')        }else{            bindCode_9.classList.remove('preview-code-active')         }        flag_9 = !flag_9    }</script></div><div id="preview-10" class="preview"><div class="preview-box">    <div id="draw-10">    <div class="flex-box">    <div class="item "></div>    <div class="item flex-item-right">        相对于空余位居右    </div></div><style>    .flex-box{        display: flex    }    .item{        width: 80px;        height: 80px;        background-color: aquamarine;    }    .flex-item-right{        margin-left:auto;    }</style>    </div>    <div class="preview-box-util">        <span id="expand-10" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-10" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-box&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item flex-item-right&quot;</span>&gt;</span>        相对于空余位居右    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">    <span class="hljs-selector-class">.flex-box</span>&#123;        <span class="hljs-attribute">display</span>: flex    &#125;    <span class="hljs-selector-class">.item</span>&#123;        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">background-color</span>: aquamarine;    &#125;    <span class="hljs-selector-class">.flex-item-right</span>&#123;        <span class="hljs-attribute">margin-left</span>:auto;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><script>    const expandCode_10 = document.getElementById('expand-10');    const bindCode_10 = document.getElementById('code-10');    let flag_10 = true;    expandCode_10.onclick = function (){        if(flag_10){            bindCode_10.classList.add('preview-code-active')        }else{            bindCode_10.classList.remove('preview-code-active')         }        flag_10 = !flag_10    }</script></div><div id="preview-11" class="preview"><div class="preview-box">    <div id="draw-11">    <div class="flex-box">    <div class="item flex-item-right">        flex 居右    </div></div><style>    .flex-box{        display: flex    }    .item{        width: 80px;        height: 80px;        background-color: aquamarine;    }    .flex-item-right{        margin-left:auto;    }</style>    </div>    <div class="preview-box-util">        <span id="expand-11" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-11" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-box&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item flex-item-right&quot;</span>&gt;</span>        flex 居右    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">    <span class="hljs-selector-class">.flex-box</span>&#123;        <span class="hljs-attribute">display</span>: flex    &#125;    <span class="hljs-selector-class">.item</span>&#123;        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">background-color</span>: aquamarine;    &#125;    <span class="hljs-selector-class">.flex-item-right</span>&#123;        <span class="hljs-attribute">margin-left</span>:auto;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><script>    const expandCode_11 = document.getElementById('expand-11');    const bindCode_11 = document.getElementById('code-11');    let flag_11 = true;    expandCode_11.onclick = function (){        if(flag_11){            bindCode_11.classList.add('preview-code-active')        }else{            bindCode_11.classList.remove('preview-code-active')         }        flag_11 = !flag_11    }</script></div><div id="preview-12" class="preview"><div class="preview-box">    <div id="draw-12">    <div class="flex-box">    <div class="item flex-item-center">        flex 居中    </div></div><style>    .flex-box{        display: flex    }    .item{        width: 80px;        height: 80px;        background-color: aquamarine;    }    .flex-item-center{        margin-left:auto;    }</style>    </div>    <div class="preview-box-util">        <span id="expand-12" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-12" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-box&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item flex-item-center&quot;</span>&gt;</span>        flex 居中    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">    <span class="hljs-selector-class">.flex-box</span>&#123;        <span class="hljs-attribute">display</span>: flex    &#125;    <span class="hljs-selector-class">.item</span>&#123;        <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;        <span class="hljs-attribute">background-color</span>: aquamarine;    &#125;    <span class="hljs-selector-class">.flex-item-center</span>&#123;        <span class="hljs-attribute">margin-left</span>:auto;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre></div><script>    const expandCode_12 = document.getElementById('expand-12');    const bindCode_12 = document.getElementById('code-12');    let flag_12 = true;    expandCode_12.onclick = function (){        if(flag_12){            bindCode_12.classList.add('preview-code-active')        }else{            bindCode_12.classList.remove('preview-code-active')         }        flag_12 = !flag_12    }</script></div>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端代码规范</title>
      <link href="/2021/04/29/qian-duan-dai-ma-gui-fan/"/>
      <url>/2021/04/29/qian-duan-dai-ma-gui-fan/</url>
      
        <content type="html"><![CDATA[<p>随着开发累计时长的变长，愈发觉得写得快不是证明编程能力的好坏。</p><p>代码质量也是非常需要注重的，写代码和写作文是一样的。</p><p>所以需要回过头去看看代码怎么写，这个过程本身也是一种代码能力的提升。</p>]]></content>
      
      
      <categories>
          
          <category> weibo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2021/04/27/preview/"/>
      <url>/2021/04/27/preview/</url>
      
        <content type="html"><![CDATA[<div id="preview-0" class="preview"><div class="preview-box">    <div id="draw-0">    请打开console查看结果<script type="module">                    (function(){                        function sayHello(){    console.log('hello')}sayHello()                    })(0)                </script>    </div>    <div class="preview-box-util">        <span id="expand-0" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-0" class="preview-code false"><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)&#125;<span class="hljs-title function_">sayHello</span>()</code></pre></div><script>    const expandCode_0 = document.getElementById('expand-0');    const bindCode_0 = document.getElementById('code-0');    let flag_0 = true;    expandCode_0.onclick = function (){        if(flag_0){            bindCode_0.classList.add('preview-code-active')        }else{            bindCode_0.classList.remove('preview-code-active')         }        flag_0 = !flag_0    }</script></div><div id="preview-1" class="preview"><div class="preview-box">    <div id="draw-1">    <div id="btn">button</div><style>    #btn{        width: 20px;        height: 20px;        background: red;    }</style><script>function btnSayHello(){    console.log('hello btn')}document.getElementById('btn').onclick = btnSayHello</script>    </div>    <div class="preview-box-util">        <span id="expand-1" class="preview-box-util-code" style="background-image:url(/imgs/code.svg)"></span>    </div></div><div id="code-1" class="preview-code false"><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn&quot;</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css">    <span class="hljs-selector-id">#btn</span>&#123;        <span class="hljs-attribute">width</span>: <span class="hljs-number">20px</span>;        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;        <span class="hljs-attribute">background</span>: red;    &#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">btnSayHello</span>(<span class="hljs-params"></span>)&#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello btn&#x27;</span>)&#125;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn&#x27;</span>).<span class="hljs-property">onclick</span> = btnSayHello</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre></div><script>    const expandCode_1 = document.getElementById('expand-1');    const bindCode_1 = document.getElementById('code-1');    let flag_1 = true;    expandCode_1.onclick = function (){        if(flag_1){            bindCode_1.classList.add('preview-code-active')        }else{            bindCode_1.classList.remove('preview-code-active')         }        flag_1 = !flag_1    }</script></div><pre><code class="hljs"><span class="hljs-keyword">type</span> A = <span class="hljs-built_in">string</span>;</code></pre>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解码:redux的奥秘</title>
      <link href="/2021/01/30/jie-ma-redux-mei-xiang-xiang-zhong-de-fu-za/"/>
      <url>/2021/01/30/jie-ma-redux-mei-xiang-xiang-zhong-de-fu-za/</url>
      
        <content type="html"><![CDATA[<h3 id="redux">redux</h3><p>redux 是一个函数式的数据流管理库，但是我一直都不了解其实现原理，之前一直用人家封装好的。</p><p>根据官网大致理解其运行方式是下图这样的。<strong>通过 store dispatch 传入 action 然后经由 reducer 进行数据处理返回新的 state。</strong></p><p><img src="/imgs/redux.png" alt="redux运行方式"></p><p>我觉得这像观察者模式，然后在内部绑定了一个数据。</p><h3 id="验证">验证</h3><p>为了验证我的想法我翻看了 redux 的源码，精简之后他的代码大概是这样的.</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createState</span>(<span class="hljs-params">reducer, initState,</span>)  <span class="hljs-keyword">let</span> currentState = initState;  <span class="hljs-keyword">let</span> currentReducer = reducer;  <span class="hljs-keyword">let</span> currentListeners = [];  <span class="hljs-keyword">let</span> isDispatching = <span class="hljs-literal">false</span>;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">action</span>) &#123;    <span class="hljs-keyword">try</span> &#123;      isDispatching = <span class="hljs-literal">true</span>;      currentState = <span class="hljs-title function_">currentReducer</span>(currentState, action);    &#125; <span class="hljs-keyword">finally</span> &#123;      isDispatching = <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">const</span> listeners = currentListeners;    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> &#123;      <span class="hljs-title function_">listener</span>();    &#125;);  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getCurrentState</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> currentState;  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">subscribe</span>(<span class="hljs-params">listener</span>) &#123;    <span class="hljs-keyword">if</span> (isDispatching) &#123;      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;正在触发事件不能添加新的监听器&quot;</span>);      <span class="hljs-keyword">return</span>;    &#125;    currentListeners.<span class="hljs-title function_">push</span>(listener);    <span class="hljs-keyword">let</span> isSubscribed = <span class="hljs-literal">true</span>;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unSubscribe</span>(<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">if</span> (!isSubscribed) &#123;        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;已经取消过了&quot;</span>);        <span class="hljs-keyword">return</span>;      &#125;      <span class="hljs-keyword">const</span> index = currentListeners.<span class="hljs-title function_">indexOf</span>(listener);      currentListeners.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>);    &#125;;  &#125;  <span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;init&quot;</span> &#125;);  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-attr">getState</span>: getCurrentState,    subscribe,    dispatch,  &#125;;&#125;</code></pre><h2 id="自己动手搞一个">自己动手搞一个</h2><p>跟我想的差不太多</p><p>首先创造一个观察者</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObserver</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">let</span> listeners = [];  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">eventType, data</span>) &#123;    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> &#123;      <span class="hljs-title function_">listener</span>(eventType, data);    &#125;);  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addEventListener</span>(<span class="hljs-params">eventType, listener</span>) &#123;    listeners.<span class="hljs-title function_">push</span>(listener);  &#125;  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-attr">dispatch</span>: dispatch,    addEventListener,  &#125;;&#125;<span class="hljs-keyword">const</span> observer = <span class="hljs-title function_">createObserver</span>();observer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">type, data</span>) =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);&#125;);observer.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-number">1</span>);</code></pre><p>通过创建一个可观察的对象，然后向对象发布事件，调用所有监听事件的方法。</p><p>这就是观察者模式，进一步改造，我们需要一个全局变量作为我们的 state;</p><p>那么在使用的时候需要做这件事。</p><pre><code class="hljs"><span class="hljs-keyword">let</span> state = <span class="hljs-number">0</span>;<span class="hljs-keyword">const</span> observer = <span class="hljs-title function_">createObserver</span>();observer.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">type</span>) =&gt;</span> &#123;  state = state + <span class="hljs-number">1</span>;&#125;);observer.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;add&quot;</span>);</code></pre><p>这样就完成了对 state 的操作，通常情况下，对数据的操作和使用数据通常不在一起。</p><p>为了代码更好的复用，需要提取数据操作的部分作为一个单独的内容，只操作数据。</p><p>并且我们把 state 放到到 createObserver 中，作为 observer 的成员。</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObserver</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-comment">// 全局唯一</span>  <span class="hljs-keyword">let</span> state = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> operateDataFunc = [];  <span class="hljs-comment">// 发送事件</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">eventType, data</span>) &#123;    <span class="hljs-comment">// 操作数据的方法</span>    state = operateDataFunc.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">data, operateFunc</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> <span class="hljs-title function_">operateFunc</span>(data, eventType);    &#125;, state);    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(state);  &#125;  <span class="hljs-comment">// 添加操作数据的方法</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-params">eventType, listener</span>) &#123;    operateDataFunc.<span class="hljs-title function_">push</span>(listener);  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> state;  &#125;  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-attr">getState</span>: getState,    <span class="hljs-attr">dispatch</span>: dispatch,    <span class="hljs-attr">addOperateFunc</span>: addOperateFunc,  &#125;;&#125;<span class="hljs-keyword">const</span> observer = <span class="hljs-title function_">createObserver</span>();observer.<span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> prevState + <span class="hljs-number">1</span>;&#125;);observer.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;add&quot;</span>);</code></pre><p>现在数据操作搞定了，接下来就是数据使用方了，需要对数据进行操作后通知所有的数据使用方，state 数据发生变动。</p><p>继续改造 dispatch 方法</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObserver</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">let</span> state = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> operateDataFunc = [];  <span class="hljs-keyword">let</span> users = [];  <span class="hljs-comment">// 发送事件</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">eventType, data</span>) &#123;    <span class="hljs-comment">// 操作数据的方法</span>    state = operateDataFunc.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">data, operateFunc</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> <span class="hljs-title function_">operateFunc</span>(data, eventType);    &#125;, state);    <span class="hljs-title function_">notifyUser</span>();  &#125;  <span class="hljs-comment">// 添加操作数据的方法</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-params">eventType, listener</span>) &#123;    operateDataFunc.<span class="hljs-title function_">push</span>(listener);  &#125;  <span class="hljs-comment">// 通知使用数据的用户，数据改变了</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">notifyUser</span>(<span class="hljs-params"></span>) &#123;    users.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> <span class="hljs-title function_">user</span>());  &#125;  <span class="hljs-comment">// 添加数据使用者</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params">user</span>) &#123;    users.<span class="hljs-title function_">push</span>(user);  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> state;  &#125;  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-attr">getState</span>: getState,    <span class="hljs-attr">dispatch</span>: dispatch,    <span class="hljs-attr">addOperateFunc</span>: addOperateFunc,    <span class="hljs-attr">addUser</span>: addUser,  &#125;;&#125;<span class="hljs-keyword">const</span> observer = <span class="hljs-title function_">createObserver</span>();observer.<span class="hljs-title function_">addUser</span>(<span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据发生变化&quot;</span>, observer.<span class="hljs-title function_">getState</span>());&#125;);observer.<span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> prevState + <span class="hljs-number">1</span>;&#125;);observer.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;add&quot;</span>);</code></pre><p>ok 到这里 mini-redux 完成一大半了，检验一下</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObserver</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">let</span> state = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> operateDataFunc = &#123;&#125;;  <span class="hljs-keyword">let</span> users = [];  <span class="hljs-comment">// 发送事件</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">eventType, data</span>) &#123;    <span class="hljs-comment">// 操作数据的方法</span>    state = operateDataFunc[eventType].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">data, operateFunc</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> <span class="hljs-title function_">operateFunc</span>(data, eventType);    &#125;, state);    <span class="hljs-title function_">notifyUser</span>();  &#125;  <span class="hljs-comment">// 添加操作数据的方法</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-params">eventType, listener</span>) &#123;    <span class="hljs-keyword">if</span> (!operateDataFunc[eventType]) &#123;      operateDataFunc[eventType] = [];    &#125;    operateDataFunc[eventType].<span class="hljs-title function_">push</span>(listener);  &#125;  <span class="hljs-comment">// 通知使用数据的用户，数据改变了</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">notifyUser</span>(<span class="hljs-params"></span>) &#123;    users.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> <span class="hljs-title function_">user</span>());  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params">user</span>) &#123;    users.<span class="hljs-title function_">push</span>(user);  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> state;  &#125;  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-attr">getState</span>: getState,    <span class="hljs-attr">dispatch</span>: dispatch,    <span class="hljs-attr">addOperateFunc</span>: addOperateFunc,    <span class="hljs-attr">addUser</span>: addUser,  &#125;;&#125;<span class="hljs-keyword">const</span> observer = <span class="hljs-title function_">createObserver</span>();observer.<span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> prevState + <span class="hljs-number">1</span>;&#125;);observer.<span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-string">&quot;subtraction&quot;</span>, <span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> prevState - <span class="hljs-number">1</span>;&#125;);<span class="hljs-keyword">let</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;result&quot;</span>);result.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;result: &quot;</span> + observer.<span class="hljs-title function_">getState</span>();observer.<span class="hljs-title function_">addUser</span>(<span class="hljs-function">() =&gt;</span> &#123;  result.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;result: &quot;</span> + observer.<span class="hljs-title function_">getState</span>();&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;add&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;  observer.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;add&quot;</span>);&#125;;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;subtraction&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;  observer.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&quot;subtraction&quot;</span>);&#125;;</code></pre><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="angelname" data-slug-hash="jOVOQMK" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="observer 模式">  <span>See the Pen <a href="https://codepen.io/angelname/pen/jOVOQMK">  observer 模式</a> by bxer (<a href="https://codepen.io/angelname">@angelname</a>)  on <a href="https://codepen.io">CodePen</a>.</span>  如果你看不到这个演示，说明当前网站不支持 codepen ，可以到 <a href="https://www.suxin.2017.cn">苏鑫的博客</a></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><p>现在完成了无副作用的 redux，函数相同的参数返回值一定是相同的，但是前段经常通过请求来获取数据。</p><p>假设我们对 result 的操作，加 1 或者减 1，来至于服务器。</p><pre><code class="hljs"><span class="hljs-comment">// mock server</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOperate</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt; <span class="hljs-number">0.5</span>) &#123;        <span class="hljs-title function_">r</span>(<span class="hljs-string">&quot;add&quot;</span>);      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-title function_">r</span>(<span class="hljs-string">&quot;subtraction&quot;</span>);      &#125;    &#125;, <span class="hljs-number">500</span>);  &#125;);&#125;</code></pre><p>和同步代码一样，需要添加一个专门存放副作用函数的对象。<br>只需要发送给副作用事件的时候，把 dispatch 传给副作用的处理数据的函数就可以了。</p><p>最终结果</p><pre><code class="hljs"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createObserver</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">let</span> state = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> operateDataFunc = &#123;&#125;;  <span class="hljs-keyword">let</span> users = [];  <span class="hljs-keyword">let</span> effectOperateDataFunc = &#123;&#125;;  <span class="hljs-comment">// 发送事件</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">eventType, data</span>) &#123;    <span class="hljs-comment">// 操作数据的方法</span>    state = operateDataFunc[eventType].<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">data, operateFunc</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> <span class="hljs-title function_">operateFunc</span>(data, eventType);    &#125;, state);    <span class="hljs-title function_">notifyUser</span>();  &#125;  <span class="hljs-comment">// 添加操作数据的方法</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-params">eventType, listener</span>) &#123;    <span class="hljs-keyword">if</span> (!operateDataFunc[eventType]) &#123;      operateDataFunc[eventType] = [];    &#125;    operateDataFunc[eventType].<span class="hljs-title function_">push</span>(listener);  &#125;  <span class="hljs-comment">// 添加存在副作用的函数</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addEffectOperateFunc</span>(<span class="hljs-params">eventType, listener</span>) &#123;    <span class="hljs-keyword">if</span> (!effectOperateDataFunc[eventType]) &#123;      effectOperateDataFunc[eventType] = [];    &#125;    effectOperateDataFunc[eventType].<span class="hljs-title function_">push</span>(listener);  &#125;  <span class="hljs-comment">// 发送给副作用函数的事件</span>  <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatchEffect</span>(<span class="hljs-params">eventType, data</span>) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> operateFunc <span class="hljs-keyword">of</span> effectOperateDataFunc[eventType]) &#123;      <span class="hljs-keyword">await</span> <span class="hljs-title function_">operateFunc</span>(dispatch, state, data, eventType);    &#125;  &#125;  <span class="hljs-comment">// 通知使用数据的用户，数据改变了</span>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">notifyUser</span>(<span class="hljs-params"></span>) &#123;    users.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">user</span>) =&gt;</span> <span class="hljs-title function_">user</span>());  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">addUser</span>(<span class="hljs-params">user</span>) &#123;    users.<span class="hljs-title function_">push</span>(user);  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">getState</span>(<span class="hljs-params"></span>) &#123;    <span class="hljs-keyword">return</span> state;  &#125;  <span class="hljs-keyword">return</span> &#123;    <span class="hljs-attr">getState</span>: getState,    <span class="hljs-attr">dispatch</span>: dispatch,    <span class="hljs-attr">addOperateFunc</span>: addOperateFunc,    <span class="hljs-attr">addUser</span>: addUser,    <span class="hljs-attr">addEffectOperateFunc</span>: addEffectOperateFunc,    <span class="hljs-attr">dispatchEffect</span>: dispatchEffect,  &#125;;&#125;<span class="hljs-keyword">const</span> observer = <span class="hljs-title function_">createObserver</span>();observer.<span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> prevState + <span class="hljs-number">1</span>;&#125;);observer.<span class="hljs-title function_">addOperateFunc</span>(<span class="hljs-string">&quot;subtraction&quot;</span>, <span class="hljs-function">(<span class="hljs-params">prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> prevState - <span class="hljs-number">1</span>;&#125;);observer.<span class="hljs-title function_">addEffectOperateFunc</span>(<span class="hljs-string">&quot;getOpereate&quot;</span>, <span class="hljs-function">(<span class="hljs-params">dispatch, prevState</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> <span class="hljs-title function_">getOperate</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">operateType</span>) =&gt;</span> &#123;    <span class="hljs-title function_">dispatch</span>(operateType);  &#125;);&#125;);<span class="hljs-keyword">let</span> result = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;result&quot;</span>);result.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;result: &quot;</span> + observer.<span class="hljs-title function_">getState</span>();observer.<span class="hljs-title function_">addUser</span>(<span class="hljs-function">() =&gt;</span> &#123;  result.<span class="hljs-property">textContent</span> = <span class="hljs-string">&quot;result: &quot;</span> + observer.<span class="hljs-title function_">getState</span>();&#125;);<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;add&quot;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;  observer.<span class="hljs-title function_">dispatchEffect</span>(<span class="hljs-string">&quot;getOpereate&quot;</span>);&#125;;<span class="hljs-keyword">function</span> <span class="hljs-title function_">getOperate</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">r</span>) =&gt;</span> &#123;    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt; <span class="hljs-number">0.5</span>) &#123;        <span class="hljs-title function_">r</span>(<span class="hljs-string">&quot;add&quot;</span>);      &#125; <span class="hljs-keyword">else</span> &#123;        <span class="hljs-title function_">r</span>(<span class="hljs-string">&quot;subtraction&quot;</span>);      &#125;    &#125;, <span class="hljs-number">500</span>);  &#125;);&#125;</code></pre><p class="codepen" data-height="265" data-theme-id="light" data-default-tab="js,result" data-user="angelname" data-slug-hash="bGBGQvM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="effect 模式">  <span>See the Pen <a href="https://codepen.io/angelname/pen/bGBGQvM">  effect 模式</a> by bxer (<a href="https://codepen.io/angelname">@angelname</a>)  on <a href="https://codepen.io">CodePen</a>.</span>   如果你看不到这个演示，说明当前网站不支持 codepen ，可以到 <a href="https://www.suxin.2017.cn">苏鑫的博客</a></p><script async src="https://cpwebassets.codepen.io/assets/embed/ei.js"></script><p>这样就完成了一个玩具 redux 喽。</p><p>redux 源码中还有一个方式是和 Observables 的 ECMAScript 提案相关的。</p><p>可以有序的处理这种副作用函数的执行，有兴趣可以看看。</p><p><a href="https://ponyfoo.com/articles/observables-coming-to-ecmascript?utm_source=tuicool&amp;utm_medium=referral">observables-coming-to-ecmascript</a></p><p>顺便一提，关于函数式编程，函数式编程是一种思维方式，也许作为前端的你可能没研究过，但是你只要用上了 map，find，reduce，forEach，filter 其实你就已经用上了函数式编程，因为在语言方面就提供了这种 api，还有就是为什么函数式编程现在才流行，因为它慢。如果感兴趣可以留言，我看看要不要写一篇函数式编程的文章。</p><p>我是苏鑫，关注我，带你搞各种各样的小玩具哦。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开源的中间件调度</title>
      <link href="/2021/01/19/kai-yuan-de-zhong-jian-jian-diao-du/"/>
      <url>/2021/01/19/kai-yuan-de-zhong-jian-jian-diao-du/</url>
      
        <content type="html"><![CDATA[<p>当下流行的轮子库，都会提供强大拓展能力。</p><p>通常这种拓展能力以调度中间件或者拦截器的形式存在。</p><p>为了方便下面统称这类拓展程序能力的代码叫做中间件。</p><p>如何能写出一个拓展性强的轮子？</p><p>通过学习开源库的代码来学习如何写一个符合自己轮子的中间件。</p><h2 id="核心概念">核心概念</h2><p>计算机的本质就是进行数据输入和输出，千百年来这个本质一直没有变过，通过中间对数据的处理，获取到想要的数据结果。</p><p><img src="/imgs/%E6%95%B0%E6%8D%AE%E6%B5%81.png" alt="数据输入与输出"></p><p>比如传入的数据可能是 <code>&#123;a:'hello'&#125;</code> 通过中间件的层层作用，就可能变成 <code>&#123;a:'h_e_l_l_o'&#125;</code></p><p>或者对于<code>koa</code>的``context`提供访问数据库的能力。</p><p>这些都是对中间过程进行了拓展，掌握中间件的思维方式能够让我们的程序可拓展性更强。</p><p>下面将介绍以下两种中间件。</p><ul><li>直接对核心对象或者数据进行拓展。</li><li>中间件去控制下一个中间件的执行（洋葱模型）。</li></ul><h3 id="对于核心数据拓展">对于核心数据拓展</h3><h4 id="axios-拦截器调度机制">axios 拦截器调度机制</h4><p>axios 拦截器就是典型的修改数据的中间件</p><p>它的拦截器对请求前的数据和请求后的数据分别做了处理。</p><p>来看看下面的代码吧。</p><pre><code class="hljs"><span class="hljs-comment">// 为了方便讲解摘取其核心逻辑</span><span class="hljs-comment">// 具体代码位置</span><span class="hljs-comment">// https://github.com/axios/axios/blob/master/lib/core/Axios.js#L27</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span>(<span class="hljs-params">config</span>) &#123;  <span class="hljs-comment">// 初始化中间件，dispatchRequest 就是把 request -&gt; response的过程</span>  <span class="hljs-comment">// 通过调用 xhr 或者 node 的http 把请求数据变更为 response</span>  <span class="hljs-keyword">var</span> chain = [dispatchRequest, <span class="hljs-literal">undefined</span>];  <span class="hljs-keyword">var</span> promise = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(config);  <span class="hljs-comment">// 把 request 的拦截器，插入到 chain 队头，把 response 的拦截器插入到队尾</span>  <span class="hljs-comment">// 最后生成这样的数组 [requestInterceptor,...., dispatchRequest , .... responseInterceptor]</span>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">unshiftRequestInterceptors</span>(<span class="hljs-params">    interceptor  </span>) &#123;    chain.<span class="hljs-title function_">unshift</span>(interceptor.<span class="hljs-property">fulfilled</span>, interceptor.<span class="hljs-property">rejected</span>);  &#125;);  <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">pushResponseInterceptors</span>(<span class="hljs-params">    interceptor  </span>) &#123;    chain.<span class="hljs-title function_">push</span>(interceptor.<span class="hljs-property">fulfilled</span>, interceptor.<span class="hljs-property">rejected</span>);  &#125;);  <span class="hljs-comment">// 从 requestInterceptor 执行到 responseInterceptor</span>  <span class="hljs-keyword">while</span> (chain.<span class="hljs-property">length</span>) &#123;    promise = promise.<span class="hljs-title function_">then</span>(chain.<span class="hljs-title function_">shift</span>(), chain.<span class="hljs-title function_">shift</span>());  &#125;  <span class="hljs-keyword">return</span> promise;&#125;</code></pre><p>图解执行流程</p><p><img src="/imgs/axios%E6%8B%A6%E6%88%AA%E5%99%A8.png" alt="axios 拦截器执行"></p><p>可以看出 axios 的中间件机制，是通过处理 request config 的数据，（可以修改所有的请求类型为 post，为所以的请求添加请求前缀，还可以根据请求配置设置全局 spinning）修改返回的 response 数据 （可以完成请求的数据 mock，变更字段名等）完成的。</p><p>当到用户手中的时候，经历层层中间件对数据的处理。</p><p>我们再来看看下一个针对数据进行拓展的开源库。</p><h4 id="markdown-it-的中间件调度机制">markdown-it 的中间件调度机制</h4><p>markdown-it 的中间件相对于 axios 不那么相同，它具备认领机制，如果当前中间件对数据进行认领就代表当下的数据归这个中间件进行处理，进而跳过其他中间件的处理。相同点是把所有的中间件注册一个数组中。</p><p>我们了解 markdown-it 的中间件，我们无需详细了解 markdown-it 的 token 是怎么工作的，我们只需要知道 token 会渲染成不同的 html 标签就可以。</p><p>markdown-it 对文本进行 行 处理，对每行文本都会对中间件数组进行遍历，比如 遇见 <code>## </code> 会被 heading 中间件进行处理，然后 heading 对这个<code>#</code>进行认领，并返回 <code>true</code> ，其他数组就不会处理这行文字了。</p><p><img src="/imgs/markdown-it%E6%8B%93%E5%B1%95.png" alt="markdown-it 中间件"></p><pre><code class="hljs"><span class="hljs-comment">//https://github.com/markdown-it/markdown-it/blob/master/lib/parser_block.js#L48</span><span class="hljs-comment">// Generate tokens for input range</span><span class="hljs-title class_">ParserBlock</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">tokenize</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">state, startLine, endLine</span>) &#123; <span class="hljs-keyword">var</span> ok, i,     rules = <span class="hljs-variable language_">this</span>.<span class="hljs-property">ruler</span>.<span class="hljs-title function_">getRules</span>(<span class="hljs-string">&#x27;&#x27;</span>),     len = rules.<span class="hljs-property">length</span>,     line = startLine, <span class="hljs-keyword">while</span> (line &lt; endLine) &#123;   <span class="hljs-keyword">if</span> (line &gt;= endLine) &#123; <span class="hljs-keyword">break</span>; &#125;   <span class="hljs-comment">// 每行都会重复遍历所有规则，如果规则认领，就会跳过其他规则处理。</span>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;     ok = rules[i](state, line, endLine, <span class="hljs-literal">false</span>);     <span class="hljs-comment">// 当规则返回true的时候，会跳过其他规则</span>     <span class="hljs-keyword">if</span> (ok) &#123; <span class="hljs-keyword">break</span>; &#125;   &#125;   <span class="hljs-comment">// 对line操作不当可能会导致死循环。</span>   line = state.<span class="hljs-property">line</span>; &#125;&#125;;</code></pre><p>通过上面的展示可以看出我们对于数据的拓展，都是传入核心数据，对核心数据进行增删改查操作。</p><p>这种主要针对数据做处理的方式可以应用在：请求库、文本处理库（编译模板的插件），图片处理库（可以对图片上传前文件信息水印处理等偏重于数据处理的轮子上。</p><h3 id="中间件实战">中间件实战</h3><p>了解了这些我们可以用一行代码写出我们自己的中间件拓展。</p><p>首先我们知道我们的输入是一个数据，中间经过层层过滤，下一个中间件的输入是上一个中间件的输出。</p><p>js 中的 reduce 是一个会接受前面输入产生新的输出的函数，我们可以用它做中间件调度的载体，设置初始数据，遍历每个中间件对数据进行处理。</p><p>有了这个思路之后代码就浮现在脑子里了。大家来看。</p><pre><code class="hljs"><span class="hljs-keyword">const</span> middleware = [<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>v+<span class="hljs-number">1</span>,<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>v+<span class="hljs-number">2</span>,<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>(&#123;<span class="hljs-attr">message</span>:<span class="hljs-string">`v 的值是 <span class="hljs-subst">$&#123;v&#125;</span>)`</span>&#125;)]<span class="hljs-keyword">const</span> result = middleware.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">res,fn</span>)=&gt;</span><span class="hljs-title function_">fn</span>(res),<span class="hljs-number">0</span>);<span class="hljs-comment">// output</span><span class="hljs-comment">// &#123;message: &quot;v 的值是 3&quot;&#125;</span></code></pre><p>通过 reduce 我们快速的实现了对于数据处理了中间件拓展功能，其核心思想就是<strong>中间件对层层数据进行操作，最后输出想要的结果。</strong></p><h2 id="中间件去控制下一个中间件的执行">中间件去控制下一个中间件的执行</h2><p>这种中间件通过调用下一个中间件进行拓展，是否放过当前请求到下一个中间件，取决于当前的中间件是否通过 next 方法调用下一个中间件。</p><p>koa 就是这样实现其中间件的，对于 node 的 http 进行拓展，对全局对象 context 进行拓展，挂载其他常用对象（request，response）到全局对象上，我们也可以通过这种方式把日志对象和数据库对象挂载到全局对象中进行对 koa 功能的拓展。</p><h3 id="koa-中间件的调度机制">koa 中间件的调度机制</h3><p>那么他是怎么做到的呢？</p><p><img src="/imgs/koa%E6%89%A7%E8%A1%8C.png" alt="koa中间件调度"></p><p>从图中可以看到只有调用 next 才会调用下一个中间件对数据进行处理，如果不调用那么就不会请求下一个中间件的执行。</p><p>但是这种方式也是存在缺点的，因为这样套娃的方式调用，会影响垃圾回收，因为下一个<code>next</code>不执行完毕就不会释放<code>next()</code> 之前的代码</p><p>最后来看它的代码吧</p><pre><code class="hljs"><span class="hljs-comment">// https://github.com/koajs/compose/blob/master/index.js#L19</span><span class="hljs-comment">// 首先传入中间件数组 [middleware...]</span><span class="hljs-keyword">function</span> <span class="hljs-title function_">compose</span>(<span class="hljs-params">middleware</span>) &#123;  <span class="hljs-comment">// 返回一个新的方法，调用这个方法就会执行所有中间件。</span>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">context, next</span>) &#123;    <span class="hljs-comment">// last called middleware #</span>    <span class="hljs-keyword">let</span> index = -<span class="hljs-number">1</span>;    <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-number">0</span>);    <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">i</span>) &#123;      <span class="hljs-comment">// 如果一个中间件内调用 next 多次就会导致多次 i+1</span>      <span class="hljs-keyword">if</span> (i &lt;= index)        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;next() called multiple times&quot;</span>));      index = i;      <span class="hljs-comment">// 当前中间件</span>      <span class="hljs-keyword">let</span> fn = middleware[i];      <span class="hljs-comment">// 如果是中间件遍历到了最后一个</span>      <span class="hljs-keyword">if</span> (i === middleware.<span class="hljs-property">length</span>) fn = next;      <span class="hljs-comment">// 最后的next</span>      <span class="hljs-keyword">if</span> (!fn) <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();      <span class="hljs-keyword">try</span> &#123;        <span class="hljs-comment">// 调用当前中间件，并传入context和下一个中间件</span>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">fn</span>(context, dispatch.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, i + <span class="hljs-number">1</span>)));      &#125; <span class="hljs-keyword">catch</span> (err) &#123;        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err);      &#125;    &#125;  &#125;;&#125;<span class="hljs-comment">// 使用</span><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>) &#123;  <span class="hljs-keyword">const</span> middleware = [    <span class="hljs-function">(<span class="hljs-params">c, n</span>) =&gt;</span> &#123;      c.<span class="hljs-property">v</span> += <span class="hljs-number">1</span>;      <span class="hljs-keyword">return</span> <span class="hljs-title function_">n</span>();    &#125;,    <span class="hljs-function">(<span class="hljs-params">c, n</span>) =&gt;</span> &#123;      c.<span class="hljs-property">v</span> += <span class="hljs-number">2</span>;      <span class="hljs-keyword">return</span> <span class="hljs-title function_">n</span>();    &#125;,    <span class="hljs-function">(<span class="hljs-params">c, n</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">`v 的值是 <span class="hljs-subst">$&#123;c.v&#125;</span>`</span> &#125;;    &#125;,  ];  <span class="hljs-keyword">const</span> start = <span class="hljs-title function_">compose</span>(middleware);  <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">start</span>(&#123; <span class="hljs-attr">v</span>: <span class="hljs-number">0</span> &#125;);  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);&#125;<span class="hljs-title function_">demo</span>();</code></pre><p>上面就是现在流行的三个开源库对于中间件的写法喽，你学会了吗？</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 架构设计 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一种新的编写css思维</title>
      <link href="/2021/01/09/yi-chong-xin-de-bian-xie-css-si-wei/"/>
      <url>/2021/01/09/yi-chong-xin-de-bian-xie-css-si-wei/</url>
      
        <content type="html"><![CDATA[<p>每个前端开发者都经常根据业务的进行写着大量重复的 css 样式，写时一时爽，维护火葬场。</p><p>随着业务的发展，css 代码会变得越来越多越来越难以维护。</p><p>经常会出现 important 强行改变 css 的样式，这样做的唯一好处就是能够符合当前业务需求，但是自己挖的坑，可能是别人哭爹骂娘跪着填上的，而这一切仅仅是因为大量重复的垃圾代码。</p><h2 id="css-魔法数字">css 魔法数字</h2><p>在代码重构中有一点就是减少你代码中的魔法数字。</p><p>我们在写 css 的时候经常会写</p><pre><code class="hljs"><span class="hljs-selector-tag">body</span> &#123;  <span class="hljs-comment">/** 经常使用#fff的人会知道这是白色，     ** 那么换个颜色呢 #A855F7      ** 这个是紫色      **/</span>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;  <span class="hljs-comment">/** 又或者这种4px，4px 到底代表什么，我需要全局搜索改变所有的4px吗     **/</span>  <span class="hljs-attribute">border</span>-raduis: <span class="hljs-number">4px</span>;&#125;</code></pre><p>这样的代码我们一遍又一遍地 <code>style</code> 标签里面书写，增大我们 css 文件的体积。</p><h2 id="css-框架">css 框架</h2><p>前端 css 框架有很多，以比较流行的<strong>Bootstrap</strong>来举例。</p><p>Bootstrap 提供了 布局、组件、工具样式类，他们用来搭建 Bootstrap 风格的网站很好用，但是如果定制化的时候，他们太重了，一切变得不那么灵活。</p><p>当我们要定制一个自己风格的样式的时候需要做大量的样式阅读，以防不小心影响其他组件，极其难以维护。</p><p>这一切来自于 css 代码的副作用（各种 css 权重之间的影响)</p><p>是时候在灵活性和快速使用之间做抉择了。</p><p>如果你喜欢开箱即用，当前一定使用了一个组件库，如果你想从头搭建一套高可用并且容易维护的组件库或者网站，那么应该尝试一下 tailwindcss 了。</p><h3 id="tailwindcss">tailwindcss</h3><blockquote><p>用组合的方式去编辑你的样式代码</p></blockquote><p><strong>tailwindcss</strong> 提供了各种样式的工具类，从布局，间距，大小，文字，颜色每个都提供了工具类。</p><p>有了这些工具类，我们可以尽情地组合样式。</p><h4 id="组件化开发">组件化开发</h4><p>正如前端的发展，每一个前端框架都提供着组件化的开发模式，不提倡组件间继承，而是通过组合的方式去开发维护组件。</p><p>那么 html 的样式也应该如此，换种方式去编写你的代码吧。</p><pre><code class="hljs">// 正常代码<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;card&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"><span class="hljs-selector-class">.card</span> &#123;    <span class="hljs-attribute">border</span>-radiux: <span class="hljs-number">0.25rem</span>;    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#0000</span>, <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">#0000</span>, <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">3px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>), <span class="hljs-number">0</span> <span class="hljs-number">1px</span> <span class="hljs-number">2px</span> <span class="hljs-number">0</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.06</span>);&#125;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><pre><code class="hljs"><span class="hljs-comment">// tailwindcss</span>&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">rounded</span> <span class="hljs-symbol">shadow</span>&quot;&gt;&lt;/<span class="hljs-symbol">div</span>&gt;</code></pre><p>两份代码同样实现了一个这样的卡片，第一种写法如果我要修改圆角我会增加或者减少 rem 的值，但是下面的写法我只需修改一个更加语义化的类名即可。</p><p><img src="/imgs/card.png" alt="字体的查找"></p><p>再也不用想如何定义我的类名了<code>card-title</code> <code>card-head-title</code> <code>card-body-content</code>，只要定义好我的组件名就可以在 react 中,配合 classnames 更是能让外层直接通过类去改变组件样式，拓展性变得更强大，更加灵活。</p><h2 id="总结">总结</h2><p>tailwindcss 是一个强大的 css 工具类库，能够让我们编写更加灵活的，易于复用的样式代码，优化无用样式，减少 css 文件体积，方便拓展。</p><p>当然任何事物都有好的和坏的一面，tailwindcss 不好的点在于，虽然 css 文件体积缩小，但是 html 中存在大量的类名，而且各种缩写需要一定时间熟悉。</p><p>什么时候应该用 tailwindcss 呢？ 如果你厌烦了无时无刻重复编写 css 代码，如果你想要自己的网站或者组件更加灵活，tailwindcss 值得一试。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tailwindcss </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年，我对人生的感悟</title>
      <link href="/2021/01/01/2020-zong-jie/"/>
      <url>/2021/01/01/2020-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="2020年的不平凡">2020年的不平凡</h2><h3 id="错过了回家那趟火车">错过了回家那趟火车</h3><p>2020年从2019年的春节开始，就似乎注定不那么平凡。</p><p>我错过了回家的火车，那时候疫情初现，事情的一切仿佛不是那么清晰。</p><p>我在做好严密的保护工作下，拿着我的行李箱，伴随着行李箱摩擦地面的低吼声，去往火车站。</p><p>正当我坐地铁到火车站行程的一半的时候，看着地铁的到站灯，偶然间我又重新看了以下我的火车信息，我发现我的已经错过我的火车一整天。</p><p>在这之前我是多么理想化的想着我回家的旅程多么顺利，但现实的回家的过程好像《人在囧途》。</p><p>先是通过qq搜群找到了回家的拼车群，那时候心慌手颤，然后拼车群的大哥还忽悠我到了拼车地点就能出发，等我到了却那里原来一车人还没凑齐。</p><p>勉勉强强天快黑的时候应该是4-5点，人终于凑齐了，我也在寒冷的街头站了大半天，身上冷的不行，也许这是对我马虎的惩罚吧。</p><p><strong>人生就是这样，没什么是预料之中，充满无尽或好或坏</strong></p><p>和一车奇奇怪怪的人挤在一起，一个看起来很社会穿貂的养猫男，一家子来京看病的，还有一个司机的朋友，车子很挤，挤得人动弹不得，就这样我挤了4个多小时，到了晚上才到了家，我记得那一晚，空气很冷，有雾。</p><p>曾以为这种乌龙事件会离我很远，因为我前些天还嘲笑朋友抢到的火车票是相反方向的，今日我就完美错过了我的火车。</p><p><strong>那些看似离你很远的事情，有时候会突然来到你的身边，这操蛋的命运啊</strong></p><h3 id="隔离的黑暗">隔离的黑暗</h3><p>疫情期间的小插曲<strong>隔离</strong>，回京我被隔离了，14天里我没出过我的屋子，我问公寓前台我吃饭怎么办啊，她说让我朋友给我买好了。</p><p>所以我吃的东西都是朋友从超市给我买的零食，这14天大概是我最黑暗的时光了。</p><p>后来我发现别人都可以定外卖，那个前台只是知道我有个朋友在这里住，所以不让我定外卖，这样她就不用接触我了，让我朋友承担这个危险的责任，世间险恶啊。</p><p>房子里面有窗户，但是只能打开一条缝隙，每天的光源仅仅是几个低度数的led灯。那时候一整天都觉得外面是黑色的，屋里是黑色的，心里也是。</p><p>我觉得那段期间我特别怕黑，房间不大，可用大概有10多平，虽然有网有电视，但是谁说的有网能过一辈子，反正我亲身体验，结果是<strong>不能</strong>，如果没有清新的空气，没有阳光，时间一长了你会憋疯。</p><p>从那时候发誓我下一个房子一定要带窗户。</p><p><strong>人生总是充满苦难，熬过去就好了，熬不过去就死了</strong></p><h2 id="2020年的转机">2020年的转机</h2><p>2020年也不完全是苦难的一年，上半年我的收入微薄，我很快面临一个社会给我出的难题。<strong>买房</strong>。</p><p>凭我那时候的月薪我根本买不起房，我本不想离职，因为人一旦熟悉了一个环境就不想动，从新建立一个新的社交圈需要时间的打磨才行，我讨厌破圈。</p><p>那时候我的业余时间很多，可以做很多我喜欢的事,比如那时候我自己写了一套组件库（<a href="https://suxin2017.github.io/bxer-ui/">bxer-ui</a>），还给umi-request提了一个<a href="https://github.com/umijs/umi-request/pull/90">提交</a>，对于一个刚毕业半年来说的我也算是充满挑战的了。</p><p>没办法，我不跳槽我就买不起房，虽然跳了也买不起，但是可以缩短这个过程的时间。</p><p>我开始进行这场战役的战前准备了，设置战略，从农村包围城市，从小公司积累经验，然后在面大厂，老实讲在面试前，我没面试过前端职业，因为我进入公司的身份是java开发。</p><p>我发现我又天真了，小厂战役虽然全胜（谈钱就蹦，技术全过），但是我根本没资格面试大厂，因为一没资质过浅，二没好的学校背景，投递给大厂的简历仿佛沉入死海一般。</p><p>不过从战略上来讲农村包围城市是成功的，<strong>机会总是留给有准备的人</strong>，虽然大厂没有回音，但是天并没有杀了我，终于有一家大厂hr给我发面试邀请，我一度以为那是个骗子，直到面试前。</p><p>我前面的战略在这时一下子就变得意义非凡，我已经不惧怕面试了，我顺利通过了面试进入了大厂，薪资翻倍。</p><p><strong>生死有命，富贵在天</strong></p><h2 id="2020年的成就">2020年的成就</h2><p>进入大厂后，我并没有就此泄气，对于技术的追求我依然快马加鞭，在公司内网发布多篇文章。</p><p>不仅仅是这样，我搭建起自己的站点（<a href="https://www.suxin2017.cc">suxin2017.cc</a>），买服务器，域名，备案。</p><p>大概三个月的时间，我发布了10篇文章在博客上，今年应该写了得有<strong>20 - 30</strong>多篇文章吧</p><p>还搞出了一套文章编写的工作流，因为我的文章可能会发布到掘金，公众号。</p><p>通过有道云存贮文章，然后对于支持markdown的网站直接用markdown。 不支持的通过自己写的<a href="https://suxin2017.github.io/markdown-website/com/">马克在线排版</a>复制文章，粘贴到网站的富文本编辑器中实现文章快速同步，比如微信公众号，头条号。</p><p>周末没事干还搞了一个<a href="https://suxin2017.github.io/gradient-online/">渐变色代码生成</a>的在线小工具。</p><p>还在头条号完成兴趣认证。</p><p>上面的这一切都是我想做的，什么都不涂只是图个爱好，那时候的我想成为一名技术匠人。</p><p><strong>别人笑我太疯癫，我笑他人看不穿</strong></p><h2 id="2020年的认识">2020年的认识</h2><p>昨天（ 元旦前一天 ）我发现我现在在几年内能付起房的首付了，但是我依旧面临的还是没钱的问题，因为还得装修，后面结婚什么的各种花钱。</p><p>也许有人疑问你为什么不靠长辈啊，我这人从小就不会把靠别人当成我自己计划的一部分，别人叫解耦，我这叫 0 依赖，不过这样的后果就是活的累。</p><p>于是我2021的关键词变成了，健康、自律、赚钱，不在有兴趣了，因为兴趣固然重要，但是现阶段现实的社会教育我的是向钱看。</p><p>记得大学的时候，写个小工具，小爬虫自己开心的不得了，不过和别人炫耀别人也不叼我，但是自己真的很开心，也还好我时至今日还没忘记我对于热爱计算机的初心。</p><p>当前的现实是我为了可持续的发展，我必须要放弃些什么，我不能一如既往再搞自己喜欢的，我要在社会上活下去。</p><p>人生就是这样无限的挑战，无限的选择，2021年的我面对人生依旧乐观，2021年的我不再是中二，2021年的再健康的前提下依旧会热爱技术。</p><p>我是苏鑫，2020年让我成长。</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021关键字</title>
      <link href="/2021/01/01/2021-guan-jian-zi/"/>
      <url>/2021/01/01/2021-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="健康，自律">健康，自律</h2><p>本来以为进入大厂能够解决社会给我的经济压力，没想到只是缓解了我的社会压力，缩短了我承担社会压力的时间，然后却面临着高强度工作时间，高压下的身体健康成为了我唯一的资本。</p><p>我一直觉得自律和健康是放在一起的，因为自律能带来健康，我需要保持健康的同时，创造经济价值。</p><p>一定要控制住玩手机的时间，上班时间一定要定时休息眼睛，无论需求多忙，无论在干啥，因为身上的担子太重了，所以我不能出现问题。</p><p>所以大概率我要像机器人一样生活，设置好每天应该干什么要干什么，让效率最大化，</p><h2 id="挣钱">挣钱</h2><p>能不能搞点挣钱的副业呢？之前搞什么都是想自己开心就好，然而今年发现自己开心并不是那么重要，挣钱才是最重要的。</p><p>首先应该做到以下几点，朋友圈闭流，重心偏移头条掘金，这些头部流量的网站，具体做法，技术相关存在深度的文章投放掘金，技术相关科普介绍的文章投到头条，然后收集到博客和公众号，博客和公众号只是搜集作用。</p><h2 id="总结">总结</h2><p>保持健康，坚持自律，从新规划文章写作布局，最好实现文章收益，将是2021年主要要做的事情。当然这些都是搞好本职工作的前提下做的。</p>]]></content>
      
      
      <categories>
          
          <category> 人生 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 新年愿景 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于next的全栈开发框架Blitz</title>
      <link href="/2020/12/27/ji-yu-next-de-quan-zhan-kai-fa-kuang-jia-blitz/"/>
      <url>/2020/12/27/ji-yu-next-de-quan-zhan-kai-fa-kuang-jia-blitz/</url>
      
        <content type="html"><![CDATA[<h3 id="目的">目的</h3><p>自从前端和后端分离之后，一个产品的实践好像变的不那么容易，因为你必须要找一个懂后端的人，通常是java PHP，这意味开发成本加大。</p><p>不过有人可能会说我能力强，node性能太垃圾，然而产品初期最关键的是快速验证想法的可行性（现在觉得vue在这方面做的比react更好）。但是在两个语言之间切换编程总是很别扭。</p><p>再谈ssr，刚开始一直不知道什么是ssr，因为想django,egg都会提供一个默认模版解析的模块，用来动态生成网页。</p><p>并且随着前端SPA崛起，更多的渲染逻辑都放在了客户端，就有了CSR（客户端渲染）。</p><p>让从现在开始直接写前端的人对ssr感到陌生。</p><p>SSR说白了就是在服务器端编译好静态页面，然后发送到客户端。</p><p>CSR的优点是跟视图相关的操作一股脑的放在了前端。</p><ul><li>优点<ul><li>页面切换不会打断用户体验，后面页面的变更也是通过数据更改视图，提高页面渲染速度。</li></ul></li><li>缺点<ul><li>没有了首页加载，也就是用户首次加载会很慢，出现长时间白屏等现象，对于seo不够友好。</li></ul></li></ul><p>纯粹的SSR的优点是对于seo友好，页面快速加载，这方面可以查看hero 生成博客。</p><ul><li>优点<ul><li>页面首次渲染快，对于seo友好</li></ul></li><li>缺点<ul><li>页面内容每次都需要全量变更，用户体验不好。</li></ul></li></ul><p><strong>那么现在流行的ssr的策略则是，首次加载ssr，后面的加载通过csr请求数据，部分变更完成。</strong></p><p><img src="/imgs/drawio1.png" alt="渲染过程"></p><h3 id="React-SSR-框架-NEXT">React SSR 框架 NEXT</h3><p>NEXT 提供了上面的首次加载SSR后面CSR的解决方案，并通过约定路由，混合SSG（构建时生成）和SSR（服务端渲染）等功能增强用户体验。</p><p>但是NEXT 仅仅是一个SSR解决方案，你可以用它搭建一个对于seo友好的前端页面。针对用户并不完全是全栈开发人员，虽然通过一系列配置改动，也可以做到全栈开发。</p><p>但仍要花费大量时间去寻找流行的orm框架，团队内约束文件目录命名，api开发规范等，还需要接入性能监控，这些虽然都可以做到，但是其实是很重复的工作，而且需要花费大量成本去做好。</p><h3 id="基于NEXT-的全栈开发框架Blitz">基于NEXT 的全栈开发框架Blitz</h3><p>Blitz 基于Next 所以便拥有了Next全部的优点。</p><p>并且默认集成了</p><ul><li>orm（对象关系映射）框架 <strong>prisma</strong></li><li>授权的 passport.js</li><li>一个<a href="https://blitzjs.com/docs/cli-console">可交互的命令行界面</a>，可以交互当前各种api</li><li>一个可视化的数据库网页连接器（不用再找数据库操作软件了）</li></ul><p>文档的开篇介绍便说吸取了 Ruby on Rails （这是一个Ruby的web开发框架，崇尚约定优于配置。）</p><p>通过约定优于配置，就可以做许多的<a href="https://blitzjs.com/docs/cli-generate">自动化生成代码</a>。</p><p>昨晚试水了一下。</p><h4 id="初始化项目">初始化项目</h4><p>首先是安装需要开代理，他会下载github的一些东西，不过生成文件后也可以直接取消，自己通过npm安装依赖,比他的要快。</p><pre><code class="hljs">blitz new <span class="hljs-built_in">test</span>  <span class="hljs-comment">## 生成文件后直接不用他的安装依赖,自己安装</span><span class="hljs-comment">## npm install</span><span class="hljs-comment">## 生成数据库结构</span>blitz db migrate</code></pre><p>然后我们就可以启动服务了</p><pre><code class="hljs"><span class="hljs-comment">## 在localhost:3000就可以看到应用了</span>npm start</code></pre><p><img src="/imgs/homepreview.png" alt="首页图片"></p><h3 id="Blitz-查看数据库">Blitz 查看数据库</h3><p>通常我们经常需要找一个数据库的gui产品来查看我们的数据，但是Blitz自带一个</p><pre><code class="hljs"><span class="hljs-comment">## 看数据库</span>npm run studio</code></pre><p><img src="/imgs/dbpreview.png" alt="数据库预览"></p><h3 id="生成代码">生成代码</h3><p>通过<code> blitz generate</code> 我们可以生成大量模版代码，提高开发效率</p><pre><code class="hljs">blitz <span class="hljs-keyword">generate</span> all project</code></pre><p>生成后需要改下 <code>db/schema.prisma</code></p><p>因为自动生成的模版会带一个name属性，很费解，不过blitz时刻提醒你这是alphe版本，也可以理解。</p><pre><code class="hljs">model Project &#123;  id        <span class="hljs-built_in">Int</span>      <span class="hljs-meta">@default(autoincrement())</span> <span class="hljs-meta">@id</span>  createdAt DateTime <span class="hljs-meta">@default(now())</span>  updatedAt DateTime <span class="hljs-meta">@updatedAt</span>+  name      String?&#125;</code></pre><p>会自动帮我们生成表单组件，列表页面，详情页面等，也可以选择需要生成什么。</p><p>不过暂时没发现如何自定义生成模版，如果有这个表单就会更快。</p><h3 id="总结">总结</h3><p>Blitz 提供了一套开箱即用的全栈开发解决方案，优雅的文件目录约束，让人眼前一亮的交互终端，和数据库操作界面。</p><p>从开发成本上来说，极大的降低了开发人员技术选型的成本，快速进入业务开发阶段。</p><p>降低代码维护成本，通过约束，再也不用担心代码千人千面，不知道代码目录代表的意思了。</p><p>当然也有其不足之处，对于自定义服务支持文档不完善，<a href="http://xn--Render-9b6jq5rd8efb377cmyi71pgnhpt0ionuc.com">支持国外多家部署平台Render.com</a>、Vercel<br>、Heroku,国内服务没有任何支持，不过国内对于前端部署这方面成型的产品好像确实比较少。</p><p>细节地方不够完善比如代码生成的模版代码有点死版，不过官方都说了这是 alpha 版本，也是可以接受的。</p><p>最后，这是一个未来可期的全栈开发框架，而且有 Ruby on Rails 已经对这种想法做了验证，相信后面的完善，也许Node 就此翻盘，小企业可直接用此降低人工成本，对产品进行快速验证，迭代。</p>]]></content>
      
      
      <categories>
          
          <category> 全栈 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next </tag>
            
            <tag> react </tag>
            
            <tag> ts </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的字体文件</title>
      <link href="/2020/12/13/you-qu-de-zi-ti-wen-jian/"/>
      <url>/2020/12/13/you-qu-de-zi-ti-wen-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="字体历史">字体历史</h2><p>话说在计算机市场刚刚开辟的时候，字体市场 Adobe 一家独大，通过贩卖格式认证赚了很多钱，但是苹果想白嫖 Adobe 自然不干。</p><p>于是苹果公司另起炉灶搞起了自己的 TrueType，但是当时已经有了一大批 Adobe 付费用户，自然没必要支持苹果。</p><p>然后苹果拉起了同盟，微软，两人情投意合，眉来眼去一起搞起了字体协议。</p><p>两人联手把 Adobe 搞的不行，目前市场上最常见的就是 TrueType 的字体格式了。这场没有硝烟的战争最后赢在了想白嫖但是没成功的人身上。</p><p>两家分别在自己的字体文档外链对方的文档地址，惺惺相惜。</p><h2 id="TrueType-的字体文件存储格式">TrueType 的字体文件存储格式</h2><p>如果刚看字体文件的官方文档对于很少基础二进制的人来说会有那么一点点陌生。</p><p>首先字体文件是用表进行字体文件描述的。</p><p>按照文档字段约束读取描述文件信息。</p><p>首先我们需要用到的 api 是 DataView，DataView 是一个可以方便读取二进制的对象。</p><p>详情可查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView">MDN DataVuew</a>,浏览器兼容性很好。</p><p>比如对于下面一段字体信息我们应该怎么做</p><pre><code class="hljs">  <span class="hljs-title class_">Offset</span>: <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">02</span> <span class="hljs-number">03</span> <span class="hljs-number">04</span> <span class="hljs-number">05</span> <span class="hljs-number">06</span> <span class="hljs-number">07</span> <span class="hljs-number">08</span> <span class="hljs-number">09</span> 0A 0B 0C 0D 0E 0F<span class="hljs-number">00000000</span>: <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> 0E <span class="hljs-number">00</span> <span class="hljs-number">80</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">00</span> <span class="hljs-number">60</span> 4F <span class="hljs-number">53</span> 2F <span class="hljs-number">32</span>    ...........<span class="hljs-string">`OS/2</span></code></pre><p>对于单个字体的文件</p><p>按照文档约定从文件第 0 位开始的</p><table><thead><tr><th>Type</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>uint32</td><td>sfntVersion</td><td>0x00010000 or 0x4F54544F (‘OTTO’) — see below.</td></tr><tr><td>uint16</td><td>numTables</td><td>Number of tables.</td></tr><tr><td>uint16</td><td>searchRange</td><td>Maximum power of 2 less than or equal to numTables, times 16 ((2<strong>floor(log2(numTables))) * 16, where “</strong>” is an exponentiation operator).</td></tr><tr><td>uint16</td><td>entrySelector</td><td>Log2 of the maximum power of 2 less than or equal to numTables (log2(searchRange/16), which is equal to floor(log2(numTables))).</td></tr><tr><td>uint16</td><td>rangeShift</td><td>numTables times 16, minus searchRange ((numTables * 16) - searchRange).</td></tr></tbody></table><p>所以我们的版本信息读取代码就是</p><pre><code class="hljs"><span class="hljs-comment">// 4 sfntVersuin 2 numTables 2 searchRange 2 entrySelector 2 rangeShift</span><span class="hljs-keyword">const</span> tableDirectory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataView</span>(ttfArrayBuffer, <span class="hljs-number">0</span>, <span class="hljs-number">4</span> + <span class="hljs-number">2</span> + <span class="hljs-number">2</span> + <span class="hljs-number">2</span> + <span class="hljs-number">2</span>);<span class="hljs-keyword">let</span> offset = <span class="hljs-number">0</span>;<span class="hljs-keyword">let</span> sfntVersion = view1.<span class="hljs-title function_">getUint32</span>(offset);offset += <span class="hljs-number">4</span>;<span class="hljs-keyword">let</span> numTables = view1.<span class="hljs-title function_">getUint16</span>(offset);offset += <span class="hljs-number">2</span>;<span class="hljs-keyword">let</span> searchRange = view1.<span class="hljs-title function_">getUint16</span>(offset);offset += <span class="hljs-number">2</span>;<span class="hljs-keyword">let</span> entrySelector = view1.<span class="hljs-title function_">getUint16</span>(offset);offset += <span class="hljs-number">2</span>;<span class="hljs-keyword">let</span> rangeShift = view1.<span class="hljs-title function_">getUint16</span>(offset);</code></pre><p>这样我们就可以读取字体信息了。</p><h2 id="字形的查找">字形的查找</h2><p><img src="/imgs/funnyfont.png" alt="字体的查找"></p><p>对于一个 unicode 我们如何找到它对应的字体形状呢。</p><p>首先字体是以表存储的，每个表都代表不同的信息。</p><p>字体到字形映射是通过 cmap 进行映射的。所以我们需要在 cmap 查找到当前平台对应的子表</p><p>然后通过 cmap 子表不同的 format 规则 gid 字形 id</p><p>获取的 SVG 或者 CFF 或者 glyf 表的位置</p><p>然后就是字体渲染了。</p><p>具体处理逻辑很绕，有兴趣的可以看看一个简单的 font 处理库的源码<a href="https://github.com/photopea/Typr.js/blob/gh-pages/src/Typr.U.js#L61">Typr.U.js#L61</a></p><h2 id="字体文件应用">字体文件应用</h2><h3 id="字体优化">字体优化</h3><p>无论是移动端用户还是 PC 端用户，如果上了字体必然要做字体优化。</p><p>面对一个几 M 大小的字体文件，对于用户可能页面信息看完了，也没记载出来，所以很少有人用网络加载自定义字体。</p><p>不过如果场景固定（文案不会变）我们就能对其进行字体抽离，然后生成新的字体文件，只包含我们需要的，字体文件的大小将大大减少。</p><p>一方面可以将压缩文件上传<code>cdn</code></p><p>另一方面我们可以直接转化成 base64 通过<code>@font-face&#123;url(base64)&#125;</code>去加载</p><h3 id="字体加密">字体加密</h3><p>我们换一种思路，既然屏幕显示是根据 unicode 去查找对应的显示字形。</p><p>比如</p><pre><code class="hljs"><span class="hljs-comment">// 有一个字母A 的unicode 编码是0x41</span><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x41</span> -&gt;</span> A<span class="hljs-comment">// 那么我们修改成</span><span class="hljs-number">0</span><span class="hljs-function"><span class="hljs-title">x7b</span> -&gt;</span> A</code></pre><p>我们提供我们加密后的字体文件，如果他复制粘贴到别的地方就会变成<code>&#123;</code></p><p>这样如果不用我们的字体文件，那么 shi yong fang 使用方就会一脸蒙蔽。</p><blockquote><p>行文仓促,如有纰漏，欢迎指出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> font </tag>
            
            <tag> ttf </tag>
            
            <tag> TrueType </tag>
            
            <tag> OpenType </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github工作流到github page</title>
      <link href="/2020/12/12/github-gong-zuo-liu-dao-github-page/"/>
      <url>/2020/12/12/github-gong-zuo-liu-dao-github-page/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大家应该都知道 github 是一个白嫖党的福利地，加上它的 GitHub Pages 简直是前端白嫖的圣地</p></blockquote><h2 id="使用方法">使用方法</h2><p>在项目根目录创建</p><p>.github/workflows/node.js.ynl</p><p>把下面的内容粘贴进入就可以快速构建部署到 GitHub Pages</p><h2 id="献上小弟的一份白嫖-workflow-文件">献上小弟的一份白嫖 workflow 文件</h2><pre><code class="hljs"><span class="hljs-attr">name:</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">CI</span><span class="hljs-attr">on:</span>  <span class="hljs-comment">## 触发时机</span>  <span class="hljs-attr">push:</span>    <span class="hljs-comment">## 分支，git新建项目新的项目默认是main，老得是master</span>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]  <span class="hljs-attr">pull_request:</span>    <span class="hljs-attr">branches:</span> [<span class="hljs-string">main</span>]<span class="hljs-attr">jobs:</span>  <span class="hljs-attr">build:</span>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <span class="hljs-attr">strategy:</span>      <span class="hljs-attr">matrix:</span>        <span class="hljs-attr">node-version:</span> [<span class="hljs-number">12.</span><span class="hljs-string">x</span>]    <span class="hljs-attr">steps:</span>      <span class="hljs-comment">## 切换分支</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span> <span class="hljs-string">$&#123;&#123; matrix.node-version &#125;&#125;</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span>        <span class="hljs-attr">with:</span>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">$&#123;&#123; matrix.node-version &#125;&#125;</span>      <span class="hljs-comment">## 执行脚本</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span>        <span class="hljs-attr">uses:</span> <span class="hljs-string">crazy-max/ghaction-github-pages@v2.1.1</span>        <span class="hljs-attr">with:</span>          <span class="hljs-comment">## 构建生成的目录</span>          <span class="hljs-attr">build_dir:</span> <span class="hljs-string">dist</span>        <span class="hljs-attr">env:</span>          <span class="hljs-attr">GITHUB_TOKEN:</span> <span class="hljs-string">$&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> ci </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火狐开发者版 source map 不好使</title>
      <link href="/2020/12/11/bu-hao-shi/"/>
      <url>/2020/12/11/bu-hao-shi/</url>
      
        <content type="html"><![CDATA[<p>报错</p><p>SyntaxError: JSON.parse: unexpected character at line 1 column 1 of the JSON data</p><p><img src="https://mdn.mozillademos.org/files/15425/missing-field.png" alt="image"></p><p>设置 about:config</p><p>devtools.source-map.locations.enabled</p><p>为 true</p><p>具体原因 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1365579">https://bugzilla.mozilla.org/show_bug.cgi?id=1365579</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火狐浏览器空的iframe操作dom不好使</title>
      <link href="/2020/12/11/huo-hu-liu-lan-qi-kong-de-iframe-cao-zuo-dom-bu-hao-shi/"/>
      <url>/2020/12/11/huo-hu-liu-lan-qi-kong-de-iframe-cao-zuo-dom-bu-hao-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="如果向一个空的-iframe-直接执行">如果向一个空的 iframe 直接执行</h3><pre><code class="hljs">document.append<span class="hljs-constructor">Child(<span class="hljs-params">document</span>.<span class="hljs-params">createElement</span>(&#x27;<span class="hljs-params">div</span>&#x27;)</span>)</code></pre><p>会不好使,但是页面不会报错，没有警告</p><h3 id="解决方案">解决方案</h3><p>监听 iframe onload 事件<br>再 onload 事件中执行 dom 操作比较安全</p><pre><code class="hljs"><span class="hljs-comment">// win 是 iframe 的引用</span><span class="hljs-keyword">const</span> root = win.<span class="hljs-property">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);win.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;  win.<span class="hljs-property">document</span>.<span class="hljs-title function_">appendChild</span>(root);&#125;;</code></pre><p>参考链接 <a href="https://stackoverflow.com/questions/3255702/firefox-strange-behaviour-when-working-with-javascript-on-an-iframe">firefox 不好使</a></p><p>然而再 chrome 上 src 是 about:blank 就是不写 src 的 onload 不会被触发</p><p>兼容处理</p><p>检测浏览器版本这里用之前写的 is 库做处理<a href="https://github.com/suxin2017/is/blob/master/src/platform/isFirefox.ts">is everything lib</a></p><p>这个看起来应该算是 chrome 的 bug</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成为最好的程序员的迷茫</title>
      <link href="/2020/12/11/cheng-wei-zui-hao-de-cheng-xu-yuan-de-mi-mang/"/>
      <url>/2020/12/11/cheng-wei-zui-hao-de-cheng-xu-yuan-de-mi-mang/</url>
      
        <content type="html"><![CDATA[<p>去年的 10 月份我写了<a href="https://www.cnblogs.com/qxhn/p/11768333.html#4457893">致迷茫的我</a>，去年的这个时候我就很迷茫。</p><p>似乎一到年底我就很迷茫 :neckbeard:</p><p>不过去年的迷茫是没有方向，不知前方的灯塔在何方，今年的迷茫是虽见迷雾中的亮光，却不知道怎样前行。</p><p>去年心想如果进大厂就好了，今年如愿进入了大厂。</p><p>很高兴从事一个能让我喜欢的职业，我喜欢编程。</p><p>我觉得写代码的时候就好像再玩我的世界一样，成为了这个世界的造物主，每一个细节自己都可创造。</p><p>但是我却不知道如何成为最好的程序员。</p><h2 id="成为最好的程序员的迷茫">成为最好的程序员的迷茫</h2><p>我经常在百度，谷歌知乎搜索这个问题，也时不常的问身边人。</p><p>搜索出的答案很符合程序员的思维<strong>抽象</strong>，太抽象了。</p><p>核心思想就是：多思多想多学习。</p><p>但是却没有一个真正的教程，如何多思多想，去学习什么？</p><p>计算机的世界总比想象中的复杂，眼中看到的知识，就好像天空中落下来的一片雪花，然后雪花却是从冰山上飘落下来的，冰山下面依旧有着庞大的根基。</p><p>今年相比去年，我看了很多的源码。</p><ul><li>看了 axios 的源码学到了拦截器怎么写</li><li>看 umi request 的源码学到了 koa 中间件如何设计。</li><li>看了 webpack 的源码没想到事件处理传递还有这么多种玩法 -看了 bit 源码，了解他如何存储和版本管理</li><li>…</li></ul><p>看了这么多源码的目的只是想成为最好的程序员</p><p>有人说 vim 是大神的必备神器，我大概断断续续的接触 vim 2 年了。</p><p>最开始我只是用他简单的快捷键，<code>g</code> <code>i</code> <code>a</code> <code>c</code></p><p>后来学习到更多的快捷键，现在对于常用的快捷键还算熟悉。</p><p>前一阵子我觉得编辑器中的 vim 插件没有学到 vim 的精髓。</p><p>我就开始研究 vim 的配置、插件，确实 vim 每一个界面上的操作都可以映射成为一个命令，这应该就是 Unix 哲学吧。</p><p>不过我还是放弃了，因为我发现 vim 的代码提示太垃圾了，而且底层用的竟然也是 TSServer 和 vscode 一样，并且其他代码提示遵循<a href="https://microsoft.github.io/language-server-protocol/">LSP</a>的规范，</p><p>甚至有插件(coc)宣传是</p><pre><code class="hljs">configured <span class="hljs-keyword">like</span> VSCode, extensions <span class="hljs-keyword">work</span> <span class="hljs-keyword">like</span> <span class="hljs-keyword">in</span> VSCode</code></pre><p>既然大家都开始像 vscode 学习，说明风口是 vim 的时代已经过去了。</p><p>并且我发现会了 vim 并不能成为最好的程序员，不过 vim 快捷键确实很舒服。</p><p>听说每个优秀的程序员都有自己的博客站点，于是我狠心搞了台服务器，搭建起了自己的博客。</p><p>定期做知识输出，其实写文章也是蛮累的，每次写一篇文章都需要通过代码去论述直观的表现形式。</p><p>不过还好，虽然没定期更新，但是我的文章好像也不少了，意外发现搜索 suxin2017 也能找到我的 github 和博客园。</p><p>虽然代码量随着时间线性增加，书随着时间看的越来越多，但是我仍然还是最初的我，离最好的程序员相差千万里。</p><p>书看的很多，知识其实没记住多少。</p><p>最近看完 opencv 的一本书，基本上代码都敲了一遍，但是自己用的时候还是无从下手，之前的算法，设计模式也是这样。</p><p>于是乎我怀疑我的学习方法存在问题，或者说计算机类图书大多是工具书，就像字典一样的书。</p><p>翻一遍字典不见得能把所有文字记住，常用的还是那 2000-3000 字一样。</p><p>我仍然在做一些没什么意义的事情，不过也不算完全没意义。</p><p>就像我之前在简书、博客园写东西一样，什么也不图，就是想那么做，写出来了就是很有成就感。</p><p>大学时候也是这样乱撞，搞爬虫，搞 js，搞 qq 机器人插件。</p><p>现在我搞博客，搞服务器，搞自己的玩具项目。</p><p>我还是曾经那个少年没有一丝丝改变。:joy:</p><p>但是如何能成为最好的程序员呢？我还是不知道，我还是没有方向，依旧迷茫。</p><p>也许最好的程序员拿着 01 键盘疯狂输出。</p><p>也许最好的程序员随随便便就输出各种设计模式。</p><p>也许最好的程序员可以创造所有轮子。</p><p>也许…有一天我可能成为最好的程序员。</p><p>虽然什么是最好的程序员我说不好，怎么成为最好的程序员我也不知道。</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>当tab不活跃时候怎样搞一个定时器</title>
      <link href="/2020/12/06/dang-tab-bu-huo-yue-shi-hou-de-settimeout/"/>
      <url>/2020/12/06/dang-tab-bu-huo-yue-shi-hou-de-settimeout/</url>
      
        <content type="html"><![CDATA[<blockquote><p>ps: 下面的脚本使用了 script module 请打开原文或者使用非 IE 浏览器浏览</p></blockquote><script  id="common"></script><h2 id="setTimeout-当-tab-不活跃时候">setTimeout 当 tab 不活跃时候</h2><p>当 tab 不活跃的时候，setTimeout 和 setInterval 的运行时间出现延迟</p><p>当未被激活的 tabs 的 setInterval 的最小延迟&gt;=1000ms.浏览器这样做的原因是为了省电.</p><p>点击下面按钮，网页的 document title 会数字相加，闪烁间隔为 500ms,当 tab 切换为其他 tab 的时候就会变慢</p><p><button id="setTimeout" >开启定时器</button></p><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">  <span class="hljs-keyword">let</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;setTimeout&quot;</span>);  <span class="hljs-keyword">let</span> id;  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;  button.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (flag) &#123;      button.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;关闭定时器&quot;</span>;      id = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;count++&#125;</span> setInterval`</span>;      &#125;, <span class="hljs-number">500</span>);      flag = !flag;    &#125; <span class="hljs-keyword">else</span> &#123;      button.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;开启定时器&quot;</span>;      <span class="hljs-built_in">clearInterval</span>(id);      flag = !flag;    &#125;  &#125;;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><script type="module">    let button = document.getElementById("setTimeout");    let id;    let count = 0;    let flag = true;    button.onclick = ()=>{        if(flag){            button.innerText = "关闭定时器"            id = setInterval(()=>{                document.title = `${count++} setInterval`;            },500);            flag = !flag        }else{            button.innerText = "开启定时器"            clearInterval(id);            flag = !flag        }    }</script><h2 id="requrestAnimationFrameAPI-当-tab-不活跃时候">requrestAnimationFrameAPI 当 tab 不活跃时候</h2><p>requrestAnimationFrameAPI 当 tab 不活跃时候，执行会被暂停<br>注意 requrestAnimationFrameAPI 只是能够满足 1 秒 60 帧，所以会和比 setTimeout 慢一些</p><p><button id="requestAnimation">开启 requestAnimation 定时器</button></p><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">  <span class="hljs-keyword">const</span> timerList = &#123;&#125;;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setRafTimeout</span>(<span class="hljs-params">cb, time</span>) &#123;    <span class="hljs-keyword">const</span> timer = &#123;      <span class="hljs-attr">id</span>: -<span class="hljs-number">1</span>,      <span class="hljs-attr">start</span>: -<span class="hljs-number">1</span>,      cb,    &#125;;    <span class="hljs-keyword">const</span> <span class="hljs-title function_">handleNextTick</span> = (<span class="hljs-params">timestamp</span>) =&gt; &#123;      <span class="hljs-keyword">if</span> (timer.<span class="hljs-property">start</span> === -<span class="hljs-number">1</span>) &#123;        timer.<span class="hljs-property">start</span> = timestamp;      &#125;      <span class="hljs-keyword">const</span> elapsed = timestamp - timer.<span class="hljs-property">start</span>;      <span class="hljs-keyword">if</span> (!time || elapsed &gt; time) &#123;        <span class="hljs-title function_">cb</span>();        <span class="hljs-title function_">clearRafTimeout</span>(id);      &#125; <span class="hljs-keyword">else</span> &#123;        timer.<span class="hljs-property">id</span> = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(handleNextTick);      &#125;    &#125;;    <span class="hljs-keyword">const</span> id = <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(handleNextTick);    timer.<span class="hljs-property">id</span> = id;    timerList[id] = timer;    <span class="hljs-keyword">return</span> id;  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">clearRafTimeout</span>(<span class="hljs-params">id</span>) &#123;    <span class="hljs-keyword">const</span> timer = timerList[id];    <span class="hljs-keyword">if</span> (timer) &#123;      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(timer.<span class="hljs-property">id</span>);      <span class="hljs-keyword">delete</span> timerList[id];    &#125;  &#125;  <span class="hljs-keyword">let</span> intervalList = &#123;&#125;;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">setRafInterval</span>(<span class="hljs-params">cb, time</span>) &#123;    <span class="hljs-keyword">let</span> intervalId = <span class="hljs-title function_">setRafTimeout</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;      <span class="hljs-keyword">if</span> (!intervalList[intervalId]) <span class="hljs-keyword">return</span>;      <span class="hljs-title function_">cb</span>();      <span class="hljs-title function_">clearRafTimeout</span>(intervalList[intervalId]);      intervalList[intervalId] = <span class="hljs-title function_">setRafTimeout</span>(fn, time);    &#125;, time);    intervalList[intervalId] = intervalId;    <span class="hljs-keyword">return</span> intervalId;  &#125;  <span class="hljs-keyword">function</span> <span class="hljs-title function_">clearRafInterval</span>(<span class="hljs-params">id</span>) &#123;    <span class="hljs-keyword">const</span> timer = intervalList[id];    <span class="hljs-keyword">if</span> (timer) &#123;      <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">cancelAnimationFrame</span>(timer);      <span class="hljs-keyword">delete</span> intervalList[id];      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(timer, id, intervalList);    &#125;  &#125;  <span class="hljs-keyword">let</span> requestButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;requestAnimation&quot;</span>);  <span class="hljs-keyword">let</span> requestId;  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> flag1 = <span class="hljs-literal">true</span>;  requestButton.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-keyword">if</span> (flag1) &#123;      requestButton.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;关闭requestAnimation定时器&quot;</span>;      requestId = <span class="hljs-title function_">setRafInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;count++&#125;</span> requestAnimation`</span>;      &#125;, <span class="hljs-number">1000</span>);      flag1 = !flag1;    &#125; <span class="hljs-keyword">else</span> &#123;      requestButton.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;开启requestAnimation定时器&quot;</span>;      <span class="hljs-title function_">clearRafInterval</span>(requestId);      flag1 = !flag1;    &#125;  &#125;;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><script type="module">const timerList = {};function setRafTimeout(cb, time) {    const timer = {        id: -1,        start: -1,        cb,    };    const handleNextTick = (timestamp) => {        if (timer.start === -1) {            timer.start = timestamp;        }        const elapsed = timestamp - timer.start;        if (!time || elapsed > time) {            cb();            clearRafTimeout(id);        } else {            timer.id = window.requestAnimationFrame(handleNextTick);        }    };    const id = window.requestAnimationFrame(handleNextTick);    timer.id = id;    timerList[id] = timer;    return id;}function clearRafTimeout(id ) {    const timer = timerList[id];    if (timer) {        window.cancelAnimationFrame(timer.id);        delete timerList[id];    }} let intervalList = {};function setRafInterval(cb,time){    let intervalId = setRafTimeout(function fn(){        if(!intervalList[intervalId])return;        cb();        clearRafTimeout(intervalList[intervalId])        intervalList[intervalId] = setRafTimeout(fn,time);    },time)    intervalList[intervalId] = intervalId;    return intervalId;}function clearRafInterval(id){    const timer = intervalList[id];    if (timer) {        window.cancelAnimationFrame(timer);        delete intervalList[id];        console.log(timer,id,intervalList)    }}    let requestButton = document.getElementById("requestAnimation");    let requestId;    let count = 0;    let flag1 = true;    requestButton.onclick = ()=>{        if(flag1){            requestButton.innerText = "关闭requestAnimation定时器"            requestId = setRafInterval(()=>{                document.title = `${count++} requestAnimation`;            },1000);            flag1 = !flag1        }else{            requestButton.innerText = "开启requestAnimation定时器"            clearRafInterval(requestId);            flag1 = !flag1        }    }</script><h2 id="WebWorker">WebWorker</h2><p>webworker 不会受浏览器切换 tab 影响，能够正常运行</p><p><button id="webwork">开启 WebWorker 定时器</button></p><pre><code class="hljs"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript">  <span class="hljs-keyword">let</span> blob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>([    <span class="hljs-string">`    let timer;    onmessage = (&#123;data:flag&#125;)=&gt;&#123;        console.log(&quot;收到message&quot;,flag)        if(!flag)&#123;            clearInterval(timer);        &#125;else&#123;           timer = setInterval(function() &#123; postMessage(&#x27;&#x27;); &#125;, 500);        &#125;    &#125;    `</span>,  ]);  <span class="hljs-keyword">let</span> url = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);  <span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(url);  <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(blob);  <span class="hljs-keyword">let</span> workerButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;webwork&quot;</span>);  <span class="hljs-keyword">let</span> requestId;  <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;  <span class="hljs-keyword">let</span> flag1 = <span class="hljs-literal">true</span>;  worker.<span class="hljs-property">onmessage</span> = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(count, <span class="hljs-string">&quot;123&quot;</span>);    <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;count++&#125;</span> WebWorker`</span>;  &#125;;  workerButton.<span class="hljs-property">onclick</span> = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag1);    <span class="hljs-keyword">if</span> (flag1) &#123;      workerButton.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;关闭web work定时器&quot;</span>;    &#125; <span class="hljs-keyword">else</span> &#123;      workerButton.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;开启web work定时器&quot;</span>;    &#125;    worker.<span class="hljs-title function_">postMessage</span>(flag1);    flag1 = !flag1;  &#125;;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><script type="module">    let blob = new Blob([`    let timer;    onmessage = ({data:flag})=>{        console.log("收到message",flag)        if(!flag){            clearInterval(timer);        }else{           timer = setInterval(function() { postMessage(''); }, 500);         }    }    `]);    let url = window.URL.createObjectURL(blob);    var worker = new Worker(url);    window.URL.revokeObjectURL(blob)    let workerButton = document.getElementById("webwork");    let requestId;    let count = 0;    let flag1 = true;    worker.onmessage = ()=>{    console.log(count,'123')        document.title = `${count++} WebWorker`;    }    workerButton.onclick = ()=>{        console.log(flag1)        if(flag1){            workerButton.innerText = "关闭web work定时器"        }else{            workerButton.innerText = "开启web work定时器"        }        worker.postMessage(flag1);        flag1 = !flag1    }</script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> setTimeout </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv 常用对象</title>
      <link href="/2020/11/22/opencv-chang-yong-dui-xiang/"/>
      <url>/2020/11/22/opencv-chang-yong-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="创建Mat对象的方法">创建Mat对象的方法</h2><ul><li>构造函数Mat()</li></ul><pre><code class="hljs"><span class="hljs-function">Mat <span class="hljs-title">M</span><span class="hljs-params">(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,CV_8UC3,Scalar(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>))</span></span>;cout &lt;&lt; <span class="hljs-string">&quot;M = &quot;</span> &lt;&lt; M &lt;&lt; endl;<span class="hljs-comment">// output</span><span class="hljs-comment">//  M = [  0,   0, 255,   0,   0, 255;</span><span class="hljs-comment">//   0,   0, 255,   0,   0, 255]</span></code></pre><p>这段代码创建了2*2的标量(Scalar)（只有大小没有方向）[0,255,255]</p><p>CV_8UC3 表示 unsigned char 类型<br>char 是一个字节 -128-127<br>unsigned 是 0-255</p><ul><li>通过构造函数</li></ul><pre><code class="hljs"><span class="hljs-type">int</span> sz[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;;<span class="hljs-function">Mat <span class="hljs-title">L</span><span class="hljs-params">(<span class="hljs-number">3</span>,sz,CV_8UC,Scalar::all(<span class="hljs-number">0</span>))</span></span>;cout &lt;&lt; M &lt;&lt; endl;<span class="hljs-comment">// error 输出会报错</span></code></pre><p>Scalar::all(0) 会返回一个<code>[0,0,0,0]</code></p><p>构造函数有点多用到一个再写一个吧。</p><h2 id="格式化输出">格式化输出</h2><p>直接用python格式的，因为很舒服</p><pre><code class="hljs"> <span class="hljs-function">Mat <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">4</span>,CV_8UC3)</span></span>;<span class="hljs-built_in">randu</span>(r,Scalar::<span class="hljs-built_in">all</span>(<span class="hljs-number">0</span>),Scalar::<span class="hljs-built_in">all</span>(<span class="hljs-number">255</span>));cout&lt;&lt; format(r,Formatter::FMT_PYTHON) &lt;&lt; endl;<span class="hljs-comment">//output </span>[[[ <span class="hljs-number">91</span>,   <span class="hljs-number">2</span>,  <span class="hljs-number">79</span>], [<span class="hljs-number">179</span>,  <span class="hljs-number">52</span>, <span class="hljs-number">205</span>], [<span class="hljs-number">236</span>,   <span class="hljs-number">8</span>, <span class="hljs-number">181</span>]], [[<span class="hljs-number">239</span>,  <span class="hljs-number">26</span>, <span class="hljs-number">248</span>], [<span class="hljs-number">207</span>, <span class="hljs-number">218</span>,  <span class="hljs-number">45</span>], [<span class="hljs-number">183</span>, <span class="hljs-number">158</span>, <span class="hljs-number">101</span>]], [[<span class="hljs-number">102</span>,  <span class="hljs-number">18</span>, <span class="hljs-number">118</span>], [ <span class="hljs-number">68</span>, <span class="hljs-number">210</span>, <span class="hljs-number">139</span>], [<span class="hljs-number">198</span>, <span class="hljs-number">207</span>, <span class="hljs-number">211</span>]], [[<span class="hljs-number">181</span>, <span class="hljs-number">162</span>, <span class="hljs-number">197</span>], [<span class="hljs-number">191</span>, <span class="hljs-number">196</span>,  <span class="hljs-number">40</span>], [  <span class="hljs-number">7</span>, <span class="hljs-number">243</span>, <span class="hljs-number">230</span>]], [[ <span class="hljs-number">45</span>,   <span class="hljs-number">6</span>,  <span class="hljs-number">48</span>], [<span class="hljs-number">173</span>, <span class="hljs-number">242</span>, <span class="hljs-number">125</span>], [<span class="hljs-number">175</span>,  <span class="hljs-number">90</span>,  <span class="hljs-number">63</span>]], [[ <span class="hljs-number">90</span>,  <span class="hljs-number">22</span>, <span class="hljs-number">112</span>], [<span class="hljs-number">221</span>, <span class="hljs-number">167</span>, <span class="hljs-number">224</span>], [<span class="hljs-number">113</span>, <span class="hljs-number">208</span>, <span class="hljs-number">123</span>]], [[<span class="hljs-number">214</span>,  <span class="hljs-number">35</span>, <span class="hljs-number">229</span>], [  <span class="hljs-number">6</span>, <span class="hljs-number">143</span>, <span class="hljs-number">138</span>], [ <span class="hljs-number">98</span>,  <span class="hljs-number">81</span>, <span class="hljs-number">118</span>]], [[<span class="hljs-number">187</span>, <span class="hljs-number">167</span>, <span class="hljs-number">140</span>], [<span class="hljs-number">218</span>, <span class="hljs-number">178</span>,  <span class="hljs-number">23</span>], [ <span class="hljs-number">43</span>, <span class="hljs-number">133</span>, <span class="hljs-number">154</span>]], [[<span class="hljs-number">150</span>,  <span class="hljs-number">76</span>, <span class="hljs-number">101</span>], [  <span class="hljs-number">8</span>,  <span class="hljs-number">38</span>, <span class="hljs-number">238</span>], [ <span class="hljs-number">84</span>,  <span class="hljs-number">47</span>,   <span class="hljs-number">7</span>]], [[<span class="hljs-number">117</span>, <span class="hljs-number">246</span>, <span class="hljs-number">163</span>], [<span class="hljs-number">237</span>,  <span class="hljs-number">69</span>, <span class="hljs-number">129</span>], [ <span class="hljs-number">60</span>, <span class="hljs-number">101</span>,  <span class="hljs-number">41</span>]]]</code></pre><p>#常用数据结构</p><ul><li>点 Point</li></ul><pre><code class="hljs"><span class="hljs-comment">// 二维</span><span class="hljs-function">Point2f <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>)</span></span>;<span class="hljs-comment">// 三维</span><span class="hljs-function">Point3f <span class="hljs-title">p3</span><span class="hljs-params">(<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>)</span></span>;<span class="hljs-comment">// output </span>[<span class="hljs-number">6</span>,<span class="hljs-number">2</span>][<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>]</code></pre><ul><li>向量 vector</li></ul><p>和数组差不多</p><pre><code class="hljs">vector&lt;<span class="hljs-type">float</span>&gt; v;v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">5</span>);v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">7</span>);cout &lt;&lt; <span class="hljs-built_in">Mat</span>(v) &lt;&lt; endl;<span class="hljs-comment">//output</span>[<span class="hljs-number">3</span>; <span class="hljs-number">5</span>; <span class="hljs-number">7</span>]</code></pre><p>这个vector 是标准库的向量，可以自动改变自己的长度</p><ul><li>颜色 Scalar</li></ul><p>Scalar 是一个四个元素的数组</p><pre><code class="hljs"><span class="hljs-function">Scalar <span class="hljs-title">s</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)</span></span>;<span class="hljs-comment">//可以是</span><span class="hljs-type">int</span> r = <span class="hljs-number">255</span>,g=<span class="hljs-number">0</span>,b=<span class="hljs-number">0</span>;<span class="hljs-built_in">Scalar</span>(r,g,b);</code></pre><ul><li>大小 Size</li></ul><p>width 和 height</p><pre><code class="hljs"><span class="hljs-type">int</span> width = <span class="hljs-number">100</span>, height = <span class="hljs-number">200</span>;<span class="hljs-built_in">Size</span>(width, height);</code></pre><ul><li>矩形 Rect</li></ul><pre><code class="hljs"><span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>,width = <span class="hljs-number">200</span>, height = <span class="hljs-number">200</span>;<span class="hljs-function">Rect <span class="hljs-title">rect1</span><span class="hljs-params">(x, y, width, height)</span></span>;<span class="hljs-function">Rect <span class="hljs-title">rect2</span><span class="hljs-params">(x + <span class="hljs-number">50</span>, y + <span class="hljs-number">50</span>, width, height)</span></span>;<span class="hljs-comment">// 矩形交集</span>Rect rect = rect1 &amp; rect2;<span class="hljs-comment">// output</span>[<span class="hljs-number">150</span> x <span class="hljs-number">150</span> <span class="hljs-built_in">from</span> (<span class="hljs-number">50</span>, <span class="hljs-number">50</span>)]<span class="hljs-comment">// 矩形并集</span>Rect rect = rect1 | rect2;[<span class="hljs-number">250</span> x <span class="hljs-number">250</span> <span class="hljs-built_in">from</span> (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)]<span class="hljs-comment">// 移动矩形</span><span class="hljs-function">Point2f <span class="hljs-title">point</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)</span></span>;Rect rectShift = rect + point;<span class="hljs-comment">// 添加</span>Rect rectShift = rect1 - <span class="hljs-built_in">Size</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">//output</span>[<span class="hljs-number">180</span> x <span class="hljs-number">180</span> <span class="hljs-built_in">from</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)]<span class="hljs-comment">//  移动</span>Rect rectShift = rect1 - <span class="hljs-built_in">Point</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<span class="hljs-comment">// output</span>[<span class="hljs-number">200</span> x <span class="hljs-number">200</span> <span class="hljs-built_in">from</span>(<span class="hljs-number">-20</span>, <span class="hljs-number">-20</span>)]</code></pre><ul><li>颜色空间转换 cvtColor</li></ul><p>void cvtColor(InputArray src, OutputArray output ,int code, int dstCn=0);</p><p>常用颜色</p><ul><li>RGB</li><li>HSV 色调 饱和度 明度</li><li>HLS 色调 亮度 饱和度</li><li>Gray 灰度</li><li>5X5 5X5颜色矩阵，开发板</li><li>YCrCb(YUV)  Y 明亮度 U和V色度，描述色彩及饱和度 JPEG会用</li><li>CIE L<em>a</em>b  L 亮度 a 和 b 色彩对立唯独</li><li>CIE L<em>u</em>v  未知</li><li>Bayer 拜尔滤色镜 多用于数字图像传感器</li><li>YUV420 YUV的一种<br>常量都在COLOR_XXX2XXX 定义</li></ul><blockquote><p>ps: OpenCV 默认图片通道存储孙旭是BGR即蓝绿红，而不是RGB</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> opencv </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jest mock XMLHttpRequest</title>
      <link href="/2020/11/20/jest-mock/"/>
      <url>/2020/11/20/jest-mock/</url>
      
        <content type="html"><![CDATA[<h2 id="场景">场景</h2><p>要开发一个sdk需要请求网络，需要在本地连接远端sdk，这时候有两种方式去模拟这种行为。</p><ul><li>测试时候通过本地代理，做接口转发</li><li>通过jest直接mock xhr对象，让其返回一定是那个数据格式</li></ul><p>对于第一种来说，还需要更多的接口信息，依赖后端的逻辑判断，为了sdk依赖更小，我选择直接使用mock的方式。</p><h2 id="jest-mock一个实例">jest mock一个实例</h2><p>jest</p><pre><code class="hljs"><span class="hljs-comment">// jest.mock(implementation)是 jest.fn().mockImplementation(implementation)</span><span class="hljs-comment">// 缩写</span><span class="hljs-variable language_">global</span>.<span class="hljs-property">XMLHttpRequest</span> = jest.<span class="hljs-title function_">fn</span>().<span class="hljs-title function_">mockImplementation</span>(<span class="hljs-function">()=&gt;</span>&#123;    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">open</span>:jest.<span class="hljs-title function_">fn</span>(),        <span class="hljs-attr">send</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);                <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span> = <span class="hljs-string">&quot;ok&quot;</span>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onload</span>()            &#125;)        &#125;,    &#125;&#125;)<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;xhr mock&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">/**     * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">XMLHttpRequest</span>&#125;     */</span>    <span class="hljs-keyword">let</span> xhr;    <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">() =&gt;</span> &#123;        xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();    &#125;);    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should get ok&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;http://test.com/rest/abc&quot;</span>);        xhr.<span class="hljs-property">onload</span>= <span class="hljs-function">()=&gt;</span>&#123;            <span class="hljs-title function_">expect</span>(xhr.<span class="hljs-property">response</span>).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">&quot;ok&quot;</span>)            <span class="hljs-title function_">done</span>();        &#125;        xhr.<span class="hljs-title function_">send</span>();    &#125;);&#125;);</code></pre><p>这样我们就成功mock一个xhr接口了，不过现在还是存在问题，不能根据路径返回不同的数据，那么我们继续修改下我们的方法</p><pre><code class="hljs"><span class="hljs-keyword">let</span> mockCache = &#123;&#125;;<span class="hljs-keyword">function</span> <span class="hljs-title function_">mockApi</span>(<span class="hljs-params">path,data</span>)&#123;    mockCache[path] = data;&#125;<span class="hljs-comment">// jest.mock(implementation)是 jest.fn().mockImplementation(implementation)</span><span class="hljs-comment">// 缩写</span><span class="hljs-variable language_">global</span>.<span class="hljs-property">XMLHttpRequest</span> = jest.<span class="hljs-title function_">fn</span>().<span class="hljs-title function_">mockImplementation</span>(<span class="hljs-function">()=&gt;</span>&#123;    <span class="hljs-keyword">return</span> &#123;        <span class="hljs-attr">open</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">type,path</span>)&#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span> = mockCache[path]        &#125;,        <span class="hljs-attr">send</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">onload</span>()        &#125;,    &#125;&#125;)<span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;xhr mock&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-comment">/**     * <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">XMLHttpRequest</span>&#125;     */</span>    <span class="hljs-keyword">let</span> xhr;    <span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">() =&gt;</span> &#123;        xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();    &#125;);    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should get ok&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;        <span class="hljs-title function_">mockApi</span>(<span class="hljs-string">&quot;http://test.com/rest/abc&quot;</span>,<span class="hljs-string">&quot;ok&quot;</span>)        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;http://test.com/rest/abc&quot;</span>);        xhr.<span class="hljs-property">onload</span>= <span class="hljs-function">()=&gt;</span>&#123;            <span class="hljs-title function_">expect</span>(xhr.<span class="hljs-property">response</span>).<span class="hljs-title function_">toBe</span>(<span class="hljs-string">&quot;ok&quot;</span>)            <span class="hljs-title function_">done</span>();        &#125;        xhr.<span class="hljs-title function_">send</span>();    &#125;);    <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should get &#123;abc: 123&#125;&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">done</span>) =&gt;</span> &#123;        <span class="hljs-title function_">mockApi</span>(<span class="hljs-string">&quot;http://test.com/rest/abc&quot;</span>,&#123;<span class="hljs-attr">abc</span>:<span class="hljs-number">123</span>&#125;)        xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;get&quot;</span>,<span class="hljs-string">&quot;http://test.com/rest/abc&quot;</span>);        xhr.<span class="hljs-property">onload</span>= <span class="hljs-function">()=&gt;</span>&#123;            <span class="hljs-title function_">expect</span>(xhr.<span class="hljs-property">response</span>).<span class="hljs-title function_">toStrictEqual</span>(&#123;<span class="hljs-attr">abc</span>:<span class="hljs-number">123</span>&#125;)            <span class="hljs-title function_">done</span>();        &#125;        xhr.<span class="hljs-title function_">send</span>();    &#125;);&#125;);</code></pre><p>剩下的还可以继续扩充，但是到了这部分就够我的需求用了。</p><p>简单的轮子自己搞，代码简洁又明了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jest </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序幕</title>
      <link href="/2020/11/18/hello-world/"/>
      <url>/2020/11/18/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>代码是一种生活方式</p></blockquote><p>今年终于忍心花钱买下一个自己的服务器了，离成为真正程序员的又第一步。</p><h4 id="名字起源">名字起源</h4><p>本想起名叫做苏鑫，因为名字重名率太高了，改名为苏鑫 2017。</p><p>2017 年可以算做我的编程元年了吧，大概是自己算的理解代码的一年（瞎猫碰见了死耗子）。</p><p>也是这一年加入了 github，正好还能和 github 一个名字。</p><p>恰巧刚好 <a href="http://suxin2017.cc">suxin2017.cc</a> 这个域名也没被别人注册过还很便宜哈哈哈哈。</p><h4 id="想做些什么">想做些什么</h4><p>写代码真的是一件很有意思的事情，想做的越来越多，但是都需要一个永不停歇的打工人（服务器）和我一起在互联网上造作。</p><p>没了服务器的网页系统显得很鸡肋，有很多条条框框限制，花了好多大洋一咬牙终于搞了一个云服务器。</p><p>现在的自己不会想那么多，就是写下去就好了，和当初在简书上写文章一样，什么都不想，就是图个乐。</p><p>现在想做的大概就是只是持续输出，构建自己的只是理论体系。</p><p>第二个就是把自己做的一些东西聚合起来，比如放到一个引导页面，方便自己查看，有些东西自己做的现在都快忘记了。</p><p>还有就是想搞一个在线 playgroud，不过 codepen 也可以用，也就先搁置一下。</p><p><s>还有个人主题…博客插件，甚至自己写一个内容管理系统这都不是没有可能。</s></p><p>想做一个轮子哥，自己造轮子，搞起来。。。</p><h4 id="留下些什么">留下些什么</h4><p>之前 github 搞了个活动把我的代码送到北极去了，意料之外，而且很后悔我把我之前写的小游戏给删除了，虽然写的很垃圾，但是过程还是很有成就感的，唉～。</p><p>曾经翻看过一边自己的公众号，一些之前写的文章，随着时间的不同感触良多。</p><p>我可以立马回忆起当时的心路历程，当时怎么想的像是一份只能我自己解码的秘文，在大脑中一页一页播放着。</p><p>写第一个 js 飞机小游戏，贪吃蛇没搞成的吃豆子游戏，爬去散文网时候自己拿正则表达式匹配网页文本的傻傻行为，模拟登陆学校成绩查询机器人，现在觉得十分有趣。</p><p>emm…年龄越大记忆就会不好就是得经常自己记些什么，留下一份印记（钞票印记…没钱了他们会把我服务器回收了…）不过我还有好多其他备份哈哈哈哈</p>]]></content>
      
      
      <categories>
          
          <category> 感悟 </category>
          
          <category> post </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
